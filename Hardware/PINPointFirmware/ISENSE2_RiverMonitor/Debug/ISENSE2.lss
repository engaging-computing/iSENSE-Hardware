
ISENSE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  00007fce  00008062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007fce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000131  0080024c  0080024c  000081ae  2**0
                  ALLOC
  3 .noinit       00000001  0080037d  0080037d  000081ae  2**0
                  ALLOC
  4 .stab         00000a2c  00000000  00000000  000081b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000020a  00000000  00000000  00008bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000268  00000000  00000000  00008de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000007eb  00000000  00000000  0000904e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004325  00000000  00000000  00009839  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001483  00000000  00000000  0000db5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000044af  00000000  00000000  0000efe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000006b0  00000000  00000000  00013490  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000d36  00000000  00000000  00013b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002287  00000000  00000000  00014876  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000057e  00000000  00000000  00016afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  0001707b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
       8:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
       c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      10:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <__vector_4>
      14:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      18:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      1c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      20:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      24:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      28:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      2c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      30:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      34:	0c 94 96 24 	jmp	0x492c	; 0x492c <__vector_13>
      38:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      3c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      40:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      44:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      48:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      4c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      50:	0c 94 16 08 	jmp	0x102c	; 0x102c <__vector_20>
      54:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      58:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      5c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      60:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      64:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      68:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      6c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      70:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__vector_28>
      74:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      78:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>

0000007c <__c.1820>:
      7c:	24 24 24 00                                         $$$.

00000080 <__c.1822>:
      80:	2d 2d 2d 0d 00                                      ---..

00000085 <__c.1797>:
      85:	24 24 24 00                                         $$$.

00000089 <__c.1799>:
      89:	53 55 2c 00                                         SU,.

0000008d <__c.1801>:
      8d:	53 43 2c 31 31 30 31 0d 00                          SC,1101..

00000096 <__c.1803>:
      96:	53 53 2c 53 65 72 69 61 6c 50 6f 72 74 0d 00        SS,SerialPort..

000000a5 <__c.1805>:
      a5:	53 49 2c 30 30 33 30 0d 00                          SI,0030..

000000ae <__c.1807>:
      ae:	53 4a 2c 30 30 33 30 0d 00                          SJ,0030..

000000b7 <__c.1809>:
      b7:	53 4e 2c 50 49 4e 50 6f 69 6e 74 34 00              SN,PINPoint4.

000000c4 <__c.1811>:
      c4:	2d 2d 2d 0d 00                                      ---..

000000c9 <__c.1851>:
      c9:	24 50 4d 54 4b 33 31 34 2c 30 2c 30 2c 30 2c 35     $PMTK314,0,0,0,5
      d9:	2c 30 2c 30 2c 30 2c 30 2c 30 2c 30 2c 30 2c 30     ,0,0,0,0,0,0,0,0
      e9:	2c 30 2c 30 2c 30 2c 30 2c 30 2a 32 44 0d 0a 00     ,0,0,0,0,0*2D...
	...

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d8 e0       	ldi	r29, 0x08	; 8
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <get_mcusr>:
uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
void get_mcusr(void) \
__attribute__((naked)) \
__attribute__((section(".init3")));
void get_mcusr(void)
{
     106:	84 e5       	ldi	r24, 0x54	; 84
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	fc 01       	movw	r30, r24
     10c:	80 81       	ld	r24, Z
     10e:	80 93 7d 03 	sts	0x037D, r24
    mcusr_mirror = MCUSR;
    MCUSR = 0;
     112:	84 e5       	ldi	r24, 0x54	; 84
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	fc 01       	movw	r30, r24
     118:	10 82       	st	Z, r1
    wdt_disable();
     11a:	88 e1       	ldi	r24, 0x18	; 24
     11c:	0f b6       	in	r0, 0x3f	; 63
     11e:	f8 94       	cli
     120:	80 93 60 00 	sts	0x0060, r24
     124:	10 92 60 00 	sts	0x0060, r1
     128:	0f be       	out	0x3f, r0	; 63

0000012a <__do_copy_data>:
     12a:	12 e0       	ldi	r17, 0x02	; 2
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	ee ec       	ldi	r30, 0xCE	; 206
     132:	ff e7       	ldi	r31, 0x7F	; 127
     134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x10>
     136:	05 90       	lpm	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	ac 34       	cpi	r26, 0x4C	; 76
     13c:	b1 07       	cpc	r27, r17
     13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0xc>

00000140 <__do_clear_bss>:
     140:	13 e0       	ldi	r17, 0x03	; 3
     142:	ac e4       	ldi	r26, 0x4C	; 76
     144:	b2 e0       	ldi	r27, 0x02	; 2
     146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
     148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
     14a:	ad 37       	cpi	r26, 0x7D	; 125
     14c:	b1 07       	cpc	r27, r17
     14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
     150:	0e 94 c4 18 	call	0x3188	; 0x3188 <main>
     154:	0c 94 e5 3f 	jmp	0x7fca	; 0x7fca <_exit>

00000158 <__bad_interrupt>:
     158:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015c <adc_Init>:
 *
 * @param ref The reference voltage source.
 * @param res The ADC conversion resolution.
 */
void adc_Init(adcRef ref, adcRes res)
{
     15c:	df 93       	push	r29
     15e:	cf 93       	push	r28
     160:	00 d0       	rcall	.+0      	; 0x162 <adc_Init+0x6>
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
     166:	89 83       	std	Y+1, r24	; 0x01
     168:	6a 83       	std	Y+2, r22	; 0x02
    adc_Control(OFF);
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	0e 94 95 01 	call	0x32a	; 0x32a <adc_Control>

    switch (ref)
     170:	89 81       	ldd	r24, Y+1	; 0x01
     172:	88 2f       	mov	r24, r24
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	81 30       	cpi	r24, 0x01	; 1
     178:	91 05       	cpc	r25, r1
     17a:	c1 f0       	breq	.+48     	; 0x1ac <adc_Init+0x50>
     17c:	82 30       	cpi	r24, 0x02	; 2
     17e:	91 05       	cpc	r25, r1
     180:	41 f1       	breq	.+80     	; 0x1d2 <adc_Init+0x76>
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	c9 f5       	brne	.+114    	; 0x1f8 <adc_Init+0x9c>
    {
        case ADC_EXTERNAL:
            set_bit(ADMUX, REFS0);
     186:	8c e7       	ldi	r24, 0x7C	; 124
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	2c e7       	ldi	r18, 0x7C	; 124
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	f9 01       	movw	r30, r18
     190:	20 81       	ld	r18, Z
     192:	20 64       	ori	r18, 0x40	; 64
     194:	fc 01       	movw	r30, r24
     196:	20 83       	st	Z, r18
            clear_bit(ADMUX, REFS1);
     198:	8c e7       	ldi	r24, 0x7C	; 124
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	2c e7       	ldi	r18, 0x7C	; 124
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	f9 01       	movw	r30, r18
     1a2:	20 81       	ld	r18, Z
     1a4:	2f 77       	andi	r18, 0x7F	; 127
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 83       	st	Z, r18
            break;
     1aa:	26 c0       	rjmp	.+76     	; 0x1f8 <adc_Init+0x9c>
        case ADC_INTERNAL_11V:
            clear_bit(ADMUX, REFS0);
     1ac:	8c e7       	ldi	r24, 0x7C	; 124
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	2c e7       	ldi	r18, 0x7C	; 124
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	f9 01       	movw	r30, r18
     1b6:	20 81       	ld	r18, Z
     1b8:	2f 7b       	andi	r18, 0xBF	; 191
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
            set_bit(ADMUX, REFS1);
     1be:	8c e7       	ldi	r24, 0x7C	; 124
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	2c e7       	ldi	r18, 0x7C	; 124
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	f9 01       	movw	r30, r18
     1c8:	20 81       	ld	r18, Z
     1ca:	20 68       	ori	r18, 0x80	; 128
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 83       	st	Z, r18
            break;
     1d0:	13 c0       	rjmp	.+38     	; 0x1f8 <adc_Init+0x9c>
        case ADC_INTERNAL_256V:
            set_bit(ADMUX, REFS0);
     1d2:	8c e7       	ldi	r24, 0x7C	; 124
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	2c e7       	ldi	r18, 0x7C	; 124
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	f9 01       	movw	r30, r18
     1dc:	20 81       	ld	r18, Z
     1de:	20 64       	ori	r18, 0x40	; 64
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
            set_bit(ADMUX, REFS1);
     1e4:	8c e7       	ldi	r24, 0x7C	; 124
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	2c e7       	ldi	r18, 0x7C	; 124
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	f9 01       	movw	r30, r18
     1ee:	20 81       	ld	r18, Z
     1f0:	20 68       	ori	r18, 0x80	; 128
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
            break;
     1f6:	00 00       	nop
    }
    set_bit(ADMUX, ADLAR);
     1f8:	8c e7       	ldi	r24, 0x7C	; 124
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	2c e7       	ldi	r18, 0x7C	; 124
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	f9 01       	movw	r30, r18
     202:	20 81       	ld	r18, Z
     204:	20 62       	ori	r18, 0x20	; 32
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18

    set_bit(ADCSRA, ADPS0);
     20a:	8a e7       	ldi	r24, 0x7A	; 122
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	2a e7       	ldi	r18, 0x7A	; 122
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	f9 01       	movw	r30, r18
     214:	20 81       	ld	r18, Z
     216:	21 60       	ori	r18, 0x01	; 1
     218:	fc 01       	movw	r30, r24
     21a:	20 83       	st	Z, r18
    set_bit(ADCSRA, ADPS1);
     21c:	8a e7       	ldi	r24, 0x7A	; 122
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	2a e7       	ldi	r18, 0x7A	; 122
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	f9 01       	movw	r30, r18
     226:	20 81       	ld	r18, Z
     228:	22 60       	ori	r18, 0x02	; 2
     22a:	fc 01       	movw	r30, r24
     22c:	20 83       	st	Z, r18
    set_bit(ADCSRA, ADPS2);
     22e:	8a e7       	ldi	r24, 0x7A	; 122
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	2a e7       	ldi	r18, 0x7A	; 122
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	f9 01       	movw	r30, r18
     238:	20 81       	ld	r18, Z
     23a:	24 60       	ori	r18, 0x04	; 4
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18

    resolution = res;
     240:	8a 81       	ldd	r24, Y+2	; 0x02
     242:	80 93 4c 02 	sts	0x024C, r24

    adc_Control(ON);
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0e 94 95 01 	call	0x32a	; 0x32a <adc_Control>
}
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	08 95       	ret

00000256 <adc_Read>:
 * @param channel The ADC channel to read (0-7).
 *
 * @return Returns the ADC value of the requested channel.
 */
unsigned int adc_Read(char channel)
{
     256:	df 93       	push	r29
     258:	cf 93       	push	r28
     25a:	00 d0       	rcall	.+0      	; 0x25c <adc_Read+0x6>
     25c:	00 d0       	rcall	.+0      	; 0x25e <adc_Read+0x8>
     25e:	0f 92       	push	r0
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	8d 83       	std	Y+5, r24	; 0x05
    unsigned int low, high;

    ADMUX &= ADC_RESET;
     266:	8c e7       	ldi	r24, 0x7C	; 124
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	2c e7       	ldi	r18, 0x7C	; 124
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	f9 01       	movw	r30, r18
     270:	20 81       	ld	r18, Z
     272:	20 7e       	andi	r18, 0xE0	; 224
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18
    ADMUX |= channel;
     278:	8c e7       	ldi	r24, 0x7C	; 124
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	2c e7       	ldi	r18, 0x7C	; 124
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	30 81       	ld	r19, Z
     284:	2d 81       	ldd	r18, Y+5	; 0x05
     286:	23 2b       	or	r18, r19
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
    set_bit(ADCSRA, ADSC);
     28c:	8a e7       	ldi	r24, 0x7A	; 122
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	2a e7       	ldi	r18, 0x7A	; 122
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	f9 01       	movw	r30, r18
     296:	20 81       	ld	r18, Z
     298:	20 64       	ori	r18, 0x40	; 64
     29a:	fc 01       	movw	r30, r24
     29c:	20 83       	st	Z, r18

    while (test_bit(ADCSRA, ADSC));
     29e:	00 00       	nop
     2a0:	8a e7       	ldi	r24, 0x7A	; 122
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	fc 01       	movw	r30, r24
     2a6:	80 81       	ld	r24, Z
     2a8:	88 2f       	mov	r24, r24
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	80 74       	andi	r24, 0x40	; 64
     2ae:	90 70       	andi	r25, 0x00	; 0
     2b0:	08 2e       	mov	r0, r24
     2b2:	89 2f       	mov	r24, r25
     2b4:	00 0c       	add	r0, r0
     2b6:	88 1f       	adc	r24, r24
     2b8:	99 0b       	sbc	r25, r25
     2ba:	00 0c       	add	r0, r0
     2bc:	88 1f       	adc	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	00 97       	sbiw	r24, 0x00	; 0
     2c2:	71 f7       	brne	.-36     	; 0x2a0 <adc_Read+0x4a>

    low = ADCL;
     2c4:	88 e7       	ldi	r24, 0x78	; 120
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	fc 01       	movw	r30, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	88 2f       	mov	r24, r24
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	9a 83       	std	Y+2, r25	; 0x02
     2d2:	89 83       	std	Y+1, r24	; 0x01
    high = ADCH;
     2d4:	89 e7       	ldi	r24, 0x79	; 121
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	fc 01       	movw	r30, r24
     2da:	80 81       	ld	r24, Z
     2dc:	88 2f       	mov	r24, r24
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	9c 83       	std	Y+4, r25	; 0x04
     2e2:	8b 83       	std	Y+3, r24	; 0x03

    if (resolution == ADC_8BIT_RES)
     2e4:	80 91 4c 02 	lds	r24, 0x024C
     2e8:	88 23       	and	r24, r24
     2ea:	19 f4       	brne	.+6      	; 0x2f2 <adc_Read+0x9c>
    {
        return high;
     2ec:	8b 81       	ldd	r24, Y+3	; 0x03
     2ee:	9c 81       	ldd	r25, Y+4	; 0x04
     2f0:	14 c0       	rjmp	.+40     	; 0x31a <adc_Read+0xc4>
    }
    else
    {
        return (high << 2) + (low >> 6);
     2f2:	8b 81       	ldd	r24, Y+3	; 0x03
     2f4:	9c 81       	ldd	r25, Y+4	; 0x04
     2f6:	9c 01       	movw	r18, r24
     2f8:	22 0f       	add	r18, r18
     2fa:	33 1f       	adc	r19, r19
     2fc:	22 0f       	add	r18, r18
     2fe:	33 1f       	adc	r19, r19
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	9a 81       	ldd	r25, Y+2	; 0x02
     304:	00 24       	eor	r0, r0
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	00 1c       	adc	r0, r0
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	00 1c       	adc	r0, r0
     312:	89 2f       	mov	r24, r25
     314:	90 2d       	mov	r25, r0
     316:	82 0f       	add	r24, r18
     318:	93 1f       	adc	r25, r19
    }
}
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	cf 91       	pop	r28
     326:	df 91       	pop	r29
     328:	08 95       	ret

0000032a <adc_Control>:
 * Sets the ADC to the given state.
 *
 * @param state State to set the ADC to (ON or OFF).
 */
void adc_Control(char state)
{
     32a:	df 93       	push	r29
     32c:	cf 93       	push	r28
     32e:	0f 92       	push	r0
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	89 83       	std	Y+1, r24	; 0x01
    if (state == ON) set_bit(ADCSRA, ADEN);
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	51 f4       	brne	.+20     	; 0x350 <adc_Control+0x26>
     33c:	8a e7       	ldi	r24, 0x7A	; 122
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	2a e7       	ldi	r18, 0x7A	; 122
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	f9 01       	movw	r30, r18
     346:	20 81       	ld	r18, Z
     348:	20 68       	ori	r18, 0x80	; 128
     34a:	fc 01       	movw	r30, r24
     34c:	20 83       	st	Z, r18
     34e:	09 c0       	rjmp	.+18     	; 0x362 <adc_Control+0x38>
    else clear_bit(ADCSRA, ADEN);
     350:	8a e7       	ldi	r24, 0x7A	; 122
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	2a e7       	ldi	r18, 0x7A	; 122
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	f9 01       	movw	r30, r18
     35a:	20 81       	ld	r18, Z
     35c:	2f 77       	andi	r18, 0x7F	; 127
     35e:	fc 01       	movw	r30, r24
     360:	20 83       	st	Z, r18
}
     362:	0f 90       	pop	r0
     364:	cf 91       	pop	r28
     366:	df 91       	pop	r29
     368:	08 95       	ret

0000036a <adx_Init>:

/**
 * Send initialization messages to the adx accelerometer.
 */
void adx_Init(void)
{
     36a:	df 93       	push	r29
     36c:	cf 93       	push	r28
     36e:	00 d0       	rcall	.+0      	; 0x370 <adx_Init+0x6>
     370:	00 d0       	rcall	.+0      	; 0x372 <adx_Init+0x8>
     372:	00 d0       	rcall	.+0      	; 0x374 <adx_Init+0xa>
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
    char out[4];

    out[0] = ADXL_TAP_REG;
     378:	8a e2       	ldi	r24, 0x2A	; 42
     37a:	89 83       	std	Y+1, r24	; 0x01
    out[1] = ADXL_TAP_VAL;
     37c:	1a 82       	std	Y+2, r1	; 0x02
    twi_Write(ADXL_ADDR, out, 2);
     37e:	86 ea       	ldi	r24, 0xA6	; 166
     380:	9e 01       	movw	r18, r28
     382:	2f 5f       	subi	r18, 0xFF	; 255
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	b9 01       	movw	r22, r18
     388:	42 e0       	ldi	r20, 0x02	; 2
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>

    out[0] = ADXL_RAT_REG;
     390:	8c e2       	ldi	r24, 0x2C	; 44
     392:	89 83       	std	Y+1, r24	; 0x01
    out[1] = ADXL_RAT_VAL;
     394:	8e e0       	ldi	r24, 0x0E	; 14
     396:	8a 83       	std	Y+2, r24	; 0x02
    twi_Write(ADXL_ADDR, out, 2);
     398:	86 ea       	ldi	r24, 0xA6	; 166
     39a:	9e 01       	movw	r18, r28
     39c:	2f 5f       	subi	r18, 0xFF	; 255
     39e:	3f 4f       	sbci	r19, 0xFF	; 255
     3a0:	b9 01       	movw	r22, r18
     3a2:	42 e0       	ldi	r20, 0x02	; 2
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>

    out[0] = ADXL_CTL_REG;
     3aa:	8d e2       	ldi	r24, 0x2D	; 45
     3ac:	89 83       	std	Y+1, r24	; 0x01
    out[1] = ADXL_CTL_VAL;
     3ae:	88 e0       	ldi	r24, 0x08	; 8
     3b0:	8a 83       	std	Y+2, r24	; 0x02
    twi_Write(ADXL_ADDR, out, 2);
     3b2:	86 ea       	ldi	r24, 0xA6	; 166
     3b4:	9e 01       	movw	r18, r28
     3b6:	2f 5f       	subi	r18, 0xFF	; 255
     3b8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ba:	b9 01       	movw	r22, r18
     3bc:	42 e0       	ldi	r20, 0x02	; 2
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>

    out[0] = ADXL_INT_REG;
     3c4:	8e e2       	ldi	r24, 0x2E	; 46
     3c6:	89 83       	std	Y+1, r24	; 0x01
    out[1] = ADXL_INT_VAL;
     3c8:	1a 82       	std	Y+2, r1	; 0x02
    twi_Write(ADXL_ADDR, out, 2);
     3ca:	86 ea       	ldi	r24, 0xA6	; 166
     3cc:	9e 01       	movw	r18, r28
     3ce:	2f 5f       	subi	r18, 0xFF	; 255
     3d0:	3f 4f       	sbci	r19, 0xFF	; 255
     3d2:	b9 01       	movw	r22, r18
     3d4:	42 e0       	ldi	r20, 0x02	; 2
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>

    out[0] = ADXL_DAT_REG;
     3dc:	81 e3       	ldi	r24, 0x31	; 49
     3de:	89 83       	std	Y+1, r24	; 0x01
    out[1] = ADXL_DAT_VAL;
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	8a 83       	std	Y+2, r24	; 0x02
    twi_Write(ADXL_ADDR, out, 2);
     3e4:	86 ea       	ldi	r24, 0xA6	; 166
     3e6:	9e 01       	movw	r18, r28
     3e8:	2f 5f       	subi	r18, 0xFF	; 255
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	b9 01       	movw	r22, r18
     3ee:	42 e0       	ldi	r20, 0x02	; 2
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>

    out[0] = ADXL_FIF_REG;
     3f6:	88 e3       	ldi	r24, 0x38	; 56
     3f8:	89 83       	std	Y+1, r24	; 0x01
    out[1] = ADXL_FIF_VAL;
     3fa:	8f e0       	ldi	r24, 0x0F	; 15
     3fc:	8a 83       	std	Y+2, r24	; 0x02
    twi_Write(ADXL_ADDR, out, 2);
     3fe:	86 ea       	ldi	r24, 0xA6	; 166
     400:	9e 01       	movw	r18, r28
     402:	2f 5f       	subi	r18, 0xFF	; 255
     404:	3f 4f       	sbci	r19, 0xFF	; 255
     406:	b9 01       	movw	r22, r18
     408:	42 e0       	ldi	r20, 0x02	; 2
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>

    out[0] = ADXL_OFF_REG;
     410:	8f e1       	ldi	r24, 0x1F	; 31
     412:	89 83       	std	Y+1, r24	; 0x01
    out[1] = 0;
     414:	1a 82       	std	Y+2, r1	; 0x02
    out[2] = 0;
     416:	1b 82       	std	Y+3, r1	; 0x03
    out[3] = 0;
     418:	1c 82       	std	Y+4, r1	; 0x04
    twi_Write(ADXL_ADDR, out, 4);
     41a:	86 ea       	ldi	r24, 0xA6	; 166
     41c:	9e 01       	movw	r18, r28
     41e:	2f 5f       	subi	r18, 0xFF	; 255
     420:	3f 4f       	sbci	r19, 0xFF	; 255
     422:	b9 01       	movw	r22, r18
     424:	44 e0       	ldi	r20, 0x04	; 4
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>

    char tmp[2];

    tmp[0] = data_Read_EEPROM(DATA_ACCEL_X_OFFSET_L);
     42c:	88 e1       	ldi	r24, 0x18	; 24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
     434:	8d 83       	std	Y+5, r24	; 0x05
    tmp[1] = data_Read_EEPROM(DATA_ACCEL_X_OFFSET_H);
     436:	87 e1       	ldi	r24, 0x17	; 23
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
     43e:	8e 83       	std	Y+6, r24	; 0x06
    xOff = ((int16_t*)tmp)[0];
     440:	ce 01       	movw	r24, r28
     442:	05 96       	adiw	r24, 0x05	; 5
     444:	fc 01       	movw	r30, r24
     446:	80 81       	ld	r24, Z
     448:	91 81       	ldd	r25, Z+1	; 0x01
     44a:	90 93 4e 02 	sts	0x024E, r25
     44e:	80 93 4d 02 	sts	0x024D, r24

    tmp[0] = data_Read_EEPROM(DATA_ACCEL_Y_OFFSET_L);
     452:	8a e1       	ldi	r24, 0x1A	; 26
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
     45a:	8d 83       	std	Y+5, r24	; 0x05
    tmp[1] = data_Read_EEPROM(DATA_ACCEL_Y_OFFSET_H);
     45c:	89 e1       	ldi	r24, 0x19	; 25
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
     464:	8e 83       	std	Y+6, r24	; 0x06
    yOff = ((int16_t*)tmp)[0];
     466:	ce 01       	movw	r24, r28
     468:	05 96       	adiw	r24, 0x05	; 5
     46a:	fc 01       	movw	r30, r24
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	90 93 50 02 	sts	0x0250, r25
     474:	80 93 4f 02 	sts	0x024F, r24

    tmp[0] = data_Read_EEPROM(DATA_ACCEL_Z_OFFSET_L);
     478:	8c e1       	ldi	r24, 0x1C	; 28
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
     480:	8d 83       	std	Y+5, r24	; 0x05
    tmp[1] = data_Read_EEPROM(DATA_ACCEL_Z_OFFSET_H);
     482:	8b e1       	ldi	r24, 0x1B	; 27
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
     48a:	8e 83       	std	Y+6, r24	; 0x06
    zOff = ((int16_t*)tmp)[0];
     48c:	ce 01       	movw	r24, r28
     48e:	05 96       	adiw	r24, 0x05	; 5
     490:	fc 01       	movw	r30, r24
     492:	80 81       	ld	r24, Z
     494:	91 81       	ldd	r25, Z+1	; 0x01
     496:	90 93 52 02 	sts	0x0252, r25
     49a:	80 93 51 02 	sts	0x0251, r24
}
     49e:	26 96       	adiw	r28, 0x06	; 6
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	cf 91       	pop	r28
     4ac:	df 91       	pop	r29
     4ae:	08 95       	ret

000004b0 <adx_Calibrate>:
/**
 * Gathers 10 samples and sets the acceleration offsets
 * assuming the device is on a flat surface facing up.
 */
void adx_Calibrate()
{
     4b0:	df 93       	push	r29
     4b2:	cf 93       	push	r28
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	2f 97       	sbiw	r28, 0x0f	; 15
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
    int i;
    int16_t x = 0, y = 0, z = 0;
     4c4:	1c 82       	std	Y+4, r1	; 0x04
     4c6:	1b 82       	std	Y+3, r1	; 0x03
     4c8:	1e 82       	std	Y+6, r1	; 0x06
     4ca:	1d 82       	std	Y+5, r1	; 0x05
     4cc:	18 86       	std	Y+8, r1	; 0x08
     4ce:	1f 82       	std	Y+7, r1	; 0x07
    char in[6];
    char out = ADXL_DATA_ADDR;
     4d0:	82 e3       	ldi	r24, 0x32	; 50
     4d2:	8f 87       	std	Y+15, r24	; 0x0f

    for (i = 0; i < 10; i++)
     4d4:	1a 82       	std	Y+2, r1	; 0x02
     4d6:	19 82       	std	Y+1, r1	; 0x01
     4d8:	3a c0       	rjmp	.+116    	; 0x54e <adx_Calibrate+0x9e>
    {
        twi_Write(ADXL_ADDR, &out, 1);
     4da:	9e 01       	movw	r18, r28
     4dc:	21 5f       	subi	r18, 0xF1	; 241
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	86 ea       	ldi	r24, 0xA6	; 166
     4e2:	b9 01       	movw	r22, r18
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>
        twi_Read(ADXL_ADDR, in, 6);
     4ec:	9e 01       	movw	r18, r28
     4ee:	27 5f       	subi	r18, 0xF7	; 247
     4f0:	3f 4f       	sbci	r19, 0xFF	; 255
     4f2:	86 ea       	ldi	r24, 0xA6	; 166
     4f4:	b9 01       	movw	r22, r18
     4f6:	46 e0       	ldi	r20, 0x06	; 6
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>

        x += ((int*)in)[0];
     4fe:	ce 01       	movw	r24, r28
     500:	09 96       	adiw	r24, 0x09	; 9
     502:	fc 01       	movw	r30, r24
     504:	80 81       	ld	r24, Z
     506:	91 81       	ldd	r25, Z+1	; 0x01
     508:	2b 81       	ldd	r18, Y+3	; 0x03
     50a:	3c 81       	ldd	r19, Y+4	; 0x04
     50c:	82 0f       	add	r24, r18
     50e:	93 1f       	adc	r25, r19
     510:	9c 83       	std	Y+4, r25	; 0x04
     512:	8b 83       	std	Y+3, r24	; 0x03
        y += ((int*)in)[1];
     514:	ce 01       	movw	r24, r28
     516:	09 96       	adiw	r24, 0x09	; 9
     518:	02 96       	adiw	r24, 0x02	; 2
     51a:	fc 01       	movw	r30, r24
     51c:	80 81       	ld	r24, Z
     51e:	91 81       	ldd	r25, Z+1	; 0x01
     520:	2d 81       	ldd	r18, Y+5	; 0x05
     522:	3e 81       	ldd	r19, Y+6	; 0x06
     524:	82 0f       	add	r24, r18
     526:	93 1f       	adc	r25, r19
     528:	9e 83       	std	Y+6, r25	; 0x06
     52a:	8d 83       	std	Y+5, r24	; 0x05
        z += ((int*)in)[2];
     52c:	ce 01       	movw	r24, r28
     52e:	09 96       	adiw	r24, 0x09	; 9
     530:	04 96       	adiw	r24, 0x04	; 4
     532:	fc 01       	movw	r30, r24
     534:	80 81       	ld	r24, Z
     536:	91 81       	ldd	r25, Z+1	; 0x01
     538:	2f 81       	ldd	r18, Y+7	; 0x07
     53a:	38 85       	ldd	r19, Y+8	; 0x08
     53c:	82 0f       	add	r24, r18
     53e:	93 1f       	adc	r25, r19
     540:	98 87       	std	Y+8, r25	; 0x08
     542:	8f 83       	std	Y+7, r24	; 0x07
    int i;
    int16_t x = 0, y = 0, z = 0;
    char in[6];
    char out = ADXL_DATA_ADDR;

    for (i = 0; i < 10; i++)
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	9a 83       	std	Y+2, r25	; 0x02
     54c:	89 83       	std	Y+1, r24	; 0x01
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	8a 30       	cpi	r24, 0x0A	; 10
     554:	91 05       	cpc	r25, r1
     556:	0c f2       	brlt	.-126    	; 0x4da <adx_Calibrate+0x2a>
        x += ((int*)in)[0];
        y += ((int*)in)[1];
        z += ((int*)in)[2];
    }

    xOff = -(x / 10);
     558:	8b 81       	ldd	r24, Y+3	; 0x03
     55a:	9c 81       	ldd	r25, Y+4	; 0x04
     55c:	2a e0       	ldi	r18, 0x0A	; 10
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	b9 01       	movw	r22, r18
     562:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <__divmodhi4>
     566:	9b 01       	movw	r18, r22
     568:	c9 01       	movw	r24, r18
     56a:	90 95       	com	r25
     56c:	81 95       	neg	r24
     56e:	9f 4f       	sbci	r25, 0xFF	; 255
     570:	90 93 4e 02 	sts	0x024E, r25
     574:	80 93 4d 02 	sts	0x024D, r24
    yOff = -(y / 10);
     578:	8d 81       	ldd	r24, Y+5	; 0x05
     57a:	9e 81       	ldd	r25, Y+6	; 0x06
     57c:	2a e0       	ldi	r18, 0x0A	; 10
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	b9 01       	movw	r22, r18
     582:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <__divmodhi4>
     586:	9b 01       	movw	r18, r22
     588:	c9 01       	movw	r24, r18
     58a:	90 95       	com	r25
     58c:	81 95       	neg	r24
     58e:	9f 4f       	sbci	r25, 0xFF	; 255
     590:	90 93 50 02 	sts	0x0250, r25
     594:	80 93 4f 02 	sts	0x024F, r24
    zOff = -(z / 10) + ADXL_1G;
     598:	8f 81       	ldd	r24, Y+7	; 0x07
     59a:	98 85       	ldd	r25, Y+8	; 0x08
     59c:	2a e0       	ldi	r18, 0x0A	; 10
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	b9 01       	movw	r22, r18
     5a2:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <__divmodhi4>
     5a6:	9b 01       	movw	r18, r22
     5a8:	c9 01       	movw	r24, r18
     5aa:	20 e4       	ldi	r18, 0x40	; 64
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	a9 01       	movw	r20, r18
     5b0:	48 1b       	sub	r20, r24
     5b2:	59 0b       	sbc	r21, r25
     5b4:	ca 01       	movw	r24, r20
     5b6:	90 93 52 02 	sts	0x0252, r25
     5ba:	80 93 51 02 	sts	0x0251, r24

    data_Write_EEPROM(DATA_ACCEL_X_OFFSET_L, ((char*)(&xOff))[0]);
     5be:	8d e4       	ldi	r24, 0x4D	; 77
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 81       	ld	r18, Z
     5c6:	88 e1       	ldi	r24, 0x18	; 24
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	62 2f       	mov	r22, r18
     5cc:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
    data_Write_EEPROM(DATA_ACCEL_X_OFFSET_H, ((char*)(&xOff))[1]);
     5d0:	8d e4       	ldi	r24, 0x4D	; 77
     5d2:	92 e0       	ldi	r25, 0x02	; 2
     5d4:	01 96       	adiw	r24, 0x01	; 1
     5d6:	fc 01       	movw	r30, r24
     5d8:	20 81       	ld	r18, Z
     5da:	87 e1       	ldi	r24, 0x17	; 23
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	62 2f       	mov	r22, r18
     5e0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>

    data_Write_EEPROM(DATA_ACCEL_Y_OFFSET_L, ((char*)(&yOff))[0]);
     5e4:	8f e4       	ldi	r24, 0x4F	; 79
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 81       	ld	r18, Z
     5ec:	8a e1       	ldi	r24, 0x1A	; 26
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	62 2f       	mov	r22, r18
     5f2:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
    data_Write_EEPROM(DATA_ACCEL_Y_OFFSET_H, ((char*)(&yOff))[1]);
     5f6:	8f e4       	ldi	r24, 0x4F	; 79
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	fc 01       	movw	r30, r24
     5fe:	20 81       	ld	r18, Z
     600:	89 e1       	ldi	r24, 0x19	; 25
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	62 2f       	mov	r22, r18
     606:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>

    data_Write_EEPROM(DATA_ACCEL_Z_OFFSET_L, ((char*)(&zOff))[0]);
     60a:	81 e5       	ldi	r24, 0x51	; 81
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	fc 01       	movw	r30, r24
     610:	20 81       	ld	r18, Z
     612:	8c e1       	ldi	r24, 0x1C	; 28
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	62 2f       	mov	r22, r18
     618:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
    data_Write_EEPROM(DATA_ACCEL_Z_OFFSET_H, ((char*)(&zOff))[1]);
     61c:	81 e5       	ldi	r24, 0x51	; 81
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	fc 01       	movw	r30, r24
     624:	20 81       	ld	r18, Z
     626:	8b e1       	ldi	r24, 0x1B	; 27
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	62 2f       	mov	r22, r18
     62c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
}
     630:	2f 96       	adiw	r28, 0x0f	; 15
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	cf 91       	pop	r28
     63e:	df 91       	pop	r29
     640:	08 95       	ret

00000642 <adx_Read_Accel>:
 * @param x Address to integer for storing the x acceleration.
 * @param y Address to integer for storing the y acceleration.
 * @param z Address to integer for storing the z acceleration.
 */
void adx_Read_Accel(int* x, int* y, int* z)
{
     642:	df 93       	push	r29
     644:	cf 93       	push	r28
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	2d 97       	sbiw	r28, 0x0d	; 13
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	99 87       	std	Y+9, r25	; 0x09
     658:	88 87       	std	Y+8, r24	; 0x08
     65a:	7b 87       	std	Y+11, r23	; 0x0b
     65c:	6a 87       	std	Y+10, r22	; 0x0a
     65e:	5d 87       	std	Y+13, r21	; 0x0d
     660:	4c 87       	std	Y+12, r20	; 0x0c
    char out = ADXL_DATA_ADDR;
     662:	82 e3       	ldi	r24, 0x32	; 50
     664:	89 83       	std	Y+1, r24	; 0x01
    char in[6];

    twi_Write(ADXL_ADDR, &out, 1);
     666:	86 ea       	ldi	r24, 0xA6	; 166
     668:	9e 01       	movw	r18, r28
     66a:	2f 5f       	subi	r18, 0xFF	; 255
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	b9 01       	movw	r22, r18
     670:	41 e0       	ldi	r20, 0x01	; 1
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>
    twi_Read(ADXL_ADDR, in, 6);
     678:	9e 01       	movw	r18, r28
     67a:	2e 5f       	subi	r18, 0xFE	; 254
     67c:	3f 4f       	sbci	r19, 0xFF	; 255
     67e:	86 ea       	ldi	r24, 0xA6	; 166
     680:	b9 01       	movw	r22, r18
     682:	46 e0       	ldi	r20, 0x06	; 6
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>

    *x = (int)(in[0] + ((in[1]) << 8)) + xOff;
     68a:	8a 81       	ldd	r24, Y+2	; 0x02
     68c:	28 2f       	mov	r18, r24
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	8b 81       	ldd	r24, Y+3	; 0x03
     692:	88 2f       	mov	r24, r24
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	98 2f       	mov	r25, r24
     698:	88 27       	eor	r24, r24
     69a:	28 0f       	add	r18, r24
     69c:	39 1f       	adc	r19, r25
     69e:	80 91 4d 02 	lds	r24, 0x024D
     6a2:	90 91 4e 02 	lds	r25, 0x024E
     6a6:	28 0f       	add	r18, r24
     6a8:	39 1f       	adc	r19, r25
     6aa:	88 85       	ldd	r24, Y+8	; 0x08
     6ac:	99 85       	ldd	r25, Y+9	; 0x09
     6ae:	fc 01       	movw	r30, r24
     6b0:	31 83       	std	Z+1, r19	; 0x01
     6b2:	20 83       	st	Z, r18
    *y = (int)(in[2] + ((in[3]) << 8)) + yOff;
     6b4:	8c 81       	ldd	r24, Y+4	; 0x04
     6b6:	28 2f       	mov	r18, r24
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	8d 81       	ldd	r24, Y+5	; 0x05
     6bc:	88 2f       	mov	r24, r24
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	98 2f       	mov	r25, r24
     6c2:	88 27       	eor	r24, r24
     6c4:	28 0f       	add	r18, r24
     6c6:	39 1f       	adc	r19, r25
     6c8:	80 91 4f 02 	lds	r24, 0x024F
     6cc:	90 91 50 02 	lds	r25, 0x0250
     6d0:	28 0f       	add	r18, r24
     6d2:	39 1f       	adc	r19, r25
     6d4:	8a 85       	ldd	r24, Y+10	; 0x0a
     6d6:	9b 85       	ldd	r25, Y+11	; 0x0b
     6d8:	fc 01       	movw	r30, r24
     6da:	31 83       	std	Z+1, r19	; 0x01
     6dc:	20 83       	st	Z, r18
    *z = (int)(in[4] + ((in[5]) << 8)) + zOff;
     6de:	8e 81       	ldd	r24, Y+6	; 0x06
     6e0:	28 2f       	mov	r18, r24
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	8f 81       	ldd	r24, Y+7	; 0x07
     6e6:	88 2f       	mov	r24, r24
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	98 2f       	mov	r25, r24
     6ec:	88 27       	eor	r24, r24
     6ee:	28 0f       	add	r18, r24
     6f0:	39 1f       	adc	r19, r25
     6f2:	80 91 51 02 	lds	r24, 0x0251
     6f6:	90 91 52 02 	lds	r25, 0x0252
     6fa:	28 0f       	add	r18, r24
     6fc:	39 1f       	adc	r19, r25
     6fe:	8c 85       	ldd	r24, Y+12	; 0x0c
     700:	9d 85       	ldd	r25, Y+13	; 0x0d
     702:	fc 01       	movw	r30, r24
     704:	31 83       	std	Z+1, r19	; 0x01
     706:	20 83       	st	Z, r18
}
     708:	2d 96       	adiw	r28, 0x0d	; 13
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	cf 91       	pop	r28
     716:	df 91       	pop	r29
     718:	08 95       	ret

0000071a <bmp_Init>:

/**
 * Reads cofiguration data from the barometer.
 */
void bmp_Init()
{
     71a:	df 93       	push	r29
     71c:	cf 93       	push	r28
     71e:	0f 92       	push	r0
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
    char out = BAR_CON_ADDR;
     724:	8a ea       	ldi	r24, 0xAA	; 170
     726:	89 83       	std	Y+1, r24	; 0x01

    twi_Write(BAR_ADDR, &out, 1);
     728:	8e ee       	ldi	r24, 0xEE	; 238
     72a:	9e 01       	movw	r18, r28
     72c:	2f 5f       	subi	r18, 0xFF	; 255
     72e:	3f 4f       	sbci	r19, 0xFF	; 255
     730:	b9 01       	movw	r22, r18
     732:	41 e0       	ldi	r20, 0x01	; 1
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>

    twi_Read(BAR_ADDR, A1, 2);
     73a:	23 e5       	ldi	r18, 0x53	; 83
     73c:	32 e0       	ldi	r19, 0x02	; 2
     73e:	8e ee       	ldi	r24, 0xEE	; 238
     740:	b9 01       	movw	r22, r18
     742:	42 e0       	ldi	r20, 0x02	; 2
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>
    swap(A1[0], A1[1]);
     74a:	90 91 53 02 	lds	r25, 0x0253
     74e:	80 91 54 02 	lds	r24, 0x0254
     752:	89 27       	eor	r24, r25
     754:	80 93 53 02 	sts	0x0253, r24
     758:	90 91 54 02 	lds	r25, 0x0254
     75c:	80 91 53 02 	lds	r24, 0x0253
     760:	89 27       	eor	r24, r25
     762:	80 93 54 02 	sts	0x0254, r24
     766:	90 91 53 02 	lds	r25, 0x0253
     76a:	80 91 54 02 	lds	r24, 0x0254
     76e:	89 27       	eor	r24, r25
     770:	80 93 53 02 	sts	0x0253, r24

    twi_Read(BAR_ADDR, A2, 2);
     774:	25 e5       	ldi	r18, 0x55	; 85
     776:	32 e0       	ldi	r19, 0x02	; 2
     778:	8e ee       	ldi	r24, 0xEE	; 238
     77a:	b9 01       	movw	r22, r18
     77c:	42 e0       	ldi	r20, 0x02	; 2
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>
    swap(A2[0], A2[1]);
     784:	90 91 55 02 	lds	r25, 0x0255
     788:	80 91 56 02 	lds	r24, 0x0256
     78c:	89 27       	eor	r24, r25
     78e:	80 93 55 02 	sts	0x0255, r24
     792:	90 91 56 02 	lds	r25, 0x0256
     796:	80 91 55 02 	lds	r24, 0x0255
     79a:	89 27       	eor	r24, r25
     79c:	80 93 56 02 	sts	0x0256, r24
     7a0:	90 91 55 02 	lds	r25, 0x0255
     7a4:	80 91 56 02 	lds	r24, 0x0256
     7a8:	89 27       	eor	r24, r25
     7aa:	80 93 55 02 	sts	0x0255, r24

    twi_Read(BAR_ADDR, A3, 2);
     7ae:	27 e5       	ldi	r18, 0x57	; 87
     7b0:	32 e0       	ldi	r19, 0x02	; 2
     7b2:	8e ee       	ldi	r24, 0xEE	; 238
     7b4:	b9 01       	movw	r22, r18
     7b6:	42 e0       	ldi	r20, 0x02	; 2
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>
    swap(A3[0], A3[1]);
     7be:	90 91 57 02 	lds	r25, 0x0257
     7c2:	80 91 58 02 	lds	r24, 0x0258
     7c6:	89 27       	eor	r24, r25
     7c8:	80 93 57 02 	sts	0x0257, r24
     7cc:	90 91 58 02 	lds	r25, 0x0258
     7d0:	80 91 57 02 	lds	r24, 0x0257
     7d4:	89 27       	eor	r24, r25
     7d6:	80 93 58 02 	sts	0x0258, r24
     7da:	90 91 57 02 	lds	r25, 0x0257
     7de:	80 91 58 02 	lds	r24, 0x0258
     7e2:	89 27       	eor	r24, r25
     7e4:	80 93 57 02 	sts	0x0257, r24

    twi_Read(BAR_ADDR, A4, 2);
     7e8:	29 e5       	ldi	r18, 0x59	; 89
     7ea:	32 e0       	ldi	r19, 0x02	; 2
     7ec:	8e ee       	ldi	r24, 0xEE	; 238
     7ee:	b9 01       	movw	r22, r18
     7f0:	42 e0       	ldi	r20, 0x02	; 2
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>
    swap(A4[0], A4[1]);
     7f8:	90 91 59 02 	lds	r25, 0x0259
     7fc:	80 91 5a 02 	lds	r24, 0x025A
     800:	89 27       	eor	r24, r25
     802:	80 93 59 02 	sts	0x0259, r24
     806:	90 91 5a 02 	lds	r25, 0x025A
     80a:	80 91 59 02 	lds	r24, 0x0259
     80e:	89 27       	eor	r24, r25
     810:	80 93 5a 02 	sts	0x025A, r24
     814:	90 91 59 02 	lds	r25, 0x0259
     818:	80 91 5a 02 	lds	r24, 0x025A
     81c:	89 27       	eor	r24, r25
     81e:	80 93 59 02 	sts	0x0259, r24

    twi_Read(BAR_ADDR, A5, 2);
     822:	2b e5       	ldi	r18, 0x5B	; 91
     824:	32 e0       	ldi	r19, 0x02	; 2
     826:	8e ee       	ldi	r24, 0xEE	; 238
     828:	b9 01       	movw	r22, r18
     82a:	42 e0       	ldi	r20, 0x02	; 2
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>
    swap(A5[0], A5[1]);
     832:	90 91 5b 02 	lds	r25, 0x025B
     836:	80 91 5c 02 	lds	r24, 0x025C
     83a:	89 27       	eor	r24, r25
     83c:	80 93 5b 02 	sts	0x025B, r24
     840:	90 91 5c 02 	lds	r25, 0x025C
     844:	80 91 5b 02 	lds	r24, 0x025B
     848:	89 27       	eor	r24, r25
     84a:	80 93 5c 02 	sts	0x025C, r24
     84e:	90 91 5b 02 	lds	r25, 0x025B
     852:	80 91 5c 02 	lds	r24, 0x025C
     856:	89 27       	eor	r24, r25
     858:	80 93 5b 02 	sts	0x025B, r24

    twi_Read(BAR_ADDR, A6, 2);
     85c:	2d e5       	ldi	r18, 0x5D	; 93
     85e:	32 e0       	ldi	r19, 0x02	; 2
     860:	8e ee       	ldi	r24, 0xEE	; 238
     862:	b9 01       	movw	r22, r18
     864:	42 e0       	ldi	r20, 0x02	; 2
     866:	50 e0       	ldi	r21, 0x00	; 0
     868:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>
    swap(A6[0], A6[1]);
     86c:	90 91 5d 02 	lds	r25, 0x025D
     870:	80 91 5e 02 	lds	r24, 0x025E
     874:	89 27       	eor	r24, r25
     876:	80 93 5d 02 	sts	0x025D, r24
     87a:	90 91 5e 02 	lds	r25, 0x025E
     87e:	80 91 5d 02 	lds	r24, 0x025D
     882:	89 27       	eor	r24, r25
     884:	80 93 5e 02 	sts	0x025E, r24
     888:	90 91 5d 02 	lds	r25, 0x025D
     88c:	80 91 5e 02 	lds	r24, 0x025E
     890:	89 27       	eor	r24, r25
     892:	80 93 5d 02 	sts	0x025D, r24

    twi_Read(BAR_ADDR, B1, 2);
     896:	2f e5       	ldi	r18, 0x5F	; 95
     898:	32 e0       	ldi	r19, 0x02	; 2
     89a:	8e ee       	ldi	r24, 0xEE	; 238
     89c:	b9 01       	movw	r22, r18
     89e:	42 e0       	ldi	r20, 0x02	; 2
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>
    swap(B1[0], B1[1]);
     8a6:	90 91 5f 02 	lds	r25, 0x025F
     8aa:	80 91 60 02 	lds	r24, 0x0260
     8ae:	89 27       	eor	r24, r25
     8b0:	80 93 5f 02 	sts	0x025F, r24
     8b4:	90 91 60 02 	lds	r25, 0x0260
     8b8:	80 91 5f 02 	lds	r24, 0x025F
     8bc:	89 27       	eor	r24, r25
     8be:	80 93 60 02 	sts	0x0260, r24
     8c2:	90 91 5f 02 	lds	r25, 0x025F
     8c6:	80 91 60 02 	lds	r24, 0x0260
     8ca:	89 27       	eor	r24, r25
     8cc:	80 93 5f 02 	sts	0x025F, r24

    twi_Read(BAR_ADDR, B2, 2);
     8d0:	21 e6       	ldi	r18, 0x61	; 97
     8d2:	32 e0       	ldi	r19, 0x02	; 2
     8d4:	8e ee       	ldi	r24, 0xEE	; 238
     8d6:	b9 01       	movw	r22, r18
     8d8:	42 e0       	ldi	r20, 0x02	; 2
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>
    swap(B2[0], B2[1]);
     8e0:	90 91 61 02 	lds	r25, 0x0261
     8e4:	80 91 62 02 	lds	r24, 0x0262
     8e8:	89 27       	eor	r24, r25
     8ea:	80 93 61 02 	sts	0x0261, r24
     8ee:	90 91 62 02 	lds	r25, 0x0262
     8f2:	80 91 61 02 	lds	r24, 0x0261
     8f6:	89 27       	eor	r24, r25
     8f8:	80 93 62 02 	sts	0x0262, r24
     8fc:	90 91 61 02 	lds	r25, 0x0261
     900:	80 91 62 02 	lds	r24, 0x0262
     904:	89 27       	eor	r24, r25
     906:	80 93 61 02 	sts	0x0261, r24

    twi_Read(BAR_ADDR, MB, 2);
     90a:	23 e6       	ldi	r18, 0x63	; 99
     90c:	32 e0       	ldi	r19, 0x02	; 2
     90e:	8e ee       	ldi	r24, 0xEE	; 238
     910:	b9 01       	movw	r22, r18
     912:	42 e0       	ldi	r20, 0x02	; 2
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>
    swap(MB[0], MB[1]);
     91a:	90 91 63 02 	lds	r25, 0x0263
     91e:	80 91 64 02 	lds	r24, 0x0264
     922:	89 27       	eor	r24, r25
     924:	80 93 63 02 	sts	0x0263, r24
     928:	90 91 64 02 	lds	r25, 0x0264
     92c:	80 91 63 02 	lds	r24, 0x0263
     930:	89 27       	eor	r24, r25
     932:	80 93 64 02 	sts	0x0264, r24
     936:	90 91 63 02 	lds	r25, 0x0263
     93a:	80 91 64 02 	lds	r24, 0x0264
     93e:	89 27       	eor	r24, r25
     940:	80 93 63 02 	sts	0x0263, r24

    twi_Read(BAR_ADDR, MC, 2);
     944:	25 e6       	ldi	r18, 0x65	; 101
     946:	32 e0       	ldi	r19, 0x02	; 2
     948:	8e ee       	ldi	r24, 0xEE	; 238
     94a:	b9 01       	movw	r22, r18
     94c:	42 e0       	ldi	r20, 0x02	; 2
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>
    swap(MC[0], MC[1]);
     954:	90 91 65 02 	lds	r25, 0x0265
     958:	80 91 66 02 	lds	r24, 0x0266
     95c:	89 27       	eor	r24, r25
     95e:	80 93 65 02 	sts	0x0265, r24
     962:	90 91 66 02 	lds	r25, 0x0266
     966:	80 91 65 02 	lds	r24, 0x0265
     96a:	89 27       	eor	r24, r25
     96c:	80 93 66 02 	sts	0x0266, r24
     970:	90 91 65 02 	lds	r25, 0x0265
     974:	80 91 66 02 	lds	r24, 0x0266
     978:	89 27       	eor	r24, r25
     97a:	80 93 65 02 	sts	0x0265, r24

    twi_Read(BAR_ADDR, MD, 2);
     97e:	27 e6       	ldi	r18, 0x67	; 103
     980:	32 e0       	ldi	r19, 0x02	; 2
     982:	8e ee       	ldi	r24, 0xEE	; 238
     984:	b9 01       	movw	r22, r18
     986:	42 e0       	ldi	r20, 0x02	; 2
     988:	50 e0       	ldi	r21, 0x00	; 0
     98a:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>
    swap(MD[0], MD[1]);
     98e:	90 91 67 02 	lds	r25, 0x0267
     992:	80 91 68 02 	lds	r24, 0x0268
     996:	89 27       	eor	r24, r25
     998:	80 93 67 02 	sts	0x0267, r24
     99c:	90 91 68 02 	lds	r25, 0x0268
     9a0:	80 91 67 02 	lds	r24, 0x0267
     9a4:	89 27       	eor	r24, r25
     9a6:	80 93 68 02 	sts	0x0268, r24
     9aa:	90 91 67 02 	lds	r25, 0x0267
     9ae:	80 91 68 02 	lds	r24, 0x0268
     9b2:	89 27       	eor	r24, r25
     9b4:	80 93 67 02 	sts	0x0267, r24
}
     9b8:	0f 90       	pop	r0
     9ba:	cf 91       	pop	r28
     9bc:	df 91       	pop	r29
     9be:	08 95       	ret

000009c0 <bmp_Request_Temperature>:

/**
 * Sends a temperature request to the barometer.
 */
void bmp_Request_Temperature()
{
     9c0:	df 93       	push	r29
     9c2:	cf 93       	push	r28
     9c4:	00 d0       	rcall	.+0      	; 0x9c6 <bmp_Request_Temperature+0x6>
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
    char out[2] = {BAR_REQ_ADDR, BAR_TEMP_REQ};
     9ca:	84 ef       	ldi	r24, 0xF4	; 244
     9cc:	89 83       	std	Y+1, r24	; 0x01
     9ce:	8e e2       	ldi	r24, 0x2E	; 46
     9d0:	8a 83       	std	Y+2, r24	; 0x02

    twi_Write(BAR_ADDR, out, 2);
     9d2:	8e ee       	ldi	r24, 0xEE	; 238
     9d4:	9e 01       	movw	r18, r28
     9d6:	2f 5f       	subi	r18, 0xFF	; 255
     9d8:	3f 4f       	sbci	r19, 0xFF	; 255
     9da:	b9 01       	movw	r22, r18
     9dc:	42 e0       	ldi	r20, 0x02	; 2
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>
}
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	08 95       	ret

000009ee <bmp_Request_Pressure>:
/**
 * Sends a pressure request to the barometer.
 * This must be done after a full temperature request
 */
void bmp_Request_Pressure()
{
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <bmp_Request_Pressure+0x6>
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
    char out[2] = {BAR_REQ_ADDR, BAR_PRES_REQ};
     9f8:	84 ef       	ldi	r24, 0xF4	; 244
     9fa:	89 83       	std	Y+1, r24	; 0x01
     9fc:	84 e3       	ldi	r24, 0x34	; 52
     9fe:	8a 83       	std	Y+2, r24	; 0x02

    twi_Write(BAR_ADDR, out, 2);
     a00:	8e ee       	ldi	r24, 0xEE	; 238
     a02:	9e 01       	movw	r18, r28
     a04:	2f 5f       	subi	r18, 0xFF	; 255
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	b9 01       	movw	r22, r18
     a0a:	42 e0       	ldi	r20, 0x02	; 2
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>
}
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	cf 91       	pop	r28
     a18:	df 91       	pop	r29
     a1a:	08 95       	ret

00000a1c <bmp_Read_Temperature>:
 * See the bmp085 datasheet for an explaination of the math.
 *
 * @return The temperature in 0.1 degrees C.
 */
int16_t bmp_Read_Temperature()
{
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	df 93       	push	r29
     a26:	cf 93       	push	r28
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	2f 97       	sbiw	r28, 0x0f	; 15
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
    char in[2];
    char out = BAR_RES_ADDR;
     a38:	86 ef       	ldi	r24, 0xF6	; 246
     a3a:	8f 87       	std	Y+15, r24	; 0x0f

    twi_Write(BAR_ADDR, &out, 1);
     a3c:	9e 01       	movw	r18, r28
     a3e:	21 5f       	subi	r18, 0xF1	; 241
     a40:	3f 4f       	sbci	r19, 0xFF	; 255
     a42:	8e ee       	ldi	r24, 0xEE	; 238
     a44:	b9 01       	movw	r22, r18
     a46:	41 e0       	ldi	r20, 0x01	; 1
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>
    twi_Read(BAR_ADDR, in, 2);
     a4e:	9e 01       	movw	r18, r28
     a50:	23 5f       	subi	r18, 0xF3	; 243
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	8e ee       	ldi	r24, 0xEE	; 238
     a56:	b9 01       	movw	r22, r18
     a58:	42 e0       	ldi	r20, 0x02	; 2
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>

    int32_t UT = ((int32_t)in[0] << 8) + (int32_t)in[1];
     a60:	8d 85       	ldd	r24, Y+13	; 0x0d
     a62:	88 2f       	mov	r24, r24
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e0       	ldi	r26, 0x00	; 0
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	22 27       	eor	r18, r18
     a6c:	38 2f       	mov	r19, r24
     a6e:	49 2f       	mov	r20, r25
     a70:	5a 2f       	mov	r21, r26
     a72:	8e 85       	ldd	r24, Y+14	; 0x0e
     a74:	88 2f       	mov	r24, r24
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	82 0f       	add	r24, r18
     a7e:	93 1f       	adc	r25, r19
     a80:	a4 1f       	adc	r26, r20
     a82:	b5 1f       	adc	r27, r21
     a84:	89 83       	std	Y+1, r24	; 0x01
     a86:	9a 83       	std	Y+2, r25	; 0x02
     a88:	ab 83       	std	Y+3, r26	; 0x03
     a8a:	bc 83       	std	Y+4, r27	; 0x04

    int32_t X1 = (UT - A6_s) * A5_s / 32768;
     a8c:	8d e5       	ldi	r24, 0x5D	; 93
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	fc 01       	movw	r30, r24
     a92:	80 81       	ld	r24, Z
     a94:	91 81       	ldd	r25, Z+1	; 0x01
     a96:	cc 01       	movw	r24, r24
     a98:	a0 e0       	ldi	r26, 0x00	; 0
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	29 81       	ldd	r18, Y+1	; 0x01
     a9e:	3a 81       	ldd	r19, Y+2	; 0x02
     aa0:	4b 81       	ldd	r20, Y+3	; 0x03
     aa2:	5c 81       	ldd	r21, Y+4	; 0x04
     aa4:	79 01       	movw	r14, r18
     aa6:	8a 01       	movw	r16, r20
     aa8:	e8 1a       	sub	r14, r24
     aaa:	f9 0a       	sbc	r15, r25
     aac:	0a 0b       	sbc	r16, r26
     aae:	1b 0b       	sbc	r17, r27
     ab0:	d8 01       	movw	r26, r16
     ab2:	c7 01       	movw	r24, r14
     ab4:	2b e5       	ldi	r18, 0x5B	; 91
     ab6:	32 e0       	ldi	r19, 0x02	; 2
     ab8:	f9 01       	movw	r30, r18
     aba:	20 81       	ld	r18, Z
     abc:	31 81       	ldd	r19, Z+1	; 0x01
     abe:	99 01       	movw	r18, r18
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
     acc:	dc 01       	movw	r26, r24
     ace:	cb 01       	movw	r24, r22
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e8       	ldi	r19, 0x80	; 128
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	bc 01       	movw	r22, r24
     ada:	cd 01       	movw	r24, r26
     adc:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     ae0:	2d 83       	std	Y+5, r18	; 0x05
     ae2:	3e 83       	std	Y+6, r19	; 0x06
     ae4:	4f 83       	std	Y+7, r20	; 0x07
     ae6:	58 87       	std	Y+8, r21	; 0x08
    int32_t X2 = MC_s * 2048 / (X1 + MD_s);
     ae8:	85 e6       	ldi	r24, 0x65	; 101
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	fc 01       	movw	r30, r24
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	aa 27       	eor	r26, r26
     af4:	97 fd       	sbrc	r25, 7
     af6:	a0 95       	com	r26
     af8:	ba 2f       	mov	r27, r26
     afa:	07 2e       	mov	r0, r23
     afc:	7b e0       	ldi	r23, 0x0B	; 11
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	aa 1f       	adc	r26, r26
     b04:	bb 1f       	adc	r27, r27
     b06:	7a 95       	dec	r23
     b08:	d1 f7       	brne	.-12     	; 0xafe <bmp_Read_Temperature+0xe2>
     b0a:	70 2d       	mov	r23, r0
     b0c:	27 e6       	ldi	r18, 0x67	; 103
     b0e:	32 e0       	ldi	r19, 0x02	; 2
     b10:	f9 01       	movw	r30, r18
     b12:	20 81       	ld	r18, Z
     b14:	31 81       	ldd	r19, Z+1	; 0x01
     b16:	79 01       	movw	r14, r18
     b18:	00 27       	eor	r16, r16
     b1a:	f7 fc       	sbrc	r15, 7
     b1c:	00 95       	com	r16
     b1e:	10 2f       	mov	r17, r16
     b20:	2d 81       	ldd	r18, Y+5	; 0x05
     b22:	3e 81       	ldd	r19, Y+6	; 0x06
     b24:	4f 81       	ldd	r20, Y+7	; 0x07
     b26:	58 85       	ldd	r21, Y+8	; 0x08
     b28:	2e 0d       	add	r18, r14
     b2a:	3f 1d       	adc	r19, r15
     b2c:	40 1f       	adc	r20, r16
     b2e:	51 1f       	adc	r21, r17
     b30:	bc 01       	movw	r22, r24
     b32:	cd 01       	movw	r24, r26
     b34:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     b38:	29 87       	std	Y+9, r18	; 0x09
     b3a:	3a 87       	std	Y+10, r19	; 0x0a
     b3c:	4b 87       	std	Y+11, r20	; 0x0b
     b3e:	5c 87       	std	Y+12, r21	; 0x0c
    B5 = X1 + X2;
     b40:	2d 81       	ldd	r18, Y+5	; 0x05
     b42:	3e 81       	ldd	r19, Y+6	; 0x06
     b44:	4f 81       	ldd	r20, Y+7	; 0x07
     b46:	58 85       	ldd	r21, Y+8	; 0x08
     b48:	89 85       	ldd	r24, Y+9	; 0x09
     b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b4c:	ab 85       	ldd	r26, Y+11	; 0x0b
     b4e:	bc 85       	ldd	r27, Y+12	; 0x0c
     b50:	82 0f       	add	r24, r18
     b52:	93 1f       	adc	r25, r19
     b54:	a4 1f       	adc	r26, r20
     b56:	b5 1f       	adc	r27, r21
     b58:	80 93 69 02 	sts	0x0269, r24
     b5c:	90 93 6a 02 	sts	0x026A, r25
     b60:	a0 93 6b 02 	sts	0x026B, r26
     b64:	b0 93 6c 02 	sts	0x026C, r27
    return (B5 + 8) / 0x10;
     b68:	80 91 69 02 	lds	r24, 0x0269
     b6c:	90 91 6a 02 	lds	r25, 0x026A
     b70:	a0 91 6b 02 	lds	r26, 0x026B
     b74:	b0 91 6c 02 	lds	r27, 0x026C
     b78:	08 96       	adiw	r24, 0x08	; 8
     b7a:	a1 1d       	adc	r26, r1
     b7c:	b1 1d       	adc	r27, r1
     b7e:	20 e1       	ldi	r18, 0x10	; 16
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	bc 01       	movw	r22, r24
     b88:	cd 01       	movw	r24, r26
     b8a:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     b8e:	da 01       	movw	r26, r20
     b90:	c9 01       	movw	r24, r18
}
     b92:	2f 96       	adiw	r28, 0x0f	; 15
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	08 95       	ret

00000bac <bmp_Read_Pressure>:
 * See the bmp085 datasheet for an explaination of the math.
 *
 * @return The pressure in Pa.
 */
int32_t bmp_Read_Pressure()
{
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	a7 97       	sbiw	r28, 0x27	; 39
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
    char in[2];
    char out = BAR_RES_ADDR;
     bc8:	86 ef       	ldi	r24, 0xF6	; 246
     bca:	8f a3       	std	Y+39, r24	; 0x27

    twi_Write(BAR_ADDR, &out, 1);
     bcc:	9e 01       	movw	r18, r28
     bce:	29 5d       	subi	r18, 0xD9	; 217
     bd0:	3f 4f       	sbci	r19, 0xFF	; 255
     bd2:	8e ee       	ldi	r24, 0xEE	; 238
     bd4:	b9 01       	movw	r22, r18
     bd6:	41 e0       	ldi	r20, 0x01	; 1
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>
    twi_Read(BAR_ADDR, in, 2);
     bde:	9e 01       	movw	r18, r28
     be0:	2b 5d       	subi	r18, 0xDB	; 219
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	8e ee       	ldi	r24, 0xEE	; 238
     be6:	b9 01       	movw	r22, r18
     be8:	42 e0       	ldi	r20, 0x02	; 2
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>

    int32_t UP = ((int32_t)in[0] << 8) + (int32_t)in[1];
     bf0:	8d a1       	ldd	r24, Y+37	; 0x25
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	a0 e0       	ldi	r26, 0x00	; 0
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	22 27       	eor	r18, r18
     bfc:	38 2f       	mov	r19, r24
     bfe:	49 2f       	mov	r20, r25
     c00:	5a 2f       	mov	r21, r26
     c02:	8e a1       	ldd	r24, Y+38	; 0x26
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	82 0f       	add	r24, r18
     c0e:	93 1f       	adc	r25, r19
     c10:	a4 1f       	adc	r26, r20
     c12:	b5 1f       	adc	r27, r21
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	ab 83       	std	Y+3, r26	; 0x03
     c1a:	bc 83       	std	Y+4, r27	; 0x04

    int32_t B6 = B5 - 4000;
     c1c:	80 91 69 02 	lds	r24, 0x0269
     c20:	90 91 6a 02 	lds	r25, 0x026A
     c24:	a0 91 6b 02 	lds	r26, 0x026B
     c28:	b0 91 6c 02 	lds	r27, 0x026C
     c2c:	80 5a       	subi	r24, 0xA0	; 160
     c2e:	9f 40       	sbci	r25, 0x0F	; 15
     c30:	a0 40       	sbci	r26, 0x00	; 0
     c32:	b0 40       	sbci	r27, 0x00	; 0
     c34:	8d 83       	std	Y+5, r24	; 0x05
     c36:	9e 83       	std	Y+6, r25	; 0x06
     c38:	af 83       	std	Y+7, r26	; 0x07
     c3a:	b8 87       	std	Y+8, r27	; 0x08
    int32_t X1 = (B2_s * (B6 * B6 / 4096)) / 2048;
     c3c:	81 e6       	ldi	r24, 0x61	; 97
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	fc 01       	movw	r30, r24
     c42:	80 81       	ld	r24, Z
     c44:	91 81       	ldd	r25, Z+1	; 0x01
     c46:	7c 01       	movw	r14, r24
     c48:	00 27       	eor	r16, r16
     c4a:	f7 fc       	sbrc	r15, 7
     c4c:	00 95       	com	r16
     c4e:	10 2f       	mov	r17, r16
     c50:	8d 81       	ldd	r24, Y+5	; 0x05
     c52:	9e 81       	ldd	r25, Y+6	; 0x06
     c54:	af 81       	ldd	r26, Y+7	; 0x07
     c56:	b8 85       	ldd	r27, Y+8	; 0x08
     c58:	2d 81       	ldd	r18, Y+5	; 0x05
     c5a:	3e 81       	ldd	r19, Y+6	; 0x06
     c5c:	4f 81       	ldd	r20, Y+7	; 0x07
     c5e:	58 85       	ldd	r21, Y+8	; 0x08
     c60:	bc 01       	movw	r22, r24
     c62:	cd 01       	movw	r24, r26
     c64:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e1       	ldi	r19, 0x10	; 16
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	bc 01       	movw	r22, r24
     c76:	cd 01       	movw	r24, r26
     c78:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	38 e0       	ldi	r19, 0x08	; 8
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	bc 01       	movw	r22, r24
     c92:	cd 01       	movw	r24, r26
     c94:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     c98:	29 87       	std	Y+9, r18	; 0x09
     c9a:	3a 87       	std	Y+10, r19	; 0x0a
     c9c:	4b 87       	std	Y+11, r20	; 0x0b
     c9e:	5c 87       	std	Y+12, r21	; 0x0c
    int32_t X2 = A2_s * B6 / 2048;
     ca0:	85 e5       	ldi	r24, 0x55	; 85
     ca2:	92 e0       	ldi	r25, 0x02	; 2
     ca4:	fc 01       	movw	r30, r24
     ca6:	80 81       	ld	r24, Z
     ca8:	91 81       	ldd	r25, Z+1	; 0x01
     caa:	aa 27       	eor	r26, r26
     cac:	97 fd       	sbrc	r25, 7
     cae:	a0 95       	com	r26
     cb0:	ba 2f       	mov	r27, r26
     cb2:	2d 81       	ldd	r18, Y+5	; 0x05
     cb4:	3e 81       	ldd	r19, Y+6	; 0x06
     cb6:	4f 81       	ldd	r20, Y+7	; 0x07
     cb8:	58 85       	ldd	r21, Y+8	; 0x08
     cba:	bc 01       	movw	r22, r24
     cbc:	cd 01       	movw	r24, r26
     cbe:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	38 e0       	ldi	r19, 0x08	; 8
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	bc 01       	movw	r22, r24
     cd0:	cd 01       	movw	r24, r26
     cd2:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     cd6:	2d 87       	std	Y+13, r18	; 0x0d
     cd8:	3e 87       	std	Y+14, r19	; 0x0e
     cda:	4f 87       	std	Y+15, r20	; 0x0f
     cdc:	58 8b       	std	Y+16, r21	; 0x10
    int32_t X3 = X1 + X2;
     cde:	29 85       	ldd	r18, Y+9	; 0x09
     ce0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ce2:	4b 85       	ldd	r20, Y+11	; 0x0b
     ce4:	5c 85       	ldd	r21, Y+12	; 0x0c
     ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cea:	af 85       	ldd	r26, Y+15	; 0x0f
     cec:	b8 89       	ldd	r27, Y+16	; 0x10
     cee:	82 0f       	add	r24, r18
     cf0:	93 1f       	adc	r25, r19
     cf2:	a4 1f       	adc	r26, r20
     cf4:	b5 1f       	adc	r27, r21
     cf6:	89 8b       	std	Y+17, r24	; 0x11
     cf8:	9a 8b       	std	Y+18, r25	; 0x12
     cfa:	ab 8b       	std	Y+19, r26	; 0x13
     cfc:	bc 8b       	std	Y+20, r27	; 0x14
    int32_t B3 = ((A1_s * 4 + X3) + 2) / 4;
     cfe:	83 e5       	ldi	r24, 0x53	; 83
     d00:	92 e0       	ldi	r25, 0x02	; 2
     d02:	fc 01       	movw	r30, r24
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	aa 27       	eor	r26, r26
     d0a:	97 fd       	sbrc	r25, 7
     d0c:	a0 95       	com	r26
     d0e:	ba 2f       	mov	r27, r26
     d10:	9c 01       	movw	r18, r24
     d12:	ad 01       	movw	r20, r26
     d14:	22 0f       	add	r18, r18
     d16:	33 1f       	adc	r19, r19
     d18:	44 1f       	adc	r20, r20
     d1a:	55 1f       	adc	r21, r21
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	89 89       	ldd	r24, Y+17	; 0x11
     d26:	9a 89       	ldd	r25, Y+18	; 0x12
     d28:	ab 89       	ldd	r26, Y+19	; 0x13
     d2a:	bc 89       	ldd	r27, Y+20	; 0x14
     d2c:	82 0f       	add	r24, r18
     d2e:	93 1f       	adc	r25, r19
     d30:	a4 1f       	adc	r26, r20
     d32:	b5 1f       	adc	r27, r21
     d34:	02 96       	adiw	r24, 0x02	; 2
     d36:	a1 1d       	adc	r26, r1
     d38:	b1 1d       	adc	r27, r1
     d3a:	24 e0       	ldi	r18, 0x04	; 4
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	bc 01       	movw	r22, r24
     d44:	cd 01       	movw	r24, r26
     d46:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     d4a:	2d 8b       	std	Y+21, r18	; 0x15
     d4c:	3e 8b       	std	Y+22, r19	; 0x16
     d4e:	4f 8b       	std	Y+23, r20	; 0x17
     d50:	58 8f       	std	Y+24, r21	; 0x18

    X1 = A3_s * B6 / 8192;
     d52:	87 e5       	ldi	r24, 0x57	; 87
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	fc 01       	movw	r30, r24
     d58:	80 81       	ld	r24, Z
     d5a:	91 81       	ldd	r25, Z+1	; 0x01
     d5c:	aa 27       	eor	r26, r26
     d5e:	97 fd       	sbrc	r25, 7
     d60:	a0 95       	com	r26
     d62:	ba 2f       	mov	r27, r26
     d64:	2d 81       	ldd	r18, Y+5	; 0x05
     d66:	3e 81       	ldd	r19, Y+6	; 0x06
     d68:	4f 81       	ldd	r20, Y+7	; 0x07
     d6a:	58 85       	ldd	r21, Y+8	; 0x08
     d6c:	bc 01       	movw	r22, r24
     d6e:	cd 01       	movw	r24, r26
     d70:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e2       	ldi	r19, 0x20	; 32
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	bc 01       	movw	r22, r24
     d82:	cd 01       	movw	r24, r26
     d84:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     d88:	29 87       	std	Y+9, r18	; 0x09
     d8a:	3a 87       	std	Y+10, r19	; 0x0a
     d8c:	4b 87       	std	Y+11, r20	; 0x0b
     d8e:	5c 87       	std	Y+12, r21	; 0x0c
    X2 = (B1_s * (B6 * B6 / 4096)) / 65536;
     d90:	8f e5       	ldi	r24, 0x5F	; 95
     d92:	92 e0       	ldi	r25, 0x02	; 2
     d94:	fc 01       	movw	r30, r24
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	7c 01       	movw	r14, r24
     d9c:	00 27       	eor	r16, r16
     d9e:	f7 fc       	sbrc	r15, 7
     da0:	00 95       	com	r16
     da2:	10 2f       	mov	r17, r16
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	9e 81       	ldd	r25, Y+6	; 0x06
     da8:	af 81       	ldd	r26, Y+7	; 0x07
     daa:	b8 85       	ldd	r27, Y+8	; 0x08
     dac:	2d 81       	ldd	r18, Y+5	; 0x05
     dae:	3e 81       	ldd	r19, Y+6	; 0x06
     db0:	4f 81       	ldd	r20, Y+7	; 0x07
     db2:	58 85       	ldd	r21, Y+8	; 0x08
     db4:	bc 01       	movw	r22, r24
     db6:	cd 01       	movw	r24, r26
     db8:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e1       	ldi	r19, 0x10	; 16
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	bc 01       	movw	r22, r24
     dca:	cd 01       	movw	r24, r26
     dcc:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     dd0:	c8 01       	movw	r24, r16
     dd2:	b7 01       	movw	r22, r14
     dd4:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	41 e0       	ldi	r20, 0x01	; 1
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	bc 01       	movw	r22, r24
     de6:	cd 01       	movw	r24, r26
     de8:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     dec:	2d 87       	std	Y+13, r18	; 0x0d
     dee:	3e 87       	std	Y+14, r19	; 0x0e
     df0:	4f 87       	std	Y+15, r20	; 0x0f
     df2:	58 8b       	std	Y+16, r21	; 0x10
    X3 = ((X1 + X2) + 2) / 4;
     df4:	29 85       	ldd	r18, Y+9	; 0x09
     df6:	3a 85       	ldd	r19, Y+10	; 0x0a
     df8:	4b 85       	ldd	r20, Y+11	; 0x0b
     dfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
     e00:	af 85       	ldd	r26, Y+15	; 0x0f
     e02:	b8 89       	ldd	r27, Y+16	; 0x10
     e04:	82 0f       	add	r24, r18
     e06:	93 1f       	adc	r25, r19
     e08:	a4 1f       	adc	r26, r20
     e0a:	b5 1f       	adc	r27, r21
     e0c:	02 96       	adiw	r24, 0x02	; 2
     e0e:	a1 1d       	adc	r26, r1
     e10:	b1 1d       	adc	r27, r1
     e12:	24 e0       	ldi	r18, 0x04	; 4
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	bc 01       	movw	r22, r24
     e1c:	cd 01       	movw	r24, r26
     e1e:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     e22:	29 8b       	std	Y+17, r18	; 0x11
     e24:	3a 8b       	std	Y+18, r19	; 0x12
     e26:	4b 8b       	std	Y+19, r20	; 0x13
     e28:	5c 8b       	std	Y+20, r21	; 0x14

    uint32_t B4 = (A4_u * (uint32_t)(X3 + 32768)) / 32768;
     e2a:	89 e5       	ldi	r24, 0x59	; 89
     e2c:	92 e0       	ldi	r25, 0x02	; 2
     e2e:	fc 01       	movw	r30, r24
     e30:	80 81       	ld	r24, Z
     e32:	91 81       	ldd	r25, Z+1	; 0x01
     e34:	cc 01       	movw	r24, r24
     e36:	a0 e0       	ldi	r26, 0x00	; 0
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	29 89       	ldd	r18, Y+17	; 0x11
     e3c:	3a 89       	ldd	r19, Y+18	; 0x12
     e3e:	4b 89       	ldd	r20, Y+19	; 0x13
     e40:	5c 89       	ldd	r21, Y+20	; 0x14
     e42:	20 50       	subi	r18, 0x00	; 0
     e44:	30 48       	sbci	r19, 0x80	; 128
     e46:	4f 4f       	sbci	r20, 0xFF	; 255
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	07 2e       	mov	r0, r23
     e58:	7f e0       	ldi	r23, 0x0F	; 15
     e5a:	b6 95       	lsr	r27
     e5c:	a7 95       	ror	r26
     e5e:	97 95       	ror	r25
     e60:	87 95       	ror	r24
     e62:	7a 95       	dec	r23
     e64:	d1 f7       	brne	.-12     	; 0xe5a <bmp_Read_Pressure+0x2ae>
     e66:	70 2d       	mov	r23, r0
     e68:	89 8f       	std	Y+25, r24	; 0x19
     e6a:	9a 8f       	std	Y+26, r25	; 0x1a
     e6c:	ab 8f       	std	Y+27, r26	; 0x1b
     e6e:	bc 8f       	std	Y+28, r27	; 0x1c
    uint32_t B7 = ((uint32_t)UP - B3) * 50000;
     e70:	29 81       	ldd	r18, Y+1	; 0x01
     e72:	3a 81       	ldd	r19, Y+2	; 0x02
     e74:	4b 81       	ldd	r20, Y+3	; 0x03
     e76:	5c 81       	ldd	r21, Y+4	; 0x04
     e78:	8d 89       	ldd	r24, Y+21	; 0x15
     e7a:	9e 89       	ldd	r25, Y+22	; 0x16
     e7c:	af 89       	ldd	r26, Y+23	; 0x17
     e7e:	b8 8d       	ldd	r27, Y+24	; 0x18
     e80:	79 01       	movw	r14, r18
     e82:	8a 01       	movw	r16, r20
     e84:	e8 1a       	sub	r14, r24
     e86:	f9 0a       	sbc	r15, r25
     e88:	0a 0b       	sbc	r16, r26
     e8a:	1b 0b       	sbc	r17, r27
     e8c:	d8 01       	movw	r26, r16
     e8e:	c7 01       	movw	r24, r14
     e90:	20 e5       	ldi	r18, 0x50	; 80
     e92:	33 ec       	ldi	r19, 0xC3	; 195
     e94:	40 e0       	ldi	r20, 0x00	; 0
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	bc 01       	movw	r22, r24
     e9a:	cd 01       	movw	r24, r26
     e9c:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	8d 8f       	std	Y+29, r24	; 0x1d
     ea6:	9e 8f       	std	Y+30, r25	; 0x1e
     ea8:	af 8f       	std	Y+31, r26	; 0x1f
     eaa:	b8 a3       	std	Y+32, r27	; 0x20

    int32_t p = (B7 < 0x80000000) ? ((B7 * 2) / B4) : ((B7 / B4) * 2);
     eac:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eae:	9e 8d       	ldd	r25, Y+30	; 0x1e
     eb0:	af 8d       	ldd	r26, Y+31	; 0x1f
     eb2:	b8 a1       	ldd	r27, Y+32	; 0x20
     eb4:	bb 23       	and	r27, r27
     eb6:	9c f0       	brlt	.+38     	; 0xede <bmp_Read_Pressure+0x332>
     eb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eba:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ebc:	af 8d       	ldd	r26, Y+31	; 0x1f
     ebe:	b8 a1       	ldd	r27, Y+32	; 0x20
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	aa 1f       	adc	r26, r26
     ec6:	bb 1f       	adc	r27, r27
     ec8:	29 8d       	ldd	r18, Y+25	; 0x19
     eca:	3a 8d       	ldd	r19, Y+26	; 0x1a
     ecc:	4b 8d       	ldd	r20, Y+27	; 0x1b
     ece:	5c 8d       	ldd	r21, Y+28	; 0x1c
     ed0:	bc 01       	movw	r22, r24
     ed2:	cd 01       	movw	r24, r26
     ed4:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
     ed8:	da 01       	movw	r26, r20
     eda:	c9 01       	movw	r24, r18
     edc:	12 c0       	rjmp	.+36     	; 0xf02 <bmp_Read_Pressure+0x356>
     ede:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ee0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ee2:	af 8d       	ldd	r26, Y+31	; 0x1f
     ee4:	b8 a1       	ldd	r27, Y+32	; 0x20
     ee6:	29 8d       	ldd	r18, Y+25	; 0x19
     ee8:	3a 8d       	ldd	r19, Y+26	; 0x1a
     eea:	4b 8d       	ldd	r20, Y+27	; 0x1b
     eec:	5c 8d       	ldd	r21, Y+28	; 0x1c
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
     ef6:	da 01       	movw	r26, r20
     ef8:	c9 01       	movw	r24, r18
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	aa 1f       	adc	r26, r26
     f00:	bb 1f       	adc	r27, r27
     f02:	89 a3       	std	Y+33, r24	; 0x21
     f04:	9a a3       	std	Y+34, r25	; 0x22
     f06:	ab a3       	std	Y+35, r26	; 0x23
     f08:	bc a3       	std	Y+36, r27	; 0x24

    X1 = (p / 256) * (p / 256);
     f0a:	89 a1       	ldd	r24, Y+33	; 0x21
     f0c:	9a a1       	ldd	r25, Y+34	; 0x22
     f0e:	ab a1       	ldd	r26, Y+35	; 0x23
     f10:	bc a1       	ldd	r27, Y+36	; 0x24
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	31 e0       	ldi	r19, 0x01	; 1
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	bc 01       	movw	r22, r24
     f1c:	cd 01       	movw	r24, r26
     f1e:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     f22:	79 01       	movw	r14, r18
     f24:	8a 01       	movw	r16, r20
     f26:	89 a1       	ldd	r24, Y+33	; 0x21
     f28:	9a a1       	ldd	r25, Y+34	; 0x22
     f2a:	ab a1       	ldd	r26, Y+35	; 0x23
     f2c:	bc a1       	ldd	r27, Y+36	; 0x24
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	31 e0       	ldi	r19, 0x01	; 1
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	bc 01       	movw	r22, r24
     f38:	cd 01       	movw	r24, r26
     f3a:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     f3e:	c8 01       	movw	r24, r16
     f40:	b7 01       	movw	r22, r14
     f42:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	89 87       	std	Y+9, r24	; 0x09
     f4c:	9a 87       	std	Y+10, r25	; 0x0a
     f4e:	ab 87       	std	Y+11, r26	; 0x0b
     f50:	bc 87       	std	Y+12, r27	; 0x0c

    X1 = (X1 * 3038) / 65536;
     f52:	89 85       	ldd	r24, Y+9	; 0x09
     f54:	9a 85       	ldd	r25, Y+10	; 0x0a
     f56:	ab 85       	ldd	r26, Y+11	; 0x0b
     f58:	bc 85       	ldd	r27, Y+12	; 0x0c
     f5a:	2e ed       	ldi	r18, 0xDE	; 222
     f5c:	3b e0       	ldi	r19, 0x0B	; 11
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     f7e:	29 87       	std	Y+9, r18	; 0x09
     f80:	3a 87       	std	Y+10, r19	; 0x0a
     f82:	4b 87       	std	Y+11, r20	; 0x0b
     f84:	5c 87       	std	Y+12, r21	; 0x0c
    X2 = (-7357 * p) / 65536;
     f86:	89 a1       	ldd	r24, Y+33	; 0x21
     f88:	9a a1       	ldd	r25, Y+34	; 0x22
     f8a:	ab a1       	ldd	r26, Y+35	; 0x23
     f8c:	bc a1       	ldd	r27, Y+36	; 0x24
     f8e:	23 e4       	ldi	r18, 0x43	; 67
     f90:	33 ee       	ldi	r19, 0xE3	; 227
     f92:	4f ef       	ldi	r20, 0xFF	; 255
     f94:	5f ef       	ldi	r21, 0xFF	; 255
     f96:	bc 01       	movw	r22, r24
     f98:	cd 01       	movw	r24, r26
     f9a:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	41 e0       	ldi	r20, 0x01	; 1
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     fb2:	2d 87       	std	Y+13, r18	; 0x0d
     fb4:	3e 87       	std	Y+14, r19	; 0x0e
     fb6:	4f 87       	std	Y+15, r20	; 0x0f
     fb8:	58 8b       	std	Y+16, r21	; 0x10
    p = p + (X1 + X2 + 3791) / 16;
     fba:	29 85       	ldd	r18, Y+9	; 0x09
     fbc:	3a 85       	ldd	r19, Y+10	; 0x0a
     fbe:	4b 85       	ldd	r20, Y+11	; 0x0b
     fc0:	5c 85       	ldd	r21, Y+12	; 0x0c
     fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc6:	af 85       	ldd	r26, Y+15	; 0x0f
     fc8:	b8 89       	ldd	r27, Y+16	; 0x10
     fca:	82 0f       	add	r24, r18
     fcc:	93 1f       	adc	r25, r19
     fce:	a4 1f       	adc	r26, r20
     fd0:	b5 1f       	adc	r27, r21
     fd2:	81 53       	subi	r24, 0x31	; 49
     fd4:	91 4f       	sbci	r25, 0xF1	; 241
     fd6:	af 4f       	sbci	r26, 0xFF	; 255
     fd8:	bf 4f       	sbci	r27, 0xFF	; 255
     fda:	20 e1       	ldi	r18, 0x10	; 16
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	bc 01       	movw	r22, r24
     fe4:	cd 01       	movw	r24, r26
     fe6:	0e 94 57 3f 	call	0x7eae	; 0x7eae <__divmodsi4>
     fea:	da 01       	movw	r26, r20
     fec:	c9 01       	movw	r24, r18
     fee:	29 a1       	ldd	r18, Y+33	; 0x21
     ff0:	3a a1       	ldd	r19, Y+34	; 0x22
     ff2:	4b a1       	ldd	r20, Y+35	; 0x23
     ff4:	5c a1       	ldd	r21, Y+36	; 0x24
     ff6:	82 0f       	add	r24, r18
     ff8:	93 1f       	adc	r25, r19
     ffa:	a4 1f       	adc	r26, r20
     ffc:	b5 1f       	adc	r27, r21
     ffe:	89 a3       	std	Y+33, r24	; 0x21
    1000:	9a a3       	std	Y+34, r25	; 0x22
    1002:	ab a3       	std	Y+35, r26	; 0x23
    1004:	bc a3       	std	Y+36, r27	; 0x24

    return p;
    1006:	89 a1       	ldd	r24, Y+33	; 0x21
    1008:	9a a1       	ldd	r25, Y+34	; 0x22
    100a:	ab a1       	ldd	r26, Y+35	; 0x23
    100c:	bc a1       	ldd	r27, Y+36	; 0x24
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	a7 96       	adiw	r28, 0x27	; 39
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	08 95       	ret

0000102c <__vector_20>:
 * placed in the 'comsData' buffer and the count is incrmented. If
 * the buffer reaches an overflow condition then new characters
 * are placed at the end of the buffer.
 */
SIGNAL(USART0_RX_vect)
{
    102c:	1f 92       	push	r1
    102e:	0f 92       	push	r0
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	0f 92       	push	r0
    1034:	11 24       	eor	r1, r1
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    if (comsSize < COMS_BUFFER_SIZE)
    1056:	80 91 81 02 	lds	r24, 0x0281
    105a:	90 91 82 02 	lds	r25, 0x0282
    105e:	84 31       	cpi	r24, 0x14	; 20
    1060:	91 05       	cpc	r25, r1
    1062:	9c f4       	brge	.+38     	; 0x108a <__vector_20+0x5e>
    {
        comsData[comsSize++] = UDR0;
    1064:	80 91 81 02 	lds	r24, 0x0281
    1068:	90 91 82 02 	lds	r25, 0x0282
    106c:	26 ec       	ldi	r18, 0xC6	; 198
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	f9 01       	movw	r30, r18
    1072:	40 81       	ld	r20, Z
    1074:	9c 01       	movw	r18, r24
    1076:	23 59       	subi	r18, 0x93	; 147
    1078:	3d 4f       	sbci	r19, 0xFD	; 253
    107a:	f9 01       	movw	r30, r18
    107c:	40 83       	st	Z, r20
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	90 93 82 02 	sts	0x0282, r25
    1084:	80 93 81 02 	sts	0x0281, r24
    1088:	06 c0       	rjmp	.+12     	; 0x1096 <__vector_20+0x6a>
    }
    else
    {
        comsData[COMS_BUFFER_SIZE - 1] = UDR0;
    108a:	86 ec       	ldi	r24, 0xC6	; 198
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	fc 01       	movw	r30, r24
    1090:	80 81       	ld	r24, Z
    1092:	80 93 80 02 	sts	0x0280, r24
    }
    
    timer_Wake();
    1096:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <timer_Wake>
}
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	ff 91       	pop	r31
    10a0:	ef 91       	pop	r30
    10a2:	bf 91       	pop	r27
    10a4:	af 91       	pop	r26
    10a6:	9f 91       	pop	r25
    10a8:	8f 91       	pop	r24
    10aa:	7f 91       	pop	r23
    10ac:	6f 91       	pop	r22
    10ae:	5f 91       	pop	r21
    10b0:	4f 91       	pop	r20
    10b2:	3f 91       	pop	r19
    10b4:	2f 91       	pop	r18
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f 90       	pop	r0
    10bc:	1f 90       	pop	r1
    10be:	18 95       	reti

000010c0 <coms_Init>:
/**
 * Initializes the usart responsible for serial communication.
 * Also turns on recieve interrupts over serial.
 */
void coms_Init(void)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <coms_Init+0x6>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    int i;

    if (data_Read_EEPROM(DATA_BT_FLAG_ADDR) == DATA_FLAG_ON)
    10ca:	8e e1       	ldi	r24, 0x1E	; 30
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    10d2:	8f 3f       	cpi	r24, 0xFF	; 255
    10d4:	39 f4       	brne	.+14     	; 0x10e4 <coms_Init+0x24>
    {
        data_Write_EEPROM(DATA_BT_FLAG_ADDR, DATA_FLAG_OFF);
    10d6:	8e e1       	ldi	r24, 0x1E	; 30
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
        
        coms_Bluetooth_Init();
    10e0:	0e 94 9d 08 	call	0x113a	; 0x113a <coms_Bluetooth_Init>
    }
    
    if (!(coms_Bluetooth_Detect()))
    10e4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <coms_Bluetooth_Detect>
    10e8:	98 2f       	mov	r25, r24
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	89 27       	eor	r24, r25
    10ee:	88 23       	and	r24, r24
    10f0:	39 f0       	breq	.+14     	; 0x1100 <coms_Init+0x40>
    {
        usart_Init(SERIAL, COMS_BAUD_115200);
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	44 e0       	ldi	r20, 0x04	; 4
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	0e 94 82 28 	call	0x5104	; 0x5104 <usart_Init>
    }

    for (i = 0; i < COMS_BUFFER_SIZE; i++) comsData[i] = 0xA3;
    1100:	1a 82       	std	Y+2, r1	; 0x02
    1102:	19 82       	std	Y+1, r1	; 0x01
    1104:	0c c0       	rjmp	.+24     	; 0x111e <coms_Init+0x5e>
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	83 59       	subi	r24, 0x93	; 147
    110c:	9d 4f       	sbci	r25, 0xFD	; 253
    110e:	23 ea       	ldi	r18, 0xA3	; 163
    1110:	fc 01       	movw	r30, r24
    1112:	20 83       	st	Z, r18
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	84 31       	cpi	r24, 0x14	; 20
    1124:	91 05       	cpc	r25, r1
    1126:	7c f3       	brlt	.-34     	; 0x1106 <coms_Init+0x46>

    usart_Interrupt_RX(SERIAL, ENABLE);
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <usart_Interrupt_RX>
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <coms_Bluetooth_Init>:
 * as a serial port. Also names the device PINPoint4+HEX.SN.
 * 
 * NOTE: Do not use after interrupts have been enabled.
 */
void coms_Bluetooth_Init(void)
{
    113a:	8f 92       	push	r8
    113c:	9f 92       	push	r9
    113e:	af 92       	push	r10
    1140:	bf 92       	push	r11
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	28 97       	sbiw	r28, 0x08	; 8
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    char rate[2];
    
    switch (data_Read_EEPROM(DATA_BT_BAUD_ADDR))
    1162:	8d e1       	ldi	r24, 0x1D	; 29
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    116a:	88 2f       	mov	r24, r24
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	8e 30       	cpi	r24, 0x0E	; 14
    1170:	91 05       	cpc	r25, r1
    1172:	d9 f0       	breq	.+54     	; 0x11aa <coms_Bluetooth_Init+0x70>
    1174:	8f 30       	cpi	r24, 0x0F	; 15
    1176:	91 05       	cpc	r25, r1
    1178:	3c f4       	brge	.+14     	; 0x1188 <coms_Bluetooth_Init+0x4e>
    117a:	84 30       	cpi	r24, 0x04	; 4
    117c:	91 05       	cpc	r25, r1
    117e:	59 f0       	breq	.+22     	; 0x1196 <coms_Bluetooth_Init+0x5c>
    1180:	89 30       	cpi	r24, 0x09	; 9
    1182:	91 05       	cpc	r25, r1
    1184:	69 f0       	breq	.+26     	; 0x11a0 <coms_Bluetooth_Init+0x66>
    1186:	20 c0       	rjmp	.+64     	; 0x11c8 <coms_Bluetooth_Init+0x8e>
    1188:	8d 31       	cpi	r24, 0x1D	; 29
    118a:	91 05       	cpc	r25, r1
    118c:	99 f0       	breq	.+38     	; 0x11b4 <coms_Bluetooth_Init+0x7a>
    118e:	8b 33       	cpi	r24, 0x3B	; 59
    1190:	91 05       	cpc	r25, r1
    1192:	a9 f0       	breq	.+42     	; 0x11be <coms_Bluetooth_Init+0x84>
    1194:	19 c0       	rjmp	.+50     	; 0x11c8 <coms_Bluetooth_Init+0x8e>
    {
        case COMS_BAUD_115200:
            rate[0] = '1';
    1196:	81 e3       	ldi	r24, 0x31	; 49
    1198:	8f 83       	std	Y+7, r24	; 0x07
            rate[1] = '1';
    119a:	81 e3       	ldi	r24, 0x31	; 49
    119c:	88 87       	std	Y+8, r24	; 0x08
            break;
    119e:	1e c0       	rjmp	.+60     	; 0x11dc <coms_Bluetooth_Init+0xa2>
        case COMS_BAUD_57600:
            rate[0] = '5';
    11a0:	85 e3       	ldi	r24, 0x35	; 53
    11a2:	8f 83       	std	Y+7, r24	; 0x07
            rate[1] = '7';
    11a4:	87 e3       	ldi	r24, 0x37	; 55
    11a6:	88 87       	std	Y+8, r24	; 0x08
            break;
    11a8:	19 c0       	rjmp	.+50     	; 0x11dc <coms_Bluetooth_Init+0xa2>
        case COMS_BAUD_38400:
            rate[0] = '3';
    11aa:	83 e3       	ldi	r24, 0x33	; 51
    11ac:	8f 83       	std	Y+7, r24	; 0x07
            rate[1] = '8';
    11ae:	88 e3       	ldi	r24, 0x38	; 56
    11b0:	88 87       	std	Y+8, r24	; 0x08
            break;
    11b2:	14 c0       	rjmp	.+40     	; 0x11dc <coms_Bluetooth_Init+0xa2>
        case COMS_BAUD_19200:
            rate[0] = '1';
    11b4:	81 e3       	ldi	r24, 0x31	; 49
    11b6:	8f 83       	std	Y+7, r24	; 0x07
            rate[1] = '9';
    11b8:	89 e3       	ldi	r24, 0x39	; 57
    11ba:	88 87       	std	Y+8, r24	; 0x08
            break;
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <coms_Bluetooth_Init+0xa2>
        case COMS_BAUD_9600:
            rate[0] = '9';
    11be:	89 e3       	ldi	r24, 0x39	; 57
    11c0:	8f 83       	std	Y+7, r24	; 0x07
            rate[1] = '6';
    11c2:	86 e3       	ldi	r24, 0x36	; 54
    11c4:	88 87       	std	Y+8, r24	; 0x08
            break;
    11c6:	0a c0       	rjmp	.+20     	; 0x11dc <coms_Bluetooth_Init+0xa2>
        default:
            rate[0] = '1';
    11c8:	81 e3       	ldi	r24, 0x31	; 49
    11ca:	8f 83       	std	Y+7, r24	; 0x07
            rate[1] = '1';
    11cc:	81 e3       	ldi	r24, 0x31	; 49
    11ce:	88 87       	std	Y+8, r24	; 0x08
            
            data_Write_EEPROM(DATA_BT_BAUD_ADDR, DATA_DEFAULT_BT_BAUD);
    11d0:	8d e1       	ldi	r24, 0x1D	; 29
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	64 e0       	ldi	r22, 0x04	; 4
    11d6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
            
            break;
    11da:	00 00       	nop
    }
    
    uint32_t sn = 0;
    11dc:	1b 82       	std	Y+3, r1	; 0x03
    11de:	1c 82       	std	Y+4, r1	; 0x04
    11e0:	1d 82       	std	Y+5, r1	; 0x05
    11e2:	1e 82       	std	Y+6, r1	; 0x06
    sn += (uint32_t)data_Read_EEPROM(DATA_SN_24_ADDR) << 24;
    11e4:	8c ef       	ldi	r24, 0xFC	; 252
    11e6:	93 e0       	ldi	r25, 0x03	; 3
    11e8:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	a0 e0       	ldi	r26, 0x00	; 0
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	b8 2f       	mov	r27, r24
    11f6:	aa 27       	eor	r26, r26
    11f8:	99 27       	eor	r25, r25
    11fa:	88 27       	eor	r24, r24
    11fc:	2b 81       	ldd	r18, Y+3	; 0x03
    11fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1200:	4d 81       	ldd	r20, Y+5	; 0x05
    1202:	5e 81       	ldd	r21, Y+6	; 0x06
    1204:	82 0f       	add	r24, r18
    1206:	93 1f       	adc	r25, r19
    1208:	a4 1f       	adc	r26, r20
    120a:	b5 1f       	adc	r27, r21
    120c:	8b 83       	std	Y+3, r24	; 0x03
    120e:	9c 83       	std	Y+4, r25	; 0x04
    1210:	ad 83       	std	Y+5, r26	; 0x05
    1212:	be 83       	std	Y+6, r27	; 0x06
    sn += (uint32_t)data_Read_EEPROM(DATA_SN_16_ADDR) << 16;
    1214:	8d ef       	ldi	r24, 0xFD	; 253
    1216:	93 e0       	ldi	r25, 0x03	; 3
    1218:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a0 e0       	ldi	r26, 0x00	; 0
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	dc 01       	movw	r26, r24
    1226:	99 27       	eor	r25, r25
    1228:	88 27       	eor	r24, r24
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	4d 81       	ldd	r20, Y+5	; 0x05
    1230:	5e 81       	ldd	r21, Y+6	; 0x06
    1232:	82 0f       	add	r24, r18
    1234:	93 1f       	adc	r25, r19
    1236:	a4 1f       	adc	r26, r20
    1238:	b5 1f       	adc	r27, r21
    123a:	8b 83       	std	Y+3, r24	; 0x03
    123c:	9c 83       	std	Y+4, r25	; 0x04
    123e:	ad 83       	std	Y+5, r26	; 0x05
    1240:	be 83       	std	Y+6, r27	; 0x06
    sn += (uint32_t)data_Read_EEPROM(DATA_SN_8_ADDR) << 8;
    1242:	8e ef       	ldi	r24, 0xFE	; 254
    1244:	93 e0       	ldi	r25, 0x03	; 3
    1246:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a0 e0       	ldi	r26, 0x00	; 0
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ba 2f       	mov	r27, r26
    1254:	a9 2f       	mov	r26, r25
    1256:	98 2f       	mov	r25, r24
    1258:	88 27       	eor	r24, r24
    125a:	2b 81       	ldd	r18, Y+3	; 0x03
    125c:	3c 81       	ldd	r19, Y+4	; 0x04
    125e:	4d 81       	ldd	r20, Y+5	; 0x05
    1260:	5e 81       	ldd	r21, Y+6	; 0x06
    1262:	82 0f       	add	r24, r18
    1264:	93 1f       	adc	r25, r19
    1266:	a4 1f       	adc	r26, r20
    1268:	b5 1f       	adc	r27, r21
    126a:	8b 83       	std	Y+3, r24	; 0x03
    126c:	9c 83       	std	Y+4, r25	; 0x04
    126e:	ad 83       	std	Y+5, r26	; 0x05
    1270:	be 83       	std	Y+6, r27	; 0x06
    sn += (uint32_t)data_Read_EEPROM(DATA_SN_0_ADDR);
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	93 e0       	ldi	r25, 0x03	; 3
    1276:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	2b 81       	ldd	r18, Y+3	; 0x03
    1284:	3c 81       	ldd	r19, Y+4	; 0x04
    1286:	4d 81       	ldd	r20, Y+5	; 0x05
    1288:	5e 81       	ldd	r21, Y+6	; 0x06
    128a:	82 0f       	add	r24, r18
    128c:	93 1f       	adc	r25, r19
    128e:	a4 1f       	adc	r26, r20
    1290:	b5 1f       	adc	r27, r21
    1292:	8b 83       	std	Y+3, r24	; 0x03
    1294:	9c 83       	std	Y+4, r25	; 0x04
    1296:	ad 83       	std	Y+5, r26	; 0x05
    1298:	be 83       	std	Y+6, r27	; 0x06
    
    timer_Wait_MS(1000);
    129a:	88 ee       	ldi	r24, 0xE8	; 232
    129c:	93 e0       	ldi	r25, 0x03	; 3
    129e:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
    
    int i;
    for (i = 0; i < COMS_NUM_BAUD; i++)
    12a2:	1a 82       	std	Y+2, r1	; 0x02
    12a4:	19 82       	std	Y+1, r1	; 0x01
    12a6:	8e c0       	rjmp	.+284    	; 0x13c4 <coms_Bluetooth_Init+0x28a>
    {
        usart_Init(SERIAL, comsBauds[i]);
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	80 50       	subi	r24, 0x00	; 0
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	fc 01       	movw	r30, r24
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	ba 01       	movw	r22, r20
    12c0:	a9 01       	movw	r20, r18
    12c2:	0e 94 82 28 	call	0x5104	; 0x5104 <usart_Init>
    
        timer_Wait_MS(1000);
    12c6:	88 ee       	ldi	r24, 0xE8	; 232
    12c8:	93 e0       	ldi	r25, 0x03	; 3
    12ca:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
        usart_Text(SERIAL, PSTR("$$$"));
    12ce:	25 e8       	ldi	r18, 0x85	; 133
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	b9 01       	movw	r22, r18
    12d6:	0e 94 59 29 	call	0x52b2	; 0x52b2 <usart_Text>
        timer_Wait_MS(100);
    12da:	84 e6       	ldi	r24, 0x64	; 100
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
        
        usart_Text(SERIAL, PSTR("SU,"));
    12e2:	29 e8       	ldi	r18, 0x89	; 137
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	b9 01       	movw	r22, r18
    12ea:	0e 94 59 29 	call	0x52b2	; 0x52b2 <usart_Text>
        usart_Write(SERIAL, rate[0]);
    12ee:	9f 81       	ldd	r25, Y+7	; 0x07
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	69 2f       	mov	r22, r25
    12f4:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
        usart_Write(SERIAL, rate[1]);
    12f8:	98 85       	ldd	r25, Y+8	; 0x08
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	69 2f       	mov	r22, r25
    12fe:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
        usart_Write(SERIAL, '\r');
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	6d e0       	ldi	r22, 0x0D	; 13
    1306:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
        timer_Wait_MS(100);
    130a:	84 e6       	ldi	r24, 0x64	; 100
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
        
        usart_Text(SERIAL, PSTR("SC,1101\r"));
    1312:	2d e8       	ldi	r18, 0x8D	; 141
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 59 29 	call	0x52b2	; 0x52b2 <usart_Text>
        timer_Wait_MS(100);
    131e:	84 e6       	ldi	r24, 0x64	; 100
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
        
        usart_Text(SERIAL, PSTR("SS,SerialPort\r"));
    1326:	26 e9       	ldi	r18, 0x96	; 150
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	b9 01       	movw	r22, r18
    132e:	0e 94 59 29 	call	0x52b2	; 0x52b2 <usart_Text>
        timer_Wait_MS(100);
    1332:	84 e6       	ldi	r24, 0x64	; 100
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
        
        usart_Text(SERIAL, PSTR("SI,0030\r"));
    133a:	25 ea       	ldi	r18, 0xA5	; 165
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	b9 01       	movw	r22, r18
    1342:	0e 94 59 29 	call	0x52b2	; 0x52b2 <usart_Text>
        timer_Wait_MS(100);
    1346:	84 e6       	ldi	r24, 0x64	; 100
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
        
        usart_Text(SERIAL, PSTR("SJ,0030\r"));
    134e:	2e ea       	ldi	r18, 0xAE	; 174
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	b9 01       	movw	r22, r18
    1356:	0e 94 59 29 	call	0x52b2	; 0x52b2 <usart_Text>
        timer_Wait_MS(100);
    135a:	84 e6       	ldi	r24, 0x64	; 100
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
        
        usart_Text(SERIAL, PSTR("SN,PINPoint4"));
    1362:	27 eb       	ldi	r18, 0xB7	; 183
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	b9 01       	movw	r22, r18
    136a:	0e 94 59 29 	call	0x52b2	; 0x52b2 <usart_Text>
        usart_Print_Num(SERIAL, sn);
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	ad 81       	ldd	r26, Y+5	; 0x05
    1374:	be 81       	ldd	r27, Y+6	; 0x06
    1376:	4c 01       	movw	r8, r24
    1378:	5d 01       	movw	r10, r26
    137a:	cc 24       	eor	r12, r12
    137c:	dd 24       	eor	r13, r13
    137e:	76 01       	movw	r14, r12
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	08 2d       	mov	r16, r8
    1384:	19 2d       	mov	r17, r9
    1386:	2a 2d       	mov	r18, r10
    1388:	3b 2d       	mov	r19, r11
    138a:	4c 2d       	mov	r20, r12
    138c:	5d 2d       	mov	r21, r13
    138e:	6e 2d       	mov	r22, r14
    1390:	7f 2d       	mov	r23, r15
    1392:	0e 94 91 29 	call	0x5322	; 0x5322 <usart_Print_Num>
        usart_Write(SERIAL, '\r');
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	6d e0       	ldi	r22, 0x0D	; 13
    139a:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
        timer_Wait_MS(100);
    139e:	84 e6       	ldi	r24, 0x64	; 100
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
        
        usart_Text(SERIAL, PSTR("---\r"));
    13a6:	24 ec       	ldi	r18, 0xC4	; 196
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	b9 01       	movw	r22, r18
    13ae:	0e 94 59 29 	call	0x52b2	; 0x52b2 <usart_Text>
        timer_Wait_MS(100);
    13b2:	84 e6       	ldi	r24, 0x64	; 100
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
    sn += (uint32_t)data_Read_EEPROM(DATA_SN_0_ADDR);
    
    timer_Wait_MS(1000);
    
    int i;
    for (i = 0; i < COMS_NUM_BAUD; i++)
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	9a 83       	std	Y+2, r25	; 0x02
    13c2:	89 83       	std	Y+1, r24	; 0x01
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	85 30       	cpi	r24, 0x05	; 5
    13ca:	91 05       	cpc	r25, r1
    13cc:	0c f4       	brge	.+2      	; 0x13d0 <coms_Bluetooth_Init+0x296>
    13ce:	6c cf       	rjmp	.-296    	; 0x12a8 <coms_Bluetooth_Init+0x16e>
        timer_Wait_MS(100);
        
        usart_Text(SERIAL, PSTR("---\r"));
        timer_Wait_MS(100);
    }
}
    13d0:	28 96       	adiw	r28, 0x08	; 8
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	bf 90       	pop	r11
    13ee:	af 90       	pop	r10
    13f0:	9f 90       	pop	r9
    13f2:	8f 90       	pop	r8
    13f4:	08 95       	ret

000013f6 <coms_Bluetooth_Detect>:
 * NOTE: Do not use after interrupts have been enabled.
 * 
 * @return True if connected to bluetooth.
 */
bool coms_Bluetooth_Detect(void)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	0f 92       	push	r0
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    sei();
    1400:	78 94       	sei
    bool ret = false;
    1402:	19 82       	std	Y+1, r1	; 0x01
    usart_Init(SERIAL, data_Read_EEPROM(DATA_BT_BAUD_ADDR));
    1404:	8d e1       	ldi	r24, 0x1D	; 29
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	ba 01       	movw	r22, r20
    1418:	a9 01       	movw	r20, r18
    141a:	0e 94 82 28 	call	0x5104	; 0x5104 <usart_Init>
    usart_Interrupt_RX(SERIAL, ENABLE);
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <usart_Interrupt_RX>
    
    timer_Wait_MS(500);
    1426:	84 ef       	ldi	r24, 0xF4	; 244
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
    usart_Text(SERIAL, PSTR("$$$"));
    142e:	2c e7       	ldi	r18, 0x7C	; 124
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	b9 01       	movw	r22, r18
    1436:	0e 94 59 29 	call	0x52b2	; 0x52b2 <usart_Text>
    timer_Wait_MS(100);
    143a:	84 e6       	ldi	r24, 0x64	; 100
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
    
    if ((comsData[0] == 'C') && 
    1442:	80 91 6d 02 	lds	r24, 0x026D
    1446:	83 34       	cpi	r24, 0x43	; 67
    1448:	81 f4       	brne	.+32     	; 0x146a <coms_Bluetooth_Detect+0x74>
        (comsData[1] == 'M') &&
    144a:	80 91 6e 02 	lds	r24, 0x026E
    
    timer_Wait_MS(500);
    usart_Text(SERIAL, PSTR("$$$"));
    timer_Wait_MS(100);
    
    if ((comsData[0] == 'C') && 
    144e:	8d 34       	cpi	r24, 0x4D	; 77
    1450:	61 f4       	brne	.+24     	; 0x146a <coms_Bluetooth_Detect+0x74>
        (comsData[1] == 'M') &&
        (comsData[2] == 'D'))
    1452:	80 91 6f 02 	lds	r24, 0x026F
    timer_Wait_MS(500);
    usart_Text(SERIAL, PSTR("$$$"));
    timer_Wait_MS(100);
    
    if ((comsData[0] == 'C') && 
        (comsData[1] == 'M') &&
    1456:	84 34       	cpi	r24, 0x44	; 68
    1458:	41 f4       	brne	.+16     	; 0x146a <coms_Bluetooth_Detect+0x74>
        (comsData[2] == 'D'))
    {
        usart_Text(SERIAL, PSTR("---\r"));
    145a:	20 e8       	ldi	r18, 0x80	; 128
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	b9 01       	movw	r22, r18
    1462:	0e 94 59 29 	call	0x52b2	; 0x52b2 <usart_Text>
        
        ret = true;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	89 83       	std	Y+1, r24	; 0x01
    }
    
    cli();
    146a:	f8 94       	cli
    usart_Interrupt_RX(SERIAL, DISABLE);
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <usart_Interrupt_RX>
    
    comsSize = 0;
    1474:	10 92 82 02 	sts	0x0282, r1
    1478:	10 92 81 02 	sts	0x0281, r1
    
    return ret;
    147c:	89 81       	ldd	r24, Y+1	; 0x01
}
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <coms_Poll>:
 *
 * @return Returns a comsMsg object containing any new message. If no message is
 * found then the returned object with have type 'NONE'
 */
ComsMsg coms_Poll(void)
{
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	29 97       	sbiw	r28, 0x09	; 9
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	8c 01       	movw	r16, r24
    ComsMsg msg = {NONE, {'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0'}};
    14a0:	29 e0       	ldi	r18, 0x09	; 9
    14a2:	ce 01       	movw	r24, r28
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	fc 01       	movw	r30, r24
    14a8:	32 2f       	mov	r19, r18
    14aa:	11 92       	st	Z+, r1
    14ac:	3a 95       	dec	r19
    14ae:	e9 f7       	brne	.-6      	; 0x14aa <coms_Poll+0x24>

    cli();
    14b0:	f8 94       	cli

    if (comsSize >= COMS_BUFFER_SIZE)
    14b2:	80 91 81 02 	lds	r24, 0x0281
    14b6:	90 91 82 02 	lds	r25, 0x0282
    14ba:	84 31       	cpi	r24, 0x14	; 20
    14bc:	91 05       	cpc	r25, r1
    14be:	6c f0       	brlt	.+26     	; 0x14da <coms_Poll+0x54>
    {
        //usart_Digits(SERIAL, comsSize, 10, SIGNED_ZEROS, 5);
        comsSize = 20;
    14c0:	84 e1       	ldi	r24, 0x14	; 20
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	90 93 82 02 	sts	0x0282, r25
    14c8:	80 93 81 02 	sts	0x0281, r24

        msg.type = OVERFLOW;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	89 83       	std	Y+1, r24	; 0x01
        coms_Clear(COMS_BUFFER_SIZE);
    14d0:	84 e1       	ldi	r24, 0x14	; 20
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
    14d8:	55 c1       	rjmp	.+682    	; 0x1784 <coms_Poll+0x2fe>
    }
    else
    {
        switch (comsData[0])
    14da:	80 91 6d 02 	lds	r24, 0x026D
    14de:	88 2f       	mov	r24, r24
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	86 30       	cpi	r24, 0x06	; 6
    14e4:	91 05       	cpc	r25, r1
    14e6:	09 f4       	brne	.+2      	; 0x14ea <coms_Poll+0x64>
    14e8:	bd c0       	rjmp	.+378    	; 0x1664 <coms_Poll+0x1de>
    14ea:	87 30       	cpi	r24, 0x07	; 7
    14ec:	91 05       	cpc	r25, r1
    14ee:	bc f4       	brge	.+46     	; 0x151e <coms_Poll+0x98>
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	91 05       	cpc	r25, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <coms_Poll+0x72>
    14f6:	65 c0       	rjmp	.+202    	; 0x15c2 <coms_Poll+0x13c>
    14f8:	84 30       	cpi	r24, 0x04	; 4
    14fa:	91 05       	cpc	r25, r1
    14fc:	3c f4       	brge	.+14     	; 0x150c <coms_Poll+0x86>
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	91 05       	cpc	r25, r1
    1502:	b9 f1       	breq	.+110    	; 0x1572 <coms_Poll+0xec>
    1504:	82 30       	cpi	r24, 0x02	; 2
    1506:	91 05       	cpc	r25, r1
    1508:	d9 f1       	breq	.+118    	; 0x1580 <coms_Poll+0xfa>
    150a:	25 c1       	rjmp	.+586    	; 0x1756 <coms_Poll+0x2d0>
    150c:	84 30       	cpi	r24, 0x04	; 4
    150e:	91 05       	cpc	r25, r1
    1510:	09 f4       	brne	.+2      	; 0x1514 <coms_Poll+0x8e>
    1512:	7b c0       	rjmp	.+246    	; 0x160a <coms_Poll+0x184>
    1514:	85 30       	cpi	r24, 0x05	; 5
    1516:	91 05       	cpc	r25, r1
    1518:	09 f4       	brne	.+2      	; 0x151c <coms_Poll+0x96>
    151a:	8c c0       	rjmp	.+280    	; 0x1634 <coms_Poll+0x1ae>
    151c:	1c c1       	rjmp	.+568    	; 0x1756 <coms_Poll+0x2d0>
    151e:	89 30       	cpi	r24, 0x09	; 9
    1520:	91 05       	cpc	r25, r1
    1522:	09 f4       	brne	.+2      	; 0x1526 <coms_Poll+0xa0>
    1524:	d1 c0       	rjmp	.+418    	; 0x16c8 <coms_Poll+0x242>
    1526:	8a 30       	cpi	r24, 0x0A	; 10
    1528:	91 05       	cpc	r25, r1
    152a:	4c f4       	brge	.+18     	; 0x153e <coms_Poll+0xb8>
    152c:	87 30       	cpi	r24, 0x07	; 7
    152e:	91 05       	cpc	r25, r1
    1530:	09 f4       	brne	.+2      	; 0x1534 <coms_Poll+0xae>
    1532:	9f c0       	rjmp	.+318    	; 0x1672 <coms_Poll+0x1ec>
    1534:	88 30       	cpi	r24, 0x08	; 8
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <coms_Poll+0xb6>
    153a:	a2 c0       	rjmp	.+324    	; 0x1680 <coms_Poll+0x1fa>
    153c:	0c c1       	rjmp	.+536    	; 0x1756 <coms_Poll+0x2d0>
    153e:	8a 30       	cpi	r24, 0x0A	; 10
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <coms_Poll+0xc0>
    1544:	e5 c0       	rjmp	.+458    	; 0x1710 <coms_Poll+0x28a>
    1546:	83 3a       	cpi	r24, 0xA3	; 163
    1548:	91 05       	cpc	r25, r1
    154a:	09 f0       	breq	.+2      	; 0x154e <coms_Poll+0xc8>
    154c:	04 c1       	rjmp	.+520    	; 0x1756 <coms_Poll+0x2d0>
        {
            case 0xA3:
                if (comsSize == 0) msg.type = NONE;
    154e:	80 91 81 02 	lds	r24, 0x0281
    1552:	90 91 82 02 	lds	r25, 0x0282
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	11 f4       	brne	.+4      	; 0x155e <coms_Poll+0xd8>
    155a:	19 82       	std	Y+1, r1	; 0x01
                {
                    msg.type = BAD;
                    msg.msg[0] = comsData[0];
                    coms_Clear(1);
                }
                break;
    155c:	13 c1       	rjmp	.+550    	; 0x1784 <coms_Poll+0x2fe>
        {
            case 0xA3:
                if (comsSize == 0) msg.type = NONE;
                else
                {
                    msg.type = BAD;
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	89 83       	std	Y+1, r24	; 0x01
                    msg.msg[0] = comsData[0];
    1562:	80 91 6d 02 	lds	r24, 0x026D
    1566:	8a 83       	std	Y+2, r24	; 0x02
                    coms_Clear(1);
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
                }
                break;
    1570:	09 c1       	rjmp	.+530    	; 0x1784 <coms_Poll+0x2fe>

            case COMS_VERIFY_IN:
                msg.type = VERIFY;
    1572:	83 e0       	ldi	r24, 0x03	; 3
    1574:	89 83       	std	Y+1, r24	; 0x01
                coms_Clear(COMS_VERIFY_SIZE);
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
                break;
    157e:	02 c1       	rjmp	.+516    	; 0x1784 <coms_Poll+0x2fe>

            case COMS_READ_FLASH_PAGE_IN:
                if (comsSize >= COMS_READ_FLASH_PAGE_SIZE)
    1580:	80 91 81 02 	lds	r24, 0x0281
    1584:	90 91 82 02 	lds	r25, 0x0282
    1588:	87 30       	cpi	r24, 0x07	; 7
    158a:	91 05       	cpc	r25, r1
    158c:	0c f4       	brge	.+2      	; 0x1590 <coms_Poll+0x10a>
    158e:	ed c0       	rjmp	.+474    	; 0x176a <coms_Poll+0x2e4>
                {
                    msg.type = READ_FLASH;
    1590:	84 e0       	ldi	r24, 0x04	; 4
    1592:	89 83       	std	Y+1, r24	; 0x01
                    msg.msg[0] = comsData[1];
    1594:	80 91 6e 02 	lds	r24, 0x026E
    1598:	8a 83       	std	Y+2, r24	; 0x02
                    msg.msg[1] = comsData[2];
    159a:	80 91 6f 02 	lds	r24, 0x026F
    159e:	8b 83       	std	Y+3, r24	; 0x03
                    msg.msg[2] = comsData[3];
    15a0:	80 91 70 02 	lds	r24, 0x0270
    15a4:	8c 83       	std	Y+4, r24	; 0x04
                    msg.msg[3] = comsData[4];
    15a6:	80 91 71 02 	lds	r24, 0x0271
    15aa:	8d 83       	std	Y+5, r24	; 0x05
                    msg.msg[4] = comsData[5];
    15ac:	80 91 72 02 	lds	r24, 0x0272
    15b0:	8e 83       	std	Y+6, r24	; 0x06
                    msg.msg[5] = comsData[6];
    15b2:	80 91 73 02 	lds	r24, 0x0273
    15b6:	8f 83       	std	Y+7, r24	; 0x07
                    coms_Clear(COMS_READ_FLASH_PAGE_SIZE);
    15b8:	87 e0       	ldi	r24, 0x07	; 7
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
                }
                break;
    15c0:	e1 c0       	rjmp	.+450    	; 0x1784 <coms_Poll+0x2fe>

            case COMS_WRITE_TIME_IN:
                if (comsSize >= COMS_WRITE_TIME_SIZE)
    15c2:	80 91 81 02 	lds	r24, 0x0281
    15c6:	90 91 82 02 	lds	r25, 0x0282
    15ca:	88 30       	cpi	r24, 0x08	; 8
    15cc:	91 05       	cpc	r25, r1
    15ce:	0c f4       	brge	.+2      	; 0x15d2 <coms_Poll+0x14c>
    15d0:	ce c0       	rjmp	.+412    	; 0x176e <coms_Poll+0x2e8>
                {
                    msg.type = WRITE_TIME;
    15d2:	86 e0       	ldi	r24, 0x06	; 6
    15d4:	89 83       	std	Y+1, r24	; 0x01
                    msg.msg[0] = comsData[1];
    15d6:	80 91 6e 02 	lds	r24, 0x026E
    15da:	8a 83       	std	Y+2, r24	; 0x02
                    msg.msg[1] = comsData[2];
    15dc:	80 91 6f 02 	lds	r24, 0x026F
    15e0:	8b 83       	std	Y+3, r24	; 0x03
                    msg.msg[2] = comsData[3];
    15e2:	80 91 70 02 	lds	r24, 0x0270
    15e6:	8c 83       	std	Y+4, r24	; 0x04
                    msg.msg[3] = comsData[4];
    15e8:	80 91 71 02 	lds	r24, 0x0271
    15ec:	8d 83       	std	Y+5, r24	; 0x05
                    msg.msg[4] = comsData[5];
    15ee:	80 91 72 02 	lds	r24, 0x0272
    15f2:	8e 83       	std	Y+6, r24	; 0x06
                    msg.msg[5] = comsData[6];
    15f4:	80 91 73 02 	lds	r24, 0x0273
    15f8:	8f 83       	std	Y+7, r24	; 0x07
                    msg.msg[6] = comsData[7];
    15fa:	80 91 74 02 	lds	r24, 0x0274
    15fe:	88 87       	std	Y+8, r24	; 0x08
                    coms_Clear(COMS_WRITE_TIME_SIZE);
    1600:	88 e0       	ldi	r24, 0x08	; 8
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
                }
                break;
    1608:	bd c0       	rjmp	.+378    	; 0x1784 <coms_Poll+0x2fe>

            case COMS_READ_CONFIG_IN:
                if (comsSize >= COMS_READ_CONFIG_SIZE)
    160a:	80 91 81 02 	lds	r24, 0x0281
    160e:	90 91 82 02 	lds	r25, 0x0282
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	0c f4       	brge	.+2      	; 0x161a <coms_Poll+0x194>
    1618:	ac c0       	rjmp	.+344    	; 0x1772 <coms_Poll+0x2ec>
                {
                    msg.type = READ_CONFIG;
    161a:	85 e0       	ldi	r24, 0x05	; 5
    161c:	89 83       	std	Y+1, r24	; 0x01
                    msg.msg[0] = comsData[1];
    161e:	80 91 6e 02 	lds	r24, 0x026E
    1622:	8a 83       	std	Y+2, r24	; 0x02
                    msg.msg[1] = comsData[2];
    1624:	80 91 6f 02 	lds	r24, 0x026F
    1628:	8b 83       	std	Y+3, r24	; 0x03
                    coms_Clear(COMS_READ_CONFIG_SIZE);
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
                }
                break;
    1632:	a8 c0       	rjmp	.+336    	; 0x1784 <coms_Poll+0x2fe>

            case COMS_WRITE_CONFIG_IN:
                if (comsSize >= COMS_WRITE_CONFIG_SIZE)
    1634:	80 91 81 02 	lds	r24, 0x0281
    1638:	90 91 82 02 	lds	r25, 0x0282
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	91 05       	cpc	r25, r1
    1640:	0c f4       	brge	.+2      	; 0x1644 <coms_Poll+0x1be>
    1642:	99 c0       	rjmp	.+306    	; 0x1776 <coms_Poll+0x2f0>
                {
                    msg.type = WRITE_CONFIG;
    1644:	87 e0       	ldi	r24, 0x07	; 7
    1646:	89 83       	std	Y+1, r24	; 0x01
                    msg.msg[0] = comsData[1];
    1648:	80 91 6e 02 	lds	r24, 0x026E
    164c:	8a 83       	std	Y+2, r24	; 0x02
                    msg.msg[1] = comsData[2];
    164e:	80 91 6f 02 	lds	r24, 0x026F
    1652:	8b 83       	std	Y+3, r24	; 0x03
                    msg.msg[2] = comsData[3];
    1654:	80 91 70 02 	lds	r24, 0x0270
    1658:	8c 83       	std	Y+4, r24	; 0x04
                    coms_Clear(COMS_WRITE_CONFIG_SIZE);
    165a:	84 e0       	ldi	r24, 0x04	; 4
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
                }
                break;
    1662:	90 c0       	rjmp	.+288    	; 0x1784 <coms_Poll+0x2fe>

            case COMS_LIVE_DATA_IN:
                msg.type = LIVE_DATA;
    1664:	88 e0       	ldi	r24, 0x08	; 8
    1666:	89 83       	std	Y+1, r24	; 0x01
                coms_Clear(COMS_LIVE_DATA_SIZE);
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
                break;
    1670:	89 c0       	rjmp	.+274    	; 0x1784 <coms_Poll+0x2fe>

            case COMS_HEADER_REQ_IN:
                msg.type = HEADER_REQ;
    1672:	89 e0       	ldi	r24, 0x09	; 9
    1674:	89 83       	std	Y+1, r24	; 0x01
                coms_Clear(COMS_HEADER_REQ_SIZE);
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
                break;
    167e:	82 c0       	rjmp	.+260    	; 0x1784 <coms_Poll+0x2fe>

            case COMS_RESET_REQ_IN:
                if (comsSize >= COMS_RESET_REQ_SIZE)
    1680:	80 91 81 02 	lds	r24, 0x0281
    1684:	90 91 82 02 	lds	r25, 0x0282
    1688:	88 30       	cpi	r24, 0x08	; 8
    168a:	91 05       	cpc	r25, r1
    168c:	0c f4       	brge	.+2      	; 0x1690 <coms_Poll+0x20a>
    168e:	75 c0       	rjmp	.+234    	; 0x177a <coms_Poll+0x2f4>
                {
                    msg.type = RESET_REQ;
    1690:	8a e0       	ldi	r24, 0x0A	; 10
    1692:	89 83       	std	Y+1, r24	; 0x01
                    msg.msg[0] = comsData[1];
    1694:	80 91 6e 02 	lds	r24, 0x026E
    1698:	8a 83       	std	Y+2, r24	; 0x02
                    msg.msg[1] = comsData[2];
    169a:	80 91 6f 02 	lds	r24, 0x026F
    169e:	8b 83       	std	Y+3, r24	; 0x03
                    msg.msg[2] = comsData[3];
    16a0:	80 91 70 02 	lds	r24, 0x0270
    16a4:	8c 83       	std	Y+4, r24	; 0x04
                    msg.msg[3] = comsData[4];
    16a6:	80 91 71 02 	lds	r24, 0x0271
    16aa:	8d 83       	std	Y+5, r24	; 0x05
                    msg.msg[4] = comsData[5];
    16ac:	80 91 72 02 	lds	r24, 0x0272
    16b0:	8e 83       	std	Y+6, r24	; 0x06
                    msg.msg[5] = comsData[6];
    16b2:	80 91 73 02 	lds	r24, 0x0273
    16b6:	8f 83       	std	Y+7, r24	; 0x07
                    msg.msg[6] = comsData[7];
    16b8:	80 91 74 02 	lds	r24, 0x0274
    16bc:	88 87       	std	Y+8, r24	; 0x08
                    coms_Clear(COMS_RESET_REQ_SIZE);
    16be:	88 e0       	ldi	r24, 0x08	; 8
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
                }
                break;
    16c6:	5e c0       	rjmp	.+188    	; 0x1784 <coms_Poll+0x2fe>

            case COMS_ERASE_REQ_IN:
                if (comsSize >= COMS_ERASE_REQ_SIZE)
    16c8:	80 91 81 02 	lds	r24, 0x0281
    16cc:	90 91 82 02 	lds	r25, 0x0282
    16d0:	88 30       	cpi	r24, 0x08	; 8
    16d2:	91 05       	cpc	r25, r1
    16d4:	0c f4       	brge	.+2      	; 0x16d8 <coms_Poll+0x252>
    16d6:	53 c0       	rjmp	.+166    	; 0x177e <coms_Poll+0x2f8>
                {
                    msg.type = ERASE_REQ;
    16d8:	8b e0       	ldi	r24, 0x0B	; 11
    16da:	89 83       	std	Y+1, r24	; 0x01
                    msg.msg[0] = comsData[1];
    16dc:	80 91 6e 02 	lds	r24, 0x026E
    16e0:	8a 83       	std	Y+2, r24	; 0x02
                    msg.msg[1] = comsData[2];
    16e2:	80 91 6f 02 	lds	r24, 0x026F
    16e6:	8b 83       	std	Y+3, r24	; 0x03
                    msg.msg[2] = comsData[3];
    16e8:	80 91 70 02 	lds	r24, 0x0270
    16ec:	8c 83       	std	Y+4, r24	; 0x04
                    msg.msg[3] = comsData[4];
    16ee:	80 91 71 02 	lds	r24, 0x0271
    16f2:	8d 83       	std	Y+5, r24	; 0x05
                    msg.msg[4] = comsData[5];
    16f4:	80 91 72 02 	lds	r24, 0x0272
    16f8:	8e 83       	std	Y+6, r24	; 0x06
                    msg.msg[5] = comsData[6];
    16fa:	80 91 73 02 	lds	r24, 0x0273
    16fe:	8f 83       	std	Y+7, r24	; 0x07
                    msg.msg[6] = comsData[7];
    1700:	80 91 74 02 	lds	r24, 0x0274
    1704:	88 87       	std	Y+8, r24	; 0x08
                    coms_Clear(COMS_ERASE_REQ_SIZE);
    1706:	88 e0       	ldi	r24, 0x08	; 8
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
                }
                break;
    170e:	3a c0       	rjmp	.+116    	; 0x1784 <coms_Poll+0x2fe>

            case COMS_START_REQ_IN:
                if (comsSize >= COMS_START_REQ_SIZE)
    1710:	80 91 81 02 	lds	r24, 0x0281
    1714:	90 91 82 02 	lds	r25, 0x0282
    1718:	88 30       	cpi	r24, 0x08	; 8
    171a:	91 05       	cpc	r25, r1
    171c:	94 f1       	brlt	.+100    	; 0x1782 <coms_Poll+0x2fc>
                {
                    msg.type = START_REQ;
    171e:	8c e0       	ldi	r24, 0x0C	; 12
    1720:	89 83       	std	Y+1, r24	; 0x01
                    msg.msg[0] = comsData[1];
    1722:	80 91 6e 02 	lds	r24, 0x026E
    1726:	8a 83       	std	Y+2, r24	; 0x02
                    msg.msg[1] = comsData[2];
    1728:	80 91 6f 02 	lds	r24, 0x026F
    172c:	8b 83       	std	Y+3, r24	; 0x03
                    msg.msg[2] = comsData[3];
    172e:	80 91 70 02 	lds	r24, 0x0270
    1732:	8c 83       	std	Y+4, r24	; 0x04
                    msg.msg[3] = comsData[4];
    1734:	80 91 71 02 	lds	r24, 0x0271
    1738:	8d 83       	std	Y+5, r24	; 0x05
                    msg.msg[4] = comsData[5];
    173a:	80 91 72 02 	lds	r24, 0x0272
    173e:	8e 83       	std	Y+6, r24	; 0x06
                    msg.msg[5] = comsData[6];
    1740:	80 91 73 02 	lds	r24, 0x0273
    1744:	8f 83       	std	Y+7, r24	; 0x07
                    msg.msg[6] = comsData[7];
    1746:	80 91 74 02 	lds	r24, 0x0274
    174a:	88 87       	std	Y+8, r24	; 0x08
                    coms_Clear(COMS_START_REQ_SIZE);
    174c:	88 e0       	ldi	r24, 0x08	; 8
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
                }
                break;
    1754:	17 c0       	rjmp	.+46     	; 0x1784 <coms_Poll+0x2fe>

            default:
                msg.type = BAD;
    1756:	82 e0       	ldi	r24, 0x02	; 2
    1758:	89 83       	std	Y+1, r24	; 0x01
                msg.msg[0] = comsData[0];
    175a:	80 91 6d 02 	lds	r24, 0x026D
    175e:	8a 83       	std	Y+2, r24	; 0x02
                coms_Clear(1);
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 de 0b 	call	0x17bc	; 0x17bc <coms_Clear>
                break;
    1768:	0d c0       	rjmp	.+26     	; 0x1784 <coms_Poll+0x2fe>
                    msg.msg[3] = comsData[4];
                    msg.msg[4] = comsData[5];
                    msg.msg[5] = comsData[6];
                    coms_Clear(COMS_READ_FLASH_PAGE_SIZE);
                }
                break;
    176a:	00 00       	nop
    176c:	0b c0       	rjmp	.+22     	; 0x1784 <coms_Poll+0x2fe>
                    msg.msg[4] = comsData[5];
                    msg.msg[5] = comsData[6];
                    msg.msg[6] = comsData[7];
                    coms_Clear(COMS_WRITE_TIME_SIZE);
                }
                break;
    176e:	00 00       	nop
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <coms_Poll+0x2fe>
                    msg.type = READ_CONFIG;
                    msg.msg[0] = comsData[1];
                    msg.msg[1] = comsData[2];
                    coms_Clear(COMS_READ_CONFIG_SIZE);
                }
                break;
    1772:	00 00       	nop
    1774:	07 c0       	rjmp	.+14     	; 0x1784 <coms_Poll+0x2fe>
                    msg.msg[0] = comsData[1];
                    msg.msg[1] = comsData[2];
                    msg.msg[2] = comsData[3];
                    coms_Clear(COMS_WRITE_CONFIG_SIZE);
                }
                break;
    1776:	00 00       	nop
    1778:	05 c0       	rjmp	.+10     	; 0x1784 <coms_Poll+0x2fe>
                    msg.msg[4] = comsData[5];
                    msg.msg[5] = comsData[6];
                    msg.msg[6] = comsData[7];
                    coms_Clear(COMS_RESET_REQ_SIZE);
                }
                break;
    177a:	00 00       	nop
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <coms_Poll+0x2fe>
                    msg.msg[4] = comsData[5];
                    msg.msg[5] = comsData[6];
                    msg.msg[6] = comsData[7];
                    coms_Clear(COMS_ERASE_REQ_SIZE);
                }
                break;
    177e:	00 00       	nop
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <coms_Poll+0x2fe>
                    msg.msg[4] = comsData[5];
                    msg.msg[5] = comsData[6];
                    msg.msg[6] = comsData[7];
                    coms_Clear(COMS_START_REQ_SIZE);
                }
                break;
    1782:	00 00       	nop
                coms_Clear(1);
                break;
        }
    }

    sei();
    1784:	78 94       	sei

    return msg;
    1786:	c8 01       	movw	r24, r16
    1788:	9e 01       	movw	r18, r28
    178a:	2f 5f       	subi	r18, 0xFF	; 255
    178c:	3f 4f       	sbci	r19, 0xFF	; 255
    178e:	49 e0       	ldi	r20, 0x09	; 9
    1790:	f9 01       	movw	r30, r18
    1792:	00 80       	ld	r0, Z
    1794:	2f 5f       	subi	r18, 0xFF	; 255
    1796:	3f 4f       	sbci	r19, 0xFF	; 255
    1798:	fc 01       	movw	r30, r24
    179a:	00 82       	st	Z, r0
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	41 50       	subi	r20, 0x01	; 1
    17a0:	44 23       	and	r20, r20
    17a2:	b1 f7       	brne	.-20     	; 0x1790 <coms_Poll+0x30a>
}
    17a4:	c8 01       	movw	r24, r16
    17a6:	29 96       	adiw	r28, 0x09	; 9
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	08 95       	ret

000017bc <coms_Clear>:
 * cleared cells are nulled and placed in the back.
 *
 * @param num The number of bytes to clear.
 */
void coms_Clear(int num)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <coms_Clear+0x6>
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <coms_Clear+0x8>
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <coms_Clear+0xa>
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	9e 83       	std	Y+6, r25	; 0x06
    17cc:	8d 83       	std	Y+5, r24	; 0x05
    int i, j;
    for (i = num, j = 0; i < COMS_BUFFER_SIZE; i++, j++)
    17ce:	8d 81       	ldd	r24, Y+5	; 0x05
    17d0:	9e 81       	ldd	r25, Y+6	; 0x06
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	1c 82       	std	Y+4, r1	; 0x04
    17d8:	1b 82       	std	Y+3, r1	; 0x03
    17da:	16 c0       	rjmp	.+44     	; 0x1808 <coms_Clear+0x4c>
    {
        comsData[j] = comsData[i];
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	83 59       	subi	r24, 0x93	; 147
    17e2:	9d 4f       	sbci	r25, 0xFD	; 253
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 81       	ld	r18, Z
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	9c 81       	ldd	r25, Y+4	; 0x04
    17ec:	83 59       	subi	r24, 0x93	; 147
    17ee:	9d 4f       	sbci	r25, 0xFD	; 253
    17f0:	fc 01       	movw	r30, r24
    17f2:	20 83       	st	Z, r18
 * @param num The number of bytes to clear.
 */
void coms_Clear(int num)
{
    int i, j;
    for (i = num, j = 0; i < COMS_BUFFER_SIZE; i++, j++)
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	9a 83       	std	Y+2, r25	; 0x02
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	84 31       	cpi	r24, 0x14	; 20
    180e:	91 05       	cpc	r25, r1
    1810:	2c f3       	brlt	.-54     	; 0x17dc <coms_Clear+0x20>
    {
        comsData[j] = comsData[i];
    }

    for (; j < COMS_BUFFER_SIZE; j++) comsData[j] = 0xA3;
    1812:	0c c0       	rjmp	.+24     	; 0x182c <coms_Clear+0x70>
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	83 59       	subi	r24, 0x93	; 147
    181a:	9d 4f       	sbci	r25, 0xFD	; 253
    181c:	23 ea       	ldi	r18, 0xA3	; 163
    181e:	fc 01       	movw	r30, r24
    1820:	20 83       	st	Z, r18
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	84 31       	cpi	r24, 0x14	; 20
    1832:	91 05       	cpc	r25, r1
    1834:	7c f3       	brlt	.-34     	; 0x1814 <coms_Clear+0x58>
    comsSize -= num;
    1836:	20 91 81 02 	lds	r18, 0x0281
    183a:	30 91 82 02 	lds	r19, 0x0282
    183e:	8d 81       	ldd	r24, Y+5	; 0x05
    1840:	9e 81       	ldd	r25, Y+6	; 0x06
    1842:	a9 01       	movw	r20, r18
    1844:	48 1b       	sub	r20, r24
    1846:	59 0b       	sbc	r21, r25
    1848:	ca 01       	movw	r24, r20
    184a:	90 93 82 02 	sts	0x0282, r25
    184e:	80 93 81 02 	sts	0x0281, r24
}
    1852:	26 96       	adiw	r28, 0x06	; 6
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <coms_Handle>:
 *
 * @param runData The runData state of the program. This is
 * required so the record and livedata flags can be switched.
 */
void coms_Handle(RunData *runData)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	a1 97       	sbiw	r28, 0x21	; 33
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	f8 94       	cli
    1872:	de bf       	out	0x3e, r29	; 62
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	cd bf       	out	0x3d, r28	; 61
    1878:	99 a3       	std	Y+33, r25	; 0x21
    187a:	88 a3       	std	Y+32, r24	; 0x20
    ComsMsg msg = coms_Poll();
    187c:	ce 01       	movw	r24, r28
    187e:	08 96       	adiw	r24, 0x08	; 8
    1880:	0e 94 43 0a 	call	0x1486	; 0x1486 <coms_Poll>
    bool valid = true;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	89 83       	std	Y+1, r24	; 0x01
    int i;

    switch (msg.type)
    1888:	88 85       	ldd	r24, Y+8	; 0x08
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	86 30       	cpi	r24, 0x06	; 6
    1890:	91 05       	cpc	r25, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <coms_Handle+0x32>
    1894:	9c c0       	rjmp	.+312    	; 0x19ce <coms_Handle+0x16a>
    1896:	87 30       	cpi	r24, 0x07	; 7
    1898:	91 05       	cpc	r25, r1
    189a:	84 f4       	brge	.+32     	; 0x18bc <coms_Handle+0x58>
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	91 05       	cpc	r25, r1
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <coms_Handle+0x40>
    18a2:	b3 c1       	rjmp	.+870    	; 0x1c0a <coms_Handle+0x3a6>
    18a4:	83 30       	cpi	r24, 0x03	; 3
    18a6:	91 05       	cpc	r25, r1
    18a8:	0c f4       	brge	.+2      	; 0x18ac <coms_Handle+0x48>
    18aa:	b1 c1       	rjmp	.+866    	; 0x1c0e <coms_Handle+0x3aa>
    18ac:	84 30       	cpi	r24, 0x04	; 4
    18ae:	91 05       	cpc	r25, r1
    18b0:	b9 f1       	breq	.+110    	; 0x1920 <coms_Handle+0xbc>
    18b2:	85 30       	cpi	r24, 0x05	; 5
    18b4:	91 05       	cpc	r25, r1
    18b6:	0c f0       	brlt	.+2      	; 0x18ba <coms_Handle+0x56>
    18b8:	a9 c0       	rjmp	.+338    	; 0x1a0c <coms_Handle+0x1a8>
    18ba:	1d c0       	rjmp	.+58     	; 0x18f6 <coms_Handle+0x92>
    18bc:	89 30       	cpi	r24, 0x09	; 9
    18be:	91 05       	cpc	r25, r1
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <coms_Handle+0x60>
    18c2:	e7 c0       	rjmp	.+462    	; 0x1a92 <coms_Handle+0x22e>
    18c4:	8a 30       	cpi	r24, 0x0A	; 10
    18c6:	91 05       	cpc	r25, r1
    18c8:	4c f4       	brge	.+18     	; 0x18dc <coms_Handle+0x78>
    18ca:	87 30       	cpi	r24, 0x07	; 7
    18cc:	91 05       	cpc	r25, r1
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <coms_Handle+0x6e>
    18d0:	b7 c0       	rjmp	.+366    	; 0x1a40 <coms_Handle+0x1dc>
    18d2:	88 30       	cpi	r24, 0x08	; 8
    18d4:	91 05       	cpc	r25, r1
    18d6:	09 f4       	brne	.+2      	; 0x18da <coms_Handle+0x76>
    18d8:	ce c0       	rjmp	.+412    	; 0x1a76 <coms_Handle+0x212>
    18da:	9c c1       	rjmp	.+824    	; 0x1c14 <coms_Handle+0x3b0>
    18dc:	8b 30       	cpi	r24, 0x0B	; 11
    18de:	91 05       	cpc	r25, r1
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <coms_Handle+0x80>
    18e2:	31 c1       	rjmp	.+610    	; 0x1b46 <coms_Handle+0x2e2>
    18e4:	8b 30       	cpi	r24, 0x0B	; 11
    18e6:	91 05       	cpc	r25, r1
    18e8:	0c f4       	brge	.+2      	; 0x18ec <coms_Handle+0x88>
    18ea:	fa c0       	rjmp	.+500    	; 0x1ae0 <coms_Handle+0x27c>
    18ec:	8c 30       	cpi	r24, 0x0C	; 12
    18ee:	91 05       	cpc	r25, r1
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <coms_Handle+0x90>
    18f2:	56 c1       	rjmp	.+684    	; 0x1ba0 <coms_Handle+0x33c>
    18f4:	8f c1       	rjmp	.+798    	; 0x1c14 <coms_Handle+0x3b0>
        case OVERFLOW:
            //ignore - stub for debug
            break;

        case VERIFY:
            runData->record = false;
    18f6:	88 a1       	ldd	r24, Y+32	; 0x20
    18f8:	99 a1       	ldd	r25, Y+33	; 0x21
    18fa:	fc 01       	movw	r30, r24
    18fc:	10 82       	st	Z, r1
            runData->liveData = false;
    18fe:	88 a1       	ldd	r24, Y+32	; 0x20
    1900:	99 a1       	ldd	r25, Y+33	; 0x21
    1902:	fc 01       	movw	r30, r24
    1904:	11 82       	std	Z+1, r1	; 0x01
            usart_Write(SERIAL, COMS_VERIFY_OUT);
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	62 e0       	ldi	r22, 0x02	; 2
    190a:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
            usart_Write(SERIAL, COMS_VERIFY_MAJOR_VERSION);
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	66 e0       	ldi	r22, 0x06	; 6
    1912:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
            usart_Write(SERIAL, COMS_VERIFY_MINOR_VERSION);
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	65 e0       	ldi	r22, 0x05	; 5
    191a:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
            break;
    191e:	7a c1       	rjmp	.+756    	; 0x1c14 <coms_Handle+0x3b0>

        case READ_FLASH:
            ;
            uint32_t addr = ((uint32_t)msg.msg[0] << 16) + ((uint32_t)msg.msg[1] << 8) + msg.msg[2];
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a0 e0       	ldi	r26, 0x00	; 0
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	ac 01       	movw	r20, r24
    192c:	33 27       	eor	r19, r19
    192e:	22 27       	eor	r18, r18
    1930:	8a 85       	ldd	r24, Y+10	; 0x0a
    1932:	88 2f       	mov	r24, r24
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	ba 2f       	mov	r27, r26
    193c:	a9 2f       	mov	r26, r25
    193e:	98 2f       	mov	r25, r24
    1940:	88 27       	eor	r24, r24
    1942:	28 0f       	add	r18, r24
    1944:	39 1f       	adc	r19, r25
    1946:	4a 1f       	adc	r20, r26
    1948:	5b 1f       	adc	r21, r27
    194a:	8b 85       	ldd	r24, Y+11	; 0x0b
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e0       	ldi	r26, 0x00	; 0
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	82 0f       	add	r24, r18
    1956:	93 1f       	adc	r25, r19
    1958:	a4 1f       	adc	r26, r20
    195a:	b5 1f       	adc	r27, r21
    195c:	89 8b       	std	Y+17, r24	; 0x11
    195e:	9a 8b       	std	Y+18, r25	; 0x12
    1960:	ab 8b       	std	Y+19, r26	; 0x13
    1962:	bc 8b       	std	Y+20, r27	; 0x14
            uint32_t size = ((uint32_t)msg.msg[3] << 16) + ((uint32_t)msg.msg[4] << 8) + msg.msg[5];
    1964:	8c 85       	ldd	r24, Y+12	; 0x0c
    1966:	88 2f       	mov	r24, r24
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	a0 e0       	ldi	r26, 0x00	; 0
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	ac 01       	movw	r20, r24
    1970:	33 27       	eor	r19, r19
    1972:	22 27       	eor	r18, r18
    1974:	8d 85       	ldd	r24, Y+13	; 0x0d
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	a0 e0       	ldi	r26, 0x00	; 0
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ba 2f       	mov	r27, r26
    1980:	a9 2f       	mov	r26, r25
    1982:	98 2f       	mov	r25, r24
    1984:	88 27       	eor	r24, r24
    1986:	28 0f       	add	r18, r24
    1988:	39 1f       	adc	r19, r25
    198a:	4a 1f       	adc	r20, r26
    198c:	5b 1f       	adc	r21, r27
    198e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 e0       	ldi	r26, 0x00	; 0
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	82 0f       	add	r24, r18
    199a:	93 1f       	adc	r25, r19
    199c:	a4 1f       	adc	r26, r20
    199e:	b5 1f       	adc	r27, r21
    19a0:	8c 83       	std	Y+4, r24	; 0x04
    19a2:	9d 83       	std	Y+5, r25	; 0x05
    19a4:	ae 83       	std	Y+6, r26	; 0x06
    19a6:	bf 83       	std	Y+7, r27	; 0x07

            runData->record = false;
    19a8:	88 a1       	ldd	r24, Y+32	; 0x20
    19aa:	99 a1       	ldd	r25, Y+33	; 0x21
    19ac:	fc 01       	movw	r30, r24
    19ae:	10 82       	st	Z, r1
            runData->liveData = false;
    19b0:	88 a1       	ldd	r24, Y+32	; 0x20
    19b2:	99 a1       	ldd	r25, Y+33	; 0x21
    19b4:	fc 01       	movw	r30, r24
    19b6:	11 82       	std	Z+1, r1	; 0x01
            sst_Read_To_Coms((char*)&addr, size);
    19b8:	ce 01       	movw	r24, r28
    19ba:	41 96       	adiw	r24, 0x11	; 17
    19bc:	2c 81       	ldd	r18, Y+4	; 0x04
    19be:	3d 81       	ldd	r19, Y+5	; 0x05
    19c0:	4e 81       	ldd	r20, Y+6	; 0x06
    19c2:	5f 81       	ldd	r21, Y+7	; 0x07
    19c4:	ba 01       	movw	r22, r20
    19c6:	a9 01       	movw	r20, r18
    19c8:	0e 94 88 23 	call	0x4710	; 0x4710 <sst_Read_To_Coms>

            break;
    19cc:	23 c1       	rjmp	.+582    	; 0x1c14 <coms_Handle+0x3b0>

        case WRITE_TIME:
            ;
            Time t;

            runData->record = false;
    19ce:	88 a1       	ldd	r24, Y+32	; 0x20
    19d0:	99 a1       	ldd	r25, Y+33	; 0x21
    19d2:	fc 01       	movw	r30, r24
    19d4:	10 82       	st	Z, r1
            runData->liveData = false;
    19d6:	88 a1       	ldd	r24, Y+32	; 0x20
    19d8:	99 a1       	ldd	r25, Y+33	; 0x21
    19da:	fc 01       	movw	r30, r24
    19dc:	11 82       	std	Z+1, r1	; 0x01

            t.seconds = msg.msg[0];
    19de:	89 85       	ldd	r24, Y+9	; 0x09
    19e0:	8d 8b       	std	Y+21, r24	; 0x15
            t.minutes = msg.msg[1];
    19e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    19e4:	8e 8b       	std	Y+22, r24	; 0x16
            t.hours   = msg.msg[2];
    19e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    19e8:	8f 8b       	std	Y+23, r24	; 0x17
            t.dow     = msg.msg[3];
    19ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    19ec:	88 8f       	std	Y+24, r24	; 0x18
            t.date    = msg.msg[4];
    19ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f0:	89 8f       	std	Y+25, r24	; 0x19
            t.month   = msg.msg[5];
    19f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    19f4:	8a 8f       	std	Y+26, r24	; 0x1a
            t.year    = msg.msg[6];
    19f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f8:	8b 8f       	std	Y+27, r24	; 0x1b

            rtc_Set_Time(&t);
    19fa:	ce 01       	movw	r24, r28
    19fc:	45 96       	adiw	r24, 0x15	; 21
    19fe:	0e 94 0d 1b 	call	0x361a	; 0x361a <rtc_Set_Time>

            usart_Write(SERIAL, COMS_WRITE_TIME_OUT);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	66 e0       	ldi	r22, 0x06	; 6
    1a06:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
            break;
    1a0a:	04 c1       	rjmp	.+520    	; 0x1c14 <coms_Handle+0x3b0>

        case READ_CONFIG:
            runData->record = false;
    1a0c:	88 a1       	ldd	r24, Y+32	; 0x20
    1a0e:	99 a1       	ldd	r25, Y+33	; 0x21
    1a10:	fc 01       	movw	r30, r24
    1a12:	10 82       	st	Z, r1
            runData->liveData = false;
    1a14:	88 a1       	ldd	r24, Y+32	; 0x20
    1a16:	99 a1       	ldd	r25, Y+33	; 0x21
    1a18:	fc 01       	movw	r30, r24
    1a1a:	11 82       	std	Z+1, r1	; 0x01
            usart_Write(SERIAL, data_Read_EEPROM((msg.msg[0] << 8) + msg.msg[1]));
    1a1c:	89 85       	ldd	r24, Y+9	; 0x09
    1a1e:	88 2f       	mov	r24, r24
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	38 2f       	mov	r19, r24
    1a24:	22 27       	eor	r18, r18
    1a26:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	82 0f       	add	r24, r18
    1a2e:	93 1f       	adc	r25, r19
    1a30:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    1a34:	98 2f       	mov	r25, r24
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	69 2f       	mov	r22, r25
    1a3a:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
            break;
    1a3e:	ea c0       	rjmp	.+468    	; 0x1c14 <coms_Handle+0x3b0>

        case WRITE_CONFIG:
            runData->record = false;
    1a40:	88 a1       	ldd	r24, Y+32	; 0x20
    1a42:	99 a1       	ldd	r25, Y+33	; 0x21
    1a44:	fc 01       	movw	r30, r24
    1a46:	10 82       	st	Z, r1
            runData->liveData = false;
    1a48:	88 a1       	ldd	r24, Y+32	; 0x20
    1a4a:	99 a1       	ldd	r25, Y+33	; 0x21
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	11 82       	std	Z+1, r1	; 0x01
            data_Write_EEPROM((msg.msg[0] << 8) + msg.msg[1], msg.msg[2]);
    1a50:	89 85       	ldd	r24, Y+9	; 0x09
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	38 2f       	mov	r19, r24
    1a58:	22 27       	eor	r18, r18
    1a5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	82 0f       	add	r24, r18
    1a62:	93 1f       	adc	r25, r19
    1a64:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a66:	62 2f       	mov	r22, r18
    1a68:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
            usart_Write(SERIAL, COMS_WRITE_CONFIG_OUT);
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	6a e0       	ldi	r22, 0x0A	; 10
    1a70:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
            break;
    1a74:	cf c0       	rjmp	.+414    	; 0x1c14 <coms_Handle+0x3b0>

        case LIVE_DATA:
            runData->record = false;
    1a76:	88 a1       	ldd	r24, Y+32	; 0x20
    1a78:	99 a1       	ldd	r25, Y+33	; 0x21
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	10 82       	st	Z, r1
            runData->liveData = true;
    1a7e:	88 a1       	ldd	r24, Y+32	; 0x20
    1a80:	99 a1       	ldd	r25, Y+33	; 0x21
    1a82:	21 e0       	ldi	r18, 0x01	; 1
    1a84:	fc 01       	movw	r30, r24
    1a86:	21 83       	std	Z+1, r18	; 0x01

            usart_Write(SERIAL, COMS_LIVE_DATA_OUT);
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	6c e0       	ldi	r22, 0x0C	; 12
    1a8c:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>

            break;
    1a90:	c1 c0       	rjmp	.+386    	; 0x1c14 <coms_Handle+0x3b0>

        case HEADER_REQ:
            ;
            uint32_t header = data_Cur_Addr();
    1a92:	0e 94 9d 10 	call	0x213a	; 0x213a <data_Cur_Addr>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8c 8f       	std	Y+28, r24	; 0x1c
    1a9c:	9d 8f       	std	Y+29, r25	; 0x1d
    1a9e:	ae 8f       	std	Y+30, r26	; 0x1e
    1aa0:	bf 8f       	std	Y+31, r27	; 0x1f

            usart_Write(SERIAL, ((char*)(&header))[2]);
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	4c 96       	adiw	r24, 0x1c	; 28
    1aa6:	02 96       	adiw	r24, 0x02	; 2
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	90 81       	ld	r25, Z
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	69 2f       	mov	r22, r25
    1ab0:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
            usart_Write(SERIAL, ((char*)(&header))[1]);
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	4c 96       	adiw	r24, 0x1c	; 28
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	fc 01       	movw	r30, r24
    1abc:	90 81       	ld	r25, Z
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	69 2f       	mov	r22, r25
    1ac2:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
            usart_Write(SERIAL, ((char*)(&header))[0]);
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	4c 96       	adiw	r24, 0x1c	; 28
    1aca:	fc 01       	movw	r30, r24
    1acc:	90 81       	ld	r25, Z
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	69 2f       	mov	r22, r25
    1ad2:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
            usart_Write(SERIAL, sizeof(DataPoint));
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	60 e2       	ldi	r22, 0x20	; 32
    1ada:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
            break;
    1ade:	9a c0       	rjmp	.+308    	; 0x1c14 <coms_Handle+0x3b0>
        case RESET_REQ:
            for (i = 0; i < COMS_RESET_REQ_SIZE; i++)
    1ae0:	1b 82       	std	Y+3, r1	; 0x03
    1ae2:	1a 82       	std	Y+2, r1	; 0x02
    1ae4:	1b c0       	rjmp	.+54     	; 0x1b1c <coms_Handle+0x2b8>
            {
                if (msg.msg[i] != resetConfirmation[i])
    1ae6:	9e 01       	movw	r18, r28
    1ae8:	27 5f       	subi	r18, 0xF7	; 247
    1aea:	3f 4f       	sbci	r19, 0xFF	; 255
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	9b 81       	ldd	r25, Y+3	; 0x03
    1af0:	82 0f       	add	r24, r18
    1af2:	93 1f       	adc	r25, r19
    1af4:	fc 01       	movw	r30, r24
    1af6:	40 81       	ld	r20, Z
    1af8:	20 91 0d 01 	lds	r18, 0x010D
    1afc:	30 91 0e 01 	lds	r19, 0x010E
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	9b 81       	ldd	r25, Y+3	; 0x03
    1b04:	82 0f       	add	r24, r18
    1b06:	93 1f       	adc	r25, r19
    1b08:	fc 01       	movw	r30, r24
    1b0a:	80 81       	ld	r24, Z
    1b0c:	48 17       	cp	r20, r24
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <coms_Handle+0x2ae>
                {
                    valid = false;
    1b10:	19 82       	std	Y+1, r1	; 0x01
            usart_Write(SERIAL, ((char*)(&header))[1]);
            usart_Write(SERIAL, ((char*)(&header))[0]);
            usart_Write(SERIAL, sizeof(DataPoint));
            break;
        case RESET_REQ:
            for (i = 0; i < COMS_RESET_REQ_SIZE; i++)
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	9b 81       	ldd	r25, Y+3	; 0x03
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	9b 83       	std	Y+3, r25	; 0x03
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b20:	88 30       	cpi	r24, 0x08	; 8
    1b22:	91 05       	cpc	r25, r1
    1b24:	04 f3       	brlt	.-64     	; 0x1ae6 <coms_Handle+0x282>
                {
                    valid = false;
                }
            }

            if (valid)
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	88 23       	and	r24, r24
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <coms_Handle+0x2ca>
    1b2c:	72 c0       	rjmp	.+228    	; 0x1c12 <coms_Handle+0x3ae>
            {
                wdt_enable(WDTO_120MS);
    1b2e:	88 e1       	ldi	r24, 0x18	; 24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	2b e0       	ldi	r18, 0x0B	; 11
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	a8 95       	wdr
    1b3a:	80 93 60 00 	sts	0x0060, r24
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	20 93 60 00 	sts	0x0060, r18
            }

            break;
    1b44:	67 c0       	rjmp	.+206    	; 0x1c14 <coms_Handle+0x3b0>

        case ERASE_REQ:
            for (i = 0; i < COMS_RESET_REQ_SIZE; i++)
    1b46:	1b 82       	std	Y+3, r1	; 0x03
    1b48:	1a 82       	std	Y+2, r1	; 0x02
    1b4a:	1b c0       	rjmp	.+54     	; 0x1b82 <coms_Handle+0x31e>
            {
                if (msg.msg[i] != resetConfirmation[i])
    1b4c:	9e 01       	movw	r18, r28
    1b4e:	27 5f       	subi	r18, 0xF7	; 247
    1b50:	3f 4f       	sbci	r19, 0xFF	; 255
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	9b 81       	ldd	r25, Y+3	; 0x03
    1b56:	82 0f       	add	r24, r18
    1b58:	93 1f       	adc	r25, r19
    1b5a:	fc 01       	movw	r30, r24
    1b5c:	40 81       	ld	r20, Z
    1b5e:	20 91 0d 01 	lds	r18, 0x010D
    1b62:	30 91 0e 01 	lds	r19, 0x010E
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6a:	82 0f       	add	r24, r18
    1b6c:	93 1f       	adc	r25, r19
    1b6e:	fc 01       	movw	r30, r24
    1b70:	80 81       	ld	r24, Z
    1b72:	48 17       	cp	r20, r24
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <coms_Handle+0x314>
                {
                    valid = false;
    1b76:	19 82       	std	Y+1, r1	; 0x01
            }

            break;

        case ERASE_REQ:
            for (i = 0; i < COMS_RESET_REQ_SIZE; i++)
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b7c:	01 96       	adiw	r24, 0x01	; 1
    1b7e:	9b 83       	std	Y+3, r25	; 0x03
    1b80:	8a 83       	std	Y+2, r24	; 0x02
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	9b 81       	ldd	r25, Y+3	; 0x03
    1b86:	88 30       	cpi	r24, 0x08	; 8
    1b88:	91 05       	cpc	r25, r1
    1b8a:	04 f3       	brlt	.-64     	; 0x1b4c <coms_Handle+0x2e8>
                {
                    valid = false;
                }
            }

            if (valid)
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	88 23       	and	r24, r24
    1b90:	11 f0       	breq	.+4      	; 0x1b96 <coms_Handle+0x332>
            {
                data_Clear();
    1b92:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <data_Clear>
            }

            usart_Write(SERIAL, COMS_ERASE_REQ_OUT);
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	62 e1       	ldi	r22, 0x12	; 18
    1b9a:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>

            break;
    1b9e:	3a c0       	rjmp	.+116    	; 0x1c14 <coms_Handle+0x3b0>

        case START_REQ:
            for (i = 0; i < COMS_RESET_REQ_SIZE; i++)
    1ba0:	1b 82       	std	Y+3, r1	; 0x03
    1ba2:	1a 82       	std	Y+2, r1	; 0x02
    1ba4:	1b c0       	rjmp	.+54     	; 0x1bdc <coms_Handle+0x378>
            {
                if (msg.msg[i] != resetConfirmation[i])
    1ba6:	9e 01       	movw	r18, r28
    1ba8:	27 5f       	subi	r18, 0xF7	; 247
    1baa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb0:	82 0f       	add	r24, r18
    1bb2:	93 1f       	adc	r25, r19
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	40 81       	ld	r20, Z
    1bb8:	20 91 0d 01 	lds	r18, 0x010D
    1bbc:	30 91 0e 01 	lds	r19, 0x010E
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc4:	82 0f       	add	r24, r18
    1bc6:	93 1f       	adc	r25, r19
    1bc8:	fc 01       	movw	r30, r24
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 17       	cp	r20, r24
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <coms_Handle+0x36e>
                {
                    valid = false;
    1bd0:	19 82       	std	Y+1, r1	; 0x01
            usart_Write(SERIAL, COMS_ERASE_REQ_OUT);

            break;

        case START_REQ:
            for (i = 0; i < COMS_RESET_REQ_SIZE; i++)
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	9b 83       	std	Y+3, r25	; 0x03
    1bda:	8a 83       	std	Y+2, r24	; 0x02
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	9b 81       	ldd	r25, Y+3	; 0x03
    1be0:	88 30       	cpi	r24, 0x08	; 8
    1be2:	91 05       	cpc	r25, r1
    1be4:	04 f3       	brlt	.-64     	; 0x1ba6 <coms_Handle+0x342>
                {
                    valid = false;
                }
            }

            if (valid)
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	88 23       	and	r24, r24
    1bea:	49 f0       	breq	.+18     	; 0x1bfe <coms_Handle+0x39a>
            {
                runData->record = true;
    1bec:	88 a1       	ldd	r24, Y+32	; 0x20
    1bee:	99 a1       	ldd	r25, Y+33	; 0x21
    1bf0:	21 e0       	ldi	r18, 0x01	; 1
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	20 83       	st	Z, r18
                runData->liveData = false;
    1bf6:	88 a1       	ldd	r24, Y+32	; 0x20
    1bf8:	99 a1       	ldd	r25, Y+33	; 0x21
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	11 82       	std	Z+1, r1	; 0x01
            }

            usart_Write(SERIAL, COMS_START_REQ_OUT);
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	64 e1       	ldi	r22, 0x14	; 20
    1c02:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>

            break;
    1c06:	00 00       	nop
    1c08:	05 c0       	rjmp	.+10     	; 0x1c14 <coms_Handle+0x3b0>
    switch (msg.type)
    {
        case BAD:
        case NONE:
            //Ignore bad coms
            break;
    1c0a:	00 00       	nop
    1c0c:	03 c0       	rjmp	.+6      	; 0x1c14 <coms_Handle+0x3b0>
    1c0e:	00 00       	nop
    1c10:	01 c0       	rjmp	.+2      	; 0x1c14 <coms_Handle+0x3b0>
            if (valid)
            {
                wdt_enable(WDTO_120MS);
            }

            break;
    1c12:	00 00       	nop

            usart_Write(SERIAL, COMS_START_REQ_OUT);

            break;
    }
}
    1c14:	a1 96       	adiw	r28, 0x21	; 33
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <data_Init>:
 * @return Returns 'OK' if previous data was recovered, 'ERROR'
 * if no previous data was found or it was full. In both error
 * cases the previous data is deleted.
 */
status data_Init(void)
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    spi_MasterInit();
    1c2e:	0e 94 c9 21 	call	0x4392	; 0x4392 <spi_MasterInit>
    
    data_Write_EEPROM(DATA_BL_FLAG_ADDR, DATA_FLAG_OFF);
    1c32:	8b ef       	ldi	r24, 0xFB	; 251
    1c34:	93 e0       	ldi	r25, 0x03	; 3
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>

    return data_Recover_Header();
    1c3c:	0e 94 57 0e 	call	0x1cae	; 0x1cae <data_Recover_Header>
}
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <data_Reset_EEPROM>:

/**
 * Resets values stored in EEPROM to thier default state.
 */
void data_Reset_EEPROM()
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    data_Write_EEPROM(DATA_GLOBAL_RATE_ADDR_H, DATA_DEFAULT_GLOBAL_RATE_H);
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	63 e0       	ldi	r22, 0x03	; 3
    1c54:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
    data_Write_EEPROM(DATA_GLOBAL_RATE_ADDR_L, DATA_DEFAULT_GLOBAL_RATE_L);
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	68 ee       	ldi	r22, 0xE8	; 232
    1c5e:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>

    data_Write_EEPROM(DATA_BTA_1_TYPE_ADDR, DATA_DEFAULT_EXT_TYPE);
    1c62:	8c e0       	ldi	r24, 0x0C	; 12
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
    data_Write_EEPROM(DATA_BTA_2_TYPE_ADDR, DATA_DEFAULT_EXT_TYPE);
    1c6c:	8f e0       	ldi	r24, 0x0F	; 15
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>

    data_Write_EEPROM(DATA_MINI_1_TYPE_ADDR, DATA_DEFAULT_EXT_TYPE);
    1c76:	82 e1       	ldi	r24, 0x12	; 18
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	61 e0       	ldi	r22, 0x01	; 1
    1c7c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
    data_Write_EEPROM(DATA_MINI_2_TYPE_ADDR, DATA_DEFAULT_EXT_TYPE);
    1c80:	85 e1       	ldi	r24, 0x15	; 21
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	61 e0       	ldi	r22, 0x01	; 1
    1c86:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>

    data_Write_EEPROM(DATA_GPS_THRESHOLD_ADDR, DATA_DEFAULT_GPS_THRESHOLD);
    1c8a:	86 e1       	ldi	r24, 0x16	; 22
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	65 e0       	ldi	r22, 0x05	; 5
    1c90:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
    
    data_Write_EEPROM(DATA_BT_BAUD_ADDR, DATA_DEFAULT_BT_BAUD);
    1c94:	8d e1       	ldi	r24, 0x1D	; 29
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	64 e0       	ldi	r22, 0x04	; 4
    1c9a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
    data_Write_EEPROM(DATA_BT_FLAG_ADDR, DATA_FLAG_OFF);
    1c9e:	8e e1       	ldi	r24, 0x1E	; 30
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <data_Write_EEPROM>
}
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <data_Recover_Header>:
 * @return Returns 'OK' if an old data head is recovered,
 * otherwise 'ERROR' is returned and the data header is
 * initalized to 0:0.
 */
status data_Recover_Header(void)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	ae 97       	sbiw	r28, 0x2e	; 46
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    static DataPoint endOfData = {-1, 65535, -1, 65535, 65535, -1, -1};
    int i;

    for (i = 0; i < 16; i++)
    1cc2:	1a 82       	std	Y+2, r1	; 0x02
    1cc4:	19 82       	std	Y+1, r1	; 0x01
    1cc6:	0c c0       	rjmp	.+24     	; 0x1ce0 <data_Recover_Header+0x32>
    {
        endOfData.bitpack.rawData[i] = 255;
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	81 5e       	subi	r24, 0xE1	; 225
    1cce:	9e 4f       	sbci	r25, 0xFE	; 254
    1cd0:	2f ef       	ldi	r18, 0xFF	; 255
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	20 83       	st	Z, r18
status data_Recover_Header(void)
{
    static DataPoint endOfData = {-1, 65535, -1, 65535, 65535, -1, -1};
    int i;

    for (i = 0; i < 16; i++)
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	9a 83       	std	Y+2, r25	; 0x02
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	80 31       	cpi	r24, 0x10	; 16
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	7c f3       	brlt	.-34     	; 0x1cc8 <data_Recover_Header+0x1a>
    {
        endOfData.bitpack.rawData[i] = 255;
    }

    curAddr = 0;
    1cea:	10 92 83 02 	sts	0x0283, r1
    1cee:	10 92 84 02 	sts	0x0284, r1
    1cf2:	10 92 85 02 	sts	0x0285, r1
    1cf6:	10 92 86 02 	sts	0x0286, r1

    DataPoint tmp;
    uint32_t max = (MAX_MEM_ADDR / sizeof(DataPoint)) - 1;
    1cfa:	8e ef       	ldi	r24, 0xFE	; 254
    1cfc:	9f ef       	ldi	r25, 0xFF	; 255
    1cfe:	a0 e0       	ldi	r26, 0x00	; 0
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	8b 83       	std	Y+3, r24	; 0x03
    1d04:	9c 83       	std	Y+4, r25	; 0x04
    1d06:	ad 83       	std	Y+5, r26	; 0x05
    1d08:	be 83       	std	Y+6, r27	; 0x06
    uint32_t min = 0;
    1d0a:	1f 82       	std	Y+7, r1	; 0x07
    1d0c:	18 86       	std	Y+8, r1	; 0x08
    1d0e:	19 86       	std	Y+9, r1	; 0x09
    1d10:	1a 86       	std	Y+10, r1	; 0x0a
    uint32_t avg;

    while (max != min)
    1d12:	94 c0       	rjmp	.+296    	; 0x1e3c <data_Recover_Header+0x18e>
    {
        avg = ((max + min) / 2) * sizeof(DataPoint);
    1d14:	2b 81       	ldd	r18, Y+3	; 0x03
    1d16:	3c 81       	ldd	r19, Y+4	; 0x04
    1d18:	4d 81       	ldd	r20, Y+5	; 0x05
    1d1a:	5e 81       	ldd	r21, Y+6	; 0x06
    1d1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d1e:	98 85       	ldd	r25, Y+8	; 0x08
    1d20:	a9 85       	ldd	r26, Y+9	; 0x09
    1d22:	ba 85       	ldd	r27, Y+10	; 0x0a
    1d24:	82 0f       	add	r24, r18
    1d26:	93 1f       	adc	r25, r19
    1d28:	a4 1f       	adc	r26, r20
    1d2a:	b5 1f       	adc	r27, r21
    1d2c:	b6 95       	lsr	r27
    1d2e:	a7 95       	ror	r26
    1d30:	97 95       	ror	r25
    1d32:	87 95       	ror	r24
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	aa 1f       	adc	r26, r26
    1d3a:	bb 1f       	adc	r27, r27
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	aa 1f       	adc	r26, r26
    1d42:	bb 1f       	adc	r27, r27
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	aa 1f       	adc	r26, r26
    1d4a:	bb 1f       	adc	r27, r27
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	aa 1f       	adc	r26, r26
    1d52:	bb 1f       	adc	r27, r27
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	aa 1f       	adc	r26, r26
    1d5a:	bb 1f       	adc	r27, r27
    1d5c:	8b a7       	std	Y+43, r24	; 0x2b
    1d5e:	9c a7       	std	Y+44, r25	; 0x2c
    1d60:	ad a7       	std	Y+45, r26	; 0x2d
    1d62:	be a7       	std	Y+46, r27	; 0x2e

        sst_Read((char*)(&avg), (char*)&tmp, sizeof(DataPoint));
    1d64:	ce 01       	movw	r24, r28
    1d66:	8b 96       	adiw	r24, 0x2b	; 43
    1d68:	9e 01       	movw	r18, r28
    1d6a:	25 5f       	subi	r18, 0xF5	; 245
    1d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6e:	b9 01       	movw	r22, r18
    1d70:	40 e2       	ldi	r20, 0x20	; 32
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	0e 94 1f 23 	call	0x463e	; 0x463e <sst_Read>

        if (data_Compare(&tmp, &endOfData))
    1d78:	ce 01       	movw	r24, r28
    1d7a:	0b 96       	adiw	r24, 0x0b	; 11
    1d7c:	2f e0       	ldi	r18, 0x0F	; 15
    1d7e:	31 e0       	ldi	r19, 0x01	; 1
    1d80:	b9 01       	movw	r22, r18
    1d82:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <data_Compare>
    1d86:	88 23       	and	r24, r24
    1d88:	69 f1       	breq	.+90     	; 0x1de4 <data_Recover_Header+0x136>
        {
            max = ((max + min) / 2) - 1;
    1d8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8e:	4d 81       	ldd	r20, Y+5	; 0x05
    1d90:	5e 81       	ldd	r21, Y+6	; 0x06
    1d92:	8f 81       	ldd	r24, Y+7	; 0x07
    1d94:	98 85       	ldd	r25, Y+8	; 0x08
    1d96:	a9 85       	ldd	r26, Y+9	; 0x09
    1d98:	ba 85       	ldd	r27, Y+10	; 0x0a
    1d9a:	82 0f       	add	r24, r18
    1d9c:	93 1f       	adc	r25, r19
    1d9e:	a4 1f       	adc	r26, r20
    1da0:	b5 1f       	adc	r27, r21
    1da2:	b6 95       	lsr	r27
    1da4:	a7 95       	ror	r26
    1da6:	97 95       	ror	r25
    1da8:	87 95       	ror	r24
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	a1 09       	sbc	r26, r1
    1dae:	b1 09       	sbc	r27, r1
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    1db2:	9c 83       	std	Y+4, r25	; 0x04
    1db4:	ad 83       	std	Y+5, r26	; 0x05
    1db6:	be 83       	std	Y+6, r27	; 0x06

            if (max < min) max = min;
    1db8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dba:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbc:	4d 81       	ldd	r20, Y+5	; 0x05
    1dbe:	5e 81       	ldd	r21, Y+6	; 0x06
    1dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc2:	98 85       	ldd	r25, Y+8	; 0x08
    1dc4:	a9 85       	ldd	r26, Y+9	; 0x09
    1dc6:	ba 85       	ldd	r27, Y+10	; 0x0a
    1dc8:	28 17       	cp	r18, r24
    1dca:	39 07       	cpc	r19, r25
    1dcc:	4a 07       	cpc	r20, r26
    1dce:	5b 07       	cpc	r21, r27
    1dd0:	a8 f5       	brcc	.+106    	; 0x1e3c <data_Recover_Header+0x18e>
    1dd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1dd4:	98 85       	ldd	r25, Y+8	; 0x08
    1dd6:	a9 85       	ldd	r26, Y+9	; 0x09
    1dd8:	ba 85       	ldd	r27, Y+10	; 0x0a
    1dda:	8b 83       	std	Y+3, r24	; 0x03
    1ddc:	9c 83       	std	Y+4, r25	; 0x04
    1dde:	ad 83       	std	Y+5, r26	; 0x05
    1de0:	be 83       	std	Y+6, r27	; 0x06
    1de2:	2c c0       	rjmp	.+88     	; 0x1e3c <data_Recover_Header+0x18e>
        }
        else
        {
            min = ((max + min) / 2) + 1;
    1de4:	2b 81       	ldd	r18, Y+3	; 0x03
    1de6:	3c 81       	ldd	r19, Y+4	; 0x04
    1de8:	4d 81       	ldd	r20, Y+5	; 0x05
    1dea:	5e 81       	ldd	r21, Y+6	; 0x06
    1dec:	8f 81       	ldd	r24, Y+7	; 0x07
    1dee:	98 85       	ldd	r25, Y+8	; 0x08
    1df0:	a9 85       	ldd	r26, Y+9	; 0x09
    1df2:	ba 85       	ldd	r27, Y+10	; 0x0a
    1df4:	82 0f       	add	r24, r18
    1df6:	93 1f       	adc	r25, r19
    1df8:	a4 1f       	adc	r26, r20
    1dfa:	b5 1f       	adc	r27, r21
    1dfc:	b6 95       	lsr	r27
    1dfe:	a7 95       	ror	r26
    1e00:	97 95       	ror	r25
    1e02:	87 95       	ror	r24
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	a1 1d       	adc	r26, r1
    1e08:	b1 1d       	adc	r27, r1
    1e0a:	8f 83       	std	Y+7, r24	; 0x07
    1e0c:	98 87       	std	Y+8, r25	; 0x08
    1e0e:	a9 87       	std	Y+9, r26	; 0x09
    1e10:	ba 87       	std	Y+10, r27	; 0x0a

            if (min > max) min = max;
    1e12:	2f 81       	ldd	r18, Y+7	; 0x07
    1e14:	38 85       	ldd	r19, Y+8	; 0x08
    1e16:	49 85       	ldd	r20, Y+9	; 0x09
    1e18:	5a 85       	ldd	r21, Y+10	; 0x0a
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	ad 81       	ldd	r26, Y+5	; 0x05
    1e20:	be 81       	ldd	r27, Y+6	; 0x06
    1e22:	82 17       	cp	r24, r18
    1e24:	93 07       	cpc	r25, r19
    1e26:	a4 07       	cpc	r26, r20
    1e28:	b5 07       	cpc	r27, r21
    1e2a:	40 f4       	brcc	.+16     	; 0x1e3c <data_Recover_Header+0x18e>
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	ad 81       	ldd	r26, Y+5	; 0x05
    1e32:	be 81       	ldd	r27, Y+6	; 0x06
    1e34:	8f 83       	std	Y+7, r24	; 0x07
    1e36:	98 87       	std	Y+8, r25	; 0x08
    1e38:	a9 87       	std	Y+9, r26	; 0x09
    1e3a:	ba 87       	std	Y+10, r27	; 0x0a
    DataPoint tmp;
    uint32_t max = (MAX_MEM_ADDR / sizeof(DataPoint)) - 1;
    uint32_t min = 0;
    uint32_t avg;

    while (max != min)
    1e3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e40:	4d 81       	ldd	r20, Y+5	; 0x05
    1e42:	5e 81       	ldd	r21, Y+6	; 0x06
    1e44:	8f 81       	ldd	r24, Y+7	; 0x07
    1e46:	98 85       	ldd	r25, Y+8	; 0x08
    1e48:	a9 85       	ldd	r26, Y+9	; 0x09
    1e4a:	ba 85       	ldd	r27, Y+10	; 0x0a
    1e4c:	28 17       	cp	r18, r24
    1e4e:	39 07       	cpc	r19, r25
    1e50:	4a 07       	cpc	r20, r26
    1e52:	5b 07       	cpc	r21, r27
    1e54:	09 f0       	breq	.+2      	; 0x1e58 <data_Recover_Header+0x1aa>
    1e56:	5e cf       	rjmp	.-324    	; 0x1d14 <data_Recover_Header+0x66>

            if (min > max) min = max;
        }
    }

    curAddr = min * sizeof(DataPoint);
    1e58:	8f 81       	ldd	r24, Y+7	; 0x07
    1e5a:	98 85       	ldd	r25, Y+8	; 0x08
    1e5c:	a9 85       	ldd	r26, Y+9	; 0x09
    1e5e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	aa 1f       	adc	r26, r26
    1e66:	bb 1f       	adc	r27, r27
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	aa 1f       	adc	r26, r26
    1e6e:	bb 1f       	adc	r27, r27
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	aa 1f       	adc	r26, r26
    1e76:	bb 1f       	adc	r27, r27
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	aa 1f       	adc	r26, r26
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	aa 1f       	adc	r26, r26
    1e86:	bb 1f       	adc	r27, r27
    1e88:	80 93 83 02 	sts	0x0283, r24
    1e8c:	90 93 84 02 	sts	0x0284, r25
    1e90:	a0 93 85 02 	sts	0x0285, r26
    1e94:	b0 93 86 02 	sts	0x0286, r27

    if (min == (MAX_MEM_ADDR / sizeof(DataPoint)) - 1)
    1e98:	8f 81       	ldd	r24, Y+7	; 0x07
    1e9a:	98 85       	ldd	r25, Y+8	; 0x08
    1e9c:	a9 85       	ldd	r26, Y+9	; 0x09
    1e9e:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ea0:	8e 3f       	cpi	r24, 0xFE	; 254
    1ea2:	ff ef       	ldi	r31, 0xFF	; 255
    1ea4:	9f 07       	cpc	r25, r31
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	af 07       	cpc	r26, r31
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	bf 07       	cpc	r27, r31
    1eae:	11 f4       	brne	.+4      	; 0x1eb4 <data_Recover_Header+0x206>
    {
        return ERROR;
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	01 c0       	rjmp	.+2      	; 0x1eb6 <data_Recover_Header+0x208>
    }

    return OK;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
}
    1eb6:	ae 96       	adiw	r28, 0x2e	; 46
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <data_Write>:
 * @return Returns 'OK' if the operation is successful, if there
 * is no room left to store data then 'ERROR' is returned and
 * no operations are performed.
 */
status data_Write(DataPoint *data)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <data_Write+0x6>
    1ece:	0f 92       	push	r0
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	9b 83       	std	Y+3, r25	; 0x03
    1ed6:	8a 83       	std	Y+2, r24	; 0x02
    if ((curAddr + sizeof(DataPoint)) > MAX_MEM_ADDR) return ERROR;
    1ed8:	80 91 83 02 	lds	r24, 0x0283
    1edc:	90 91 84 02 	lds	r25, 0x0284
    1ee0:	a0 91 85 02 	lds	r26, 0x0285
    1ee4:	b0 91 86 02 	lds	r27, 0x0286
    1ee8:	80 96       	adiw	r24, 0x20	; 32
    1eea:	a1 1d       	adc	r26, r1
    1eec:	b1 1d       	adc	r27, r1
    1eee:	80 30       	cpi	r24, 0x00	; 0
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	92 07       	cpc	r25, r18
    1ef4:	20 e2       	ldi	r18, 0x20	; 32
    1ef6:	a2 07       	cpc	r26, r18
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	b2 07       	cpc	r27, r18
    1efc:	10 f0       	brcs	.+4      	; 0x1f02 <data_Write+0x3a>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	1e c0       	rjmp	.+60     	; 0x1f3e <data_Write+0x76>

    status ret = sst_AAI_Write((char*)&curAddr, (char*)data, sizeof(DataPoint));
    1f02:	83 e8       	ldi	r24, 0x83	; 131
    1f04:	92 e0       	ldi	r25, 0x02	; 2
    1f06:	2a 81       	ldd	r18, Y+2	; 0x02
    1f08:	3b 81       	ldd	r19, Y+3	; 0x03
    1f0a:	b9 01       	movw	r22, r18
    1f0c:	40 e2       	ldi	r20, 0x20	; 32
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	0e 94 3e 22 	call	0x447c	; 0x447c <sst_AAI_Write>
    1f14:	89 83       	std	Y+1, r24	; 0x01

    curAddr += sizeof(DataPoint);
    1f16:	80 91 83 02 	lds	r24, 0x0283
    1f1a:	90 91 84 02 	lds	r25, 0x0284
    1f1e:	a0 91 85 02 	lds	r26, 0x0285
    1f22:	b0 91 86 02 	lds	r27, 0x0286
    1f26:	80 96       	adiw	r24, 0x20	; 32
    1f28:	a1 1d       	adc	r26, r1
    1f2a:	b1 1d       	adc	r27, r1
    1f2c:	80 93 83 02 	sts	0x0283, r24
    1f30:	90 93 84 02 	sts	0x0284, r25
    1f34:	a0 93 85 02 	sts	0x0285, r26
    1f38:	b0 93 86 02 	sts	0x0286, r27

    return ret;
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <data_Clear>:

/**
 * Erases the memory.
 */
void data_Clear(void)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    sst_Chip_Erase();
    1f52:	0e 94 4d 24 	call	0x489a	; 0x489a <sst_Chip_Erase>

    curAddr = 0;
    1f56:	10 92 83 02 	sts	0x0283, r1
    1f5a:	10 92 84 02 	sts	0x0284, r1
    1f5e:	10 92 85 02 	sts	0x0285, r1
    1f62:	10 92 86 02 	sts	0x0286, r1
}
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <data_Write_EEPROM>:
 *
 * @param addr Address to write to in EEPROM.
 * @param data Data to write in EEPROM.
 */
void data_Write_EEPROM(unsigned int addr, unsigned char data)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <data_Write_EEPROM+0x6>
    1f72:	0f 92       	push	r0
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	6b 83       	std	Y+3, r22	; 0x03
    eeprom_busy_wait();
    1f7e:	8f e3       	ldi	r24, 0x3F	; 63
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	fc 01       	movw	r30, r24
    1f84:	80 81       	ld	r24, Z
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	82 70       	andi	r24, 0x02	; 2
    1f8c:	90 70       	andi	r25, 0x00	; 0
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	b1 f7       	brne	.-20     	; 0x1f7e <data_Write_EEPROM+0x12>

    if (data != data_Read_EEPROM(addr))
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	9a 81       	ldd	r25, Y+2	; 0x02
    1f96:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    1f9a:	98 2f       	mov	r25, r24
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	98 17       	cp	r25, r24
    1fa0:	29 f0       	breq	.+10     	; 0x1fac <data_Write_EEPROM+0x40>
    {
        eeprom_write_byte((unsigned char*)addr, data);
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	6b 81       	ldd	r22, Y+3	; 0x03
    1fa8:	0e 94 d7 3f 	call	0x7fae	; 0x7fae <__eewr_byte_m324p>
    }
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <data_Read_EEPROM>:
 * @param addr Address in EEPROM to read.
 *
 * @return Returns the value at the requested EEPROM address.
 */
unsigned char data_Read_EEPROM(unsigned int addr)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <data_Read_EEPROM+0x6>
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    eeprom_busy_wait();
    1fc6:	8f e3       	ldi	r24, 0x3F	; 63
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	fc 01       	movw	r30, r24
    1fcc:	80 81       	ld	r24, Z
    1fce:	88 2f       	mov	r24, r24
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	82 70       	andi	r24, 0x02	; 2
    1fd4:	90 70       	andi	r25, 0x00	; 0
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	b1 f7       	brne	.-20     	; 0x1fc6 <data_Read_EEPROM+0xe>

    return eeprom_read_byte((unsigned char*)addr);
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fde:	0e 94 cf 3f 	call	0x7f9e	; 0x7f9e <__eerd_byte_m324p>
}
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <data_Compare>:
 * @param b Datapoint to compare.
 *
 * @return Returns true if the DataPoints are the same, false otherwise.
 */
bool data_Compare(DataPoint *a, DataPoint *b)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <data_Compare+0x6>
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <data_Compare+0x8>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <data_Compare+0xa>
    1ff6:	cd b7       	in	r28, 0x3d	; 61
    1ff8:	de b7       	in	r29, 0x3e	; 62
    1ffa:	9c 83       	std	Y+4, r25	; 0x04
    1ffc:	8b 83       	std	Y+3, r24	; 0x03
    1ffe:	7e 83       	std	Y+6, r23	; 0x06
    2000:	6d 83       	std	Y+5, r22	; 0x05
    if (a->latLow  != b->latLow)  return false;
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	fc 01       	movw	r30, r24
    2008:	22 81       	ldd	r18, Z+2	; 0x02
    200a:	33 81       	ldd	r19, Z+3	; 0x03
    200c:	8d 81       	ldd	r24, Y+5	; 0x05
    200e:	9e 81       	ldd	r25, Y+6	; 0x06
    2010:	fc 01       	movw	r30, r24
    2012:	82 81       	ldd	r24, Z+2	; 0x02
    2014:	93 81       	ldd	r25, Z+3	; 0x03
    2016:	28 17       	cp	r18, r24
    2018:	39 07       	cpc	r19, r25
    201a:	11 f0       	breq	.+4      	; 0x2020 <data_Compare+0x34>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	84 c0       	rjmp	.+264    	; 0x2128 <data_Compare+0x13c>
    if (a->latHigh != b->latHigh) return false;
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	fc 01       	movw	r30, r24
    2026:	20 81       	ld	r18, Z
    2028:	31 81       	ldd	r19, Z+1	; 0x01
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	fc 01       	movw	r30, r24
    2030:	80 81       	ld	r24, Z
    2032:	91 81       	ldd	r25, Z+1	; 0x01
    2034:	28 17       	cp	r18, r24
    2036:	39 07       	cpc	r19, r25
    2038:	11 f0       	breq	.+4      	; 0x203e <data_Compare+0x52>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	75 c0       	rjmp	.+234    	; 0x2128 <data_Compare+0x13c>
    if (a->lonLow  != b->lonLow)  return false;
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	9c 81       	ldd	r25, Y+4	; 0x04
    2042:	fc 01       	movw	r30, r24
    2044:	26 81       	ldd	r18, Z+6	; 0x06
    2046:	37 81       	ldd	r19, Z+7	; 0x07
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	fc 01       	movw	r30, r24
    204e:	86 81       	ldd	r24, Z+6	; 0x06
    2050:	97 81       	ldd	r25, Z+7	; 0x07
    2052:	28 17       	cp	r18, r24
    2054:	39 07       	cpc	r19, r25
    2056:	11 f0       	breq	.+4      	; 0x205c <data_Compare+0x70>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	66 c0       	rjmp	.+204    	; 0x2128 <data_Compare+0x13c>
    if (a->lonHigh != b->lonHigh) return false;
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	9c 81       	ldd	r25, Y+4	; 0x04
    2060:	fc 01       	movw	r30, r24
    2062:	24 81       	ldd	r18, Z+4	; 0x04
    2064:	35 81       	ldd	r19, Z+5	; 0x05
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	9e 81       	ldd	r25, Y+6	; 0x06
    206a:	fc 01       	movw	r30, r24
    206c:	84 81       	ldd	r24, Z+4	; 0x04
    206e:	95 81       	ldd	r25, Z+5	; 0x05
    2070:	28 17       	cp	r18, r24
    2072:	39 07       	cpc	r19, r25
    2074:	11 f0       	breq	.+4      	; 0x207a <data_Compare+0x8e>
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	57 c0       	rjmp	.+174    	; 0x2128 <data_Compare+0x13c>

    if (a->altitude    != b->altitude)    return false;
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	fc 01       	movw	r30, r24
    2080:	20 85       	ldd	r18, Z+8	; 0x08
    2082:	31 85       	ldd	r19, Z+9	; 0x09
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	9e 81       	ldd	r25, Y+6	; 0x06
    2088:	fc 01       	movw	r30, r24
    208a:	80 85       	ldd	r24, Z+8	; 0x08
    208c:	91 85       	ldd	r25, Z+9	; 0x09
    208e:	28 17       	cp	r18, r24
    2090:	39 07       	cpc	r19, r25
    2092:	11 f0       	breq	.+4      	; 0x2098 <data_Compare+0xac>
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	48 c0       	rjmp	.+144    	; 0x2128 <data_Compare+0x13c>
    if (a->pressure    != b->pressure)    return false;
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	fc 01       	movw	r30, r24
    209e:	22 85       	ldd	r18, Z+10	; 0x0a
    20a0:	33 85       	ldd	r19, Z+11	; 0x0b
    20a2:	44 85       	ldd	r20, Z+12	; 0x0c
    20a4:	55 85       	ldd	r21, Z+13	; 0x0d
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	9e 81       	ldd	r25, Y+6	; 0x06
    20aa:	fc 01       	movw	r30, r24
    20ac:	82 85       	ldd	r24, Z+10	; 0x0a
    20ae:	93 85       	ldd	r25, Z+11	; 0x0b
    20b0:	a4 85       	ldd	r26, Z+12	; 0x0c
    20b2:	b5 85       	ldd	r27, Z+13	; 0x0d
    20b4:	28 17       	cp	r18, r24
    20b6:	39 07       	cpc	r19, r25
    20b8:	4a 07       	cpc	r20, r26
    20ba:	5b 07       	cpc	r21, r27
    20bc:	11 f0       	breq	.+4      	; 0x20c2 <data_Compare+0xd6>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	33 c0       	rjmp	.+102    	; 0x2128 <data_Compare+0x13c>
    if (a->temperature != b->temperature) return false;
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	9c 81       	ldd	r25, Y+4	; 0x04
    20c6:	fc 01       	movw	r30, r24
    20c8:	26 85       	ldd	r18, Z+14	; 0x0e
    20ca:	37 85       	ldd	r19, Z+15	; 0x0f
    20cc:	8d 81       	ldd	r24, Y+5	; 0x05
    20ce:	9e 81       	ldd	r25, Y+6	; 0x06
    20d0:	fc 01       	movw	r30, r24
    20d2:	86 85       	ldd	r24, Z+14	; 0x0e
    20d4:	97 85       	ldd	r25, Z+15	; 0x0f
    20d6:	28 17       	cp	r18, r24
    20d8:	39 07       	cpc	r19, r25
    20da:	11 f0       	breq	.+4      	; 0x20e0 <data_Compare+0xf4>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	24 c0       	rjmp	.+72     	; 0x2128 <data_Compare+0x13c>

    int i;

    for (i = 0; i < 16; i++)
    20e0:	1a 82       	std	Y+2, r1	; 0x02
    20e2:	19 82       	std	Y+1, r1	; 0x01
    20e4:	1b c0       	rjmp	.+54     	; 0x211c <data_Compare+0x130>
    {
        if (a->bitpack.rawData[i] != b->bitpack.rawData[i]) return false;
    20e6:	2b 81       	ldd	r18, Y+3	; 0x03
    20e8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	9a 81       	ldd	r25, Y+2	; 0x02
    20ee:	82 0f       	add	r24, r18
    20f0:	93 1f       	adc	r25, r19
    20f2:	40 96       	adiw	r24, 0x10	; 16
    20f4:	fc 01       	movw	r30, r24
    20f6:	40 81       	ld	r20, Z
    20f8:	2d 81       	ldd	r18, Y+5	; 0x05
    20fa:	3e 81       	ldd	r19, Y+6	; 0x06
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	82 0f       	add	r24, r18
    2102:	93 1f       	adc	r25, r19
    2104:	40 96       	adiw	r24, 0x10	; 16
    2106:	fc 01       	movw	r30, r24
    2108:	80 81       	ld	r24, Z
    210a:	48 17       	cp	r20, r24
    210c:	11 f0       	breq	.+4      	; 0x2112 <data_Compare+0x126>
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	0b c0       	rjmp	.+22     	; 0x2128 <data_Compare+0x13c>
    if (a->pressure    != b->pressure)    return false;
    if (a->temperature != b->temperature) return false;

    int i;

    for (i = 0; i < 16; i++)
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	9a 81       	ldd	r25, Y+2	; 0x02
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	9a 81       	ldd	r25, Y+2	; 0x02
    2120:	80 31       	cpi	r24, 0x10	; 16
    2122:	91 05       	cpc	r25, r1
    2124:	04 f3       	brlt	.-64     	; 0x20e6 <data_Compare+0xfa>
    {
        if (a->bitpack.rawData[i] != b->bitpack.rawData[i]) return false;
    }

    return true;
    2126:	81 e0       	ldi	r24, 0x01	; 1
}
    2128:	26 96       	adiw	r28, 0x06	; 6
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <data_Cur_Addr>:
 * Returns the current header address for DataPoint storage.
 *
 * @return The address of the data header.
 */
uint32_t data_Cur_Addr()
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    return curAddr;
    2142:	80 91 83 02 	lds	r24, 0x0283
    2146:	90 91 84 02 	lds	r25, 0x0284
    214a:	a0 91 85 02 	lds	r26, 0x0285
    214e:	b0 91 86 02 	lds	r27, 0x0286
}
    2152:	bc 01       	movw	r22, r24
    2154:	cd 01       	movw	r24, r26
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <setPinMode>:
 * @param mode Mode to put the pin in.
 * @param portLetter Letter descriptor of the pin's port.
 * @param pinNum Pin number being configured.
 */
void setPinMode(pinMode mode, portLetter portLetter, int pinNum)
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	00 d0       	rcall	.+0      	; 0x2162 <setPinMode+0x6>
    2162:	00 d0       	rcall	.+0      	; 0x2164 <setPinMode+0x8>
    2164:	cd b7       	in	r28, 0x3d	; 61
    2166:	de b7       	in	r29, 0x3e	; 62
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	6a 83       	std	Y+2, r22	; 0x02
    216c:	5c 83       	std	Y+4, r21	; 0x04
    216e:	4b 83       	std	Y+3, r20	; 0x03
    switch (mode)
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	88 2f       	mov	r24, r24
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	91 05       	cpc	r25, r1
    217a:	09 f4       	brne	.+2      	; 0x217e <setPinMode+0x22>
    217c:	d5 c0       	rjmp	.+426    	; 0x2328 <setPinMode+0x1cc>
    217e:	82 30       	cpi	r24, 0x02	; 2
    2180:	91 05       	cpc	r25, r1
    2182:	1c f4       	brge	.+6      	; 0x218a <setPinMode+0x2e>
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	51 f0       	breq	.+20     	; 0x219c <setPinMode+0x40>
    2188:	11 c3       	rjmp	.+1570   	; 0x27ac <setPinMode+0x650>
    218a:	82 30       	cpi	r24, 0x02	; 2
    218c:	91 05       	cpc	r25, r1
    218e:	09 f4       	brne	.+2      	; 0x2192 <setPinMode+0x36>
    2190:	8d c1       	rjmp	.+794    	; 0x24ac <setPinMode+0x350>
    2192:	83 30       	cpi	r24, 0x03	; 3
    2194:	91 05       	cpc	r25, r1
    2196:	09 f4       	brne	.+2      	; 0x219a <setPinMode+0x3e>
    2198:	4b c2       	rjmp	.+1174   	; 0x2630 <setPinMode+0x4d4>
    219a:	08 c3       	rjmp	.+1552   	; 0x27ac <setPinMode+0x650>
    {
        case MODE_INPUT:
            switch (portLetter)
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	88 2f       	mov	r24, r24
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	91 05       	cpc	r25, r1
    21a6:	d9 f1       	breq	.+118    	; 0x221e <setPinMode+0xc2>
    21a8:	82 30       	cpi	r24, 0x02	; 2
    21aa:	91 05       	cpc	r25, r1
    21ac:	1c f4       	brge	.+6      	; 0x21b4 <setPinMode+0x58>
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	51 f0       	breq	.+20     	; 0x21c6 <setPinMode+0x6a>
                case D:
                    clear_bit(DDRD,  pinNum);
                    clear_bit(PORTD, pinNum);
                    break;
            }
            break;
    21b2:	fc c2       	rjmp	.+1528   	; 0x27ac <setPinMode+0x650>
void setPinMode(pinMode mode, portLetter portLetter, int pinNum)
{
    switch (mode)
    {
        case MODE_INPUT:
            switch (portLetter)
    21b4:	82 30       	cpi	r24, 0x02	; 2
    21b6:	91 05       	cpc	r25, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <setPinMode+0x60>
    21ba:	5d c0       	rjmp	.+186    	; 0x2276 <setPinMode+0x11a>
    21bc:	83 30       	cpi	r24, 0x03	; 3
    21be:	91 05       	cpc	r25, r1
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <setPinMode+0x68>
    21c2:	85 c0       	rjmp	.+266    	; 0x22ce <setPinMode+0x172>
                case D:
                    clear_bit(DDRD,  pinNum);
                    clear_bit(PORTD, pinNum);
                    break;
            }
            break;
    21c4:	f3 c2       	rjmp	.+1510   	; 0x27ac <setPinMode+0x650>
    {
        case MODE_INPUT:
            switch (portLetter)
            {
                case A:
                    clear_bit(DDRA,  pinNum);
    21c6:	81 e2       	ldi	r24, 0x21	; 33
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	21 e2       	ldi	r18, 0x21	; 33
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	f9 01       	movw	r30, r18
    21d0:	20 81       	ld	r18, Z
    21d2:	62 2f       	mov	r22, r18
    21d4:	2b 81       	ldd	r18, Y+3	; 0x03
    21d6:	42 2f       	mov	r20, r18
    21d8:	50 e0       	ldi	r21, 0x00	; 0
    21da:	21 e0       	ldi	r18, 0x01	; 1
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <setPinMode+0x88>
    21e0:	22 0f       	add	r18, r18
    21e2:	33 1f       	adc	r19, r19
    21e4:	4a 95       	dec	r20
    21e6:	e2 f7       	brpl	.-8      	; 0x21e0 <setPinMode+0x84>
    21e8:	20 95       	com	r18
    21ea:	26 23       	and	r18, r22
    21ec:	fc 01       	movw	r30, r24
    21ee:	20 83       	st	Z, r18
                    clear_bit(PORTA, pinNum);
    21f0:	82 e2       	ldi	r24, 0x22	; 34
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	22 e2       	ldi	r18, 0x22	; 34
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	f9 01       	movw	r30, r18
    21fa:	20 81       	ld	r18, Z
    21fc:	62 2f       	mov	r22, r18
    21fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2200:	42 2f       	mov	r20, r18
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	21 e0       	ldi	r18, 0x01	; 1
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	04 2e       	mov	r0, r20
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <setPinMode+0xb4>
    220c:	22 0f       	add	r18, r18
    220e:	33 1f       	adc	r19, r19
    2210:	0a 94       	dec	r0
    2212:	e2 f7       	brpl	.-8      	; 0x220c <setPinMode+0xb0>
    2214:	20 95       	com	r18
    2216:	26 23       	and	r18, r22
    2218:	fc 01       	movw	r30, r24
    221a:	20 83       	st	Z, r18
                    break;
    221c:	84 c0       	rjmp	.+264    	; 0x2326 <setPinMode+0x1ca>
                case B:
                    clear_bit(DDRB,  pinNum);
    221e:	84 e2       	ldi	r24, 0x24	; 36
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	24 e2       	ldi	r18, 0x24	; 36
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	f9 01       	movw	r30, r18
    2228:	20 81       	ld	r18, Z
    222a:	62 2f       	mov	r22, r18
    222c:	2b 81       	ldd	r18, Y+3	; 0x03
    222e:	42 2f       	mov	r20, r18
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	21 e0       	ldi	r18, 0x01	; 1
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	02 c0       	rjmp	.+4      	; 0x223c <setPinMode+0xe0>
    2238:	22 0f       	add	r18, r18
    223a:	33 1f       	adc	r19, r19
    223c:	4a 95       	dec	r20
    223e:	e2 f7       	brpl	.-8      	; 0x2238 <setPinMode+0xdc>
    2240:	20 95       	com	r18
    2242:	26 23       	and	r18, r22
    2244:	fc 01       	movw	r30, r24
    2246:	20 83       	st	Z, r18
                    clear_bit(PORTB, pinNum);
    2248:	85 e2       	ldi	r24, 0x25	; 37
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	25 e2       	ldi	r18, 0x25	; 37
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	f9 01       	movw	r30, r18
    2252:	20 81       	ld	r18, Z
    2254:	62 2f       	mov	r22, r18
    2256:	2b 81       	ldd	r18, Y+3	; 0x03
    2258:	42 2f       	mov	r20, r18
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	21 e0       	ldi	r18, 0x01	; 1
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	04 2e       	mov	r0, r20
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <setPinMode+0x10c>
    2264:	22 0f       	add	r18, r18
    2266:	33 1f       	adc	r19, r19
    2268:	0a 94       	dec	r0
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <setPinMode+0x108>
    226c:	20 95       	com	r18
    226e:	26 23       	and	r18, r22
    2270:	fc 01       	movw	r30, r24
    2272:	20 83       	st	Z, r18
                    break;
    2274:	58 c0       	rjmp	.+176    	; 0x2326 <setPinMode+0x1ca>
                case C:
                    clear_bit(DDRC,  pinNum);
    2276:	87 e2       	ldi	r24, 0x27	; 39
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	27 e2       	ldi	r18, 0x27	; 39
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	f9 01       	movw	r30, r18
    2280:	20 81       	ld	r18, Z
    2282:	62 2f       	mov	r22, r18
    2284:	2b 81       	ldd	r18, Y+3	; 0x03
    2286:	42 2f       	mov	r20, r18
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	21 e0       	ldi	r18, 0x01	; 1
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <setPinMode+0x138>
    2290:	22 0f       	add	r18, r18
    2292:	33 1f       	adc	r19, r19
    2294:	4a 95       	dec	r20
    2296:	e2 f7       	brpl	.-8      	; 0x2290 <setPinMode+0x134>
    2298:	20 95       	com	r18
    229a:	26 23       	and	r18, r22
    229c:	fc 01       	movw	r30, r24
    229e:	20 83       	st	Z, r18
                    clear_bit(PORTC, pinNum);
    22a0:	88 e2       	ldi	r24, 0x28	; 40
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	28 e2       	ldi	r18, 0x28	; 40
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	f9 01       	movw	r30, r18
    22aa:	20 81       	ld	r18, Z
    22ac:	62 2f       	mov	r22, r18
    22ae:	2b 81       	ldd	r18, Y+3	; 0x03
    22b0:	42 2f       	mov	r20, r18
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	21 e0       	ldi	r18, 0x01	; 1
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	04 2e       	mov	r0, r20
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <setPinMode+0x164>
    22bc:	22 0f       	add	r18, r18
    22be:	33 1f       	adc	r19, r19
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <setPinMode+0x160>
    22c4:	20 95       	com	r18
    22c6:	26 23       	and	r18, r22
    22c8:	fc 01       	movw	r30, r24
    22ca:	20 83       	st	Z, r18
                    break;
    22cc:	2c c0       	rjmp	.+88     	; 0x2326 <setPinMode+0x1ca>
                case D:
                    clear_bit(DDRD,  pinNum);
    22ce:	8a e2       	ldi	r24, 0x2A	; 42
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	2a e2       	ldi	r18, 0x2A	; 42
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	f9 01       	movw	r30, r18
    22d8:	20 81       	ld	r18, Z
    22da:	62 2f       	mov	r22, r18
    22dc:	2b 81       	ldd	r18, Y+3	; 0x03
    22de:	42 2f       	mov	r20, r18
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	21 e0       	ldi	r18, 0x01	; 1
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <setPinMode+0x190>
    22e8:	22 0f       	add	r18, r18
    22ea:	33 1f       	adc	r19, r19
    22ec:	4a 95       	dec	r20
    22ee:	e2 f7       	brpl	.-8      	; 0x22e8 <setPinMode+0x18c>
    22f0:	20 95       	com	r18
    22f2:	26 23       	and	r18, r22
    22f4:	fc 01       	movw	r30, r24
    22f6:	20 83       	st	Z, r18
                    clear_bit(PORTD, pinNum);
    22f8:	8b e2       	ldi	r24, 0x2B	; 43
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	2b e2       	ldi	r18, 0x2B	; 43
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	f9 01       	movw	r30, r18
    2302:	20 81       	ld	r18, Z
    2304:	62 2f       	mov	r22, r18
    2306:	2b 81       	ldd	r18, Y+3	; 0x03
    2308:	42 2f       	mov	r20, r18
    230a:	50 e0       	ldi	r21, 0x00	; 0
    230c:	21 e0       	ldi	r18, 0x01	; 1
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	04 2e       	mov	r0, r20
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <setPinMode+0x1bc>
    2314:	22 0f       	add	r18, r18
    2316:	33 1f       	adc	r19, r19
    2318:	0a 94       	dec	r0
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <setPinMode+0x1b8>
    231c:	20 95       	com	r18
    231e:	26 23       	and	r18, r22
    2320:	fc 01       	movw	r30, r24
    2322:	20 83       	st	Z, r18
                    break;
    2324:	00 00       	nop
            }
            break;
    2326:	42 c2       	rjmp	.+1156   	; 0x27ac <setPinMode+0x650>

        case MODE_INPUT_SRC:
            switch (portLetter)
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	88 2f       	mov	r24, r24
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	81 30       	cpi	r24, 0x01	; 1
    2330:	91 05       	cpc	r25, r1
    2332:	d1 f1       	breq	.+116    	; 0x23a8 <setPinMode+0x24c>
    2334:	82 30       	cpi	r24, 0x02	; 2
    2336:	91 05       	cpc	r25, r1
    2338:	1c f4       	brge	.+6      	; 0x2340 <setPinMode+0x1e4>
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	51 f0       	breq	.+20     	; 0x2352 <setPinMode+0x1f6>
                case D:
                    clear_bit(DDRD,  pinNum);
                    set_bit(PORTD,   pinNum);
                    break;
            }
            break;
    233e:	36 c2       	rjmp	.+1132   	; 0x27ac <setPinMode+0x650>
                    break;
            }
            break;

        case MODE_INPUT_SRC:
            switch (portLetter)
    2340:	82 30       	cpi	r24, 0x02	; 2
    2342:	91 05       	cpc	r25, r1
    2344:	09 f4       	brne	.+2      	; 0x2348 <setPinMode+0x1ec>
    2346:	5b c0       	rjmp	.+182    	; 0x23fe <setPinMode+0x2a2>
    2348:	83 30       	cpi	r24, 0x03	; 3
    234a:	91 05       	cpc	r25, r1
    234c:	09 f4       	brne	.+2      	; 0x2350 <setPinMode+0x1f4>
    234e:	82 c0       	rjmp	.+260    	; 0x2454 <setPinMode+0x2f8>
                case D:
                    clear_bit(DDRD,  pinNum);
                    set_bit(PORTD,   pinNum);
                    break;
            }
            break;
    2350:	2d c2       	rjmp	.+1114   	; 0x27ac <setPinMode+0x650>

        case MODE_INPUT_SRC:
            switch (portLetter)
            {
                case A:
                    clear_bit(DDRA,  pinNum);
    2352:	81 e2       	ldi	r24, 0x21	; 33
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	21 e2       	ldi	r18, 0x21	; 33
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	f9 01       	movw	r30, r18
    235c:	20 81       	ld	r18, Z
    235e:	62 2f       	mov	r22, r18
    2360:	2b 81       	ldd	r18, Y+3	; 0x03
    2362:	42 2f       	mov	r20, r18
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	21 e0       	ldi	r18, 0x01	; 1
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <setPinMode+0x214>
    236c:	22 0f       	add	r18, r18
    236e:	33 1f       	adc	r19, r19
    2370:	4a 95       	dec	r20
    2372:	e2 f7       	brpl	.-8      	; 0x236c <setPinMode+0x210>
    2374:	20 95       	com	r18
    2376:	26 23       	and	r18, r22
    2378:	fc 01       	movw	r30, r24
    237a:	20 83       	st	Z, r18
                    set_bit(PORTA,   pinNum);
    237c:	82 e2       	ldi	r24, 0x22	; 34
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	22 e2       	ldi	r18, 0x22	; 34
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	f9 01       	movw	r30, r18
    2386:	20 81       	ld	r18, Z
    2388:	62 2f       	mov	r22, r18
    238a:	2b 81       	ldd	r18, Y+3	; 0x03
    238c:	42 2f       	mov	r20, r18
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	21 e0       	ldi	r18, 0x01	; 1
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	04 2e       	mov	r0, r20
    2396:	02 c0       	rjmp	.+4      	; 0x239c <setPinMode+0x240>
    2398:	22 0f       	add	r18, r18
    239a:	33 1f       	adc	r19, r19
    239c:	0a 94       	dec	r0
    239e:	e2 f7       	brpl	.-8      	; 0x2398 <setPinMode+0x23c>
    23a0:	26 2b       	or	r18, r22
    23a2:	fc 01       	movw	r30, r24
    23a4:	20 83       	st	Z, r18
                    break;
    23a6:	81 c0       	rjmp	.+258    	; 0x24aa <setPinMode+0x34e>
                case B:
                    clear_bit(DDRB,  pinNum);
    23a8:	84 e2       	ldi	r24, 0x24	; 36
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	24 e2       	ldi	r18, 0x24	; 36
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	f9 01       	movw	r30, r18
    23b2:	20 81       	ld	r18, Z
    23b4:	62 2f       	mov	r22, r18
    23b6:	2b 81       	ldd	r18, Y+3	; 0x03
    23b8:	42 2f       	mov	r20, r18
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	21 e0       	ldi	r18, 0x01	; 1
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <setPinMode+0x26a>
    23c2:	22 0f       	add	r18, r18
    23c4:	33 1f       	adc	r19, r19
    23c6:	4a 95       	dec	r20
    23c8:	e2 f7       	brpl	.-8      	; 0x23c2 <setPinMode+0x266>
    23ca:	20 95       	com	r18
    23cc:	26 23       	and	r18, r22
    23ce:	fc 01       	movw	r30, r24
    23d0:	20 83       	st	Z, r18
                    set_bit(PORTB,   pinNum);
    23d2:	85 e2       	ldi	r24, 0x25	; 37
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	25 e2       	ldi	r18, 0x25	; 37
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	f9 01       	movw	r30, r18
    23dc:	20 81       	ld	r18, Z
    23de:	62 2f       	mov	r22, r18
    23e0:	2b 81       	ldd	r18, Y+3	; 0x03
    23e2:	42 2f       	mov	r20, r18
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	21 e0       	ldi	r18, 0x01	; 1
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	04 2e       	mov	r0, r20
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <setPinMode+0x296>
    23ee:	22 0f       	add	r18, r18
    23f0:	33 1f       	adc	r19, r19
    23f2:	0a 94       	dec	r0
    23f4:	e2 f7       	brpl	.-8      	; 0x23ee <setPinMode+0x292>
    23f6:	26 2b       	or	r18, r22
    23f8:	fc 01       	movw	r30, r24
    23fa:	20 83       	st	Z, r18
                    break;
    23fc:	56 c0       	rjmp	.+172    	; 0x24aa <setPinMode+0x34e>
                case C:
                    clear_bit(DDRC,  pinNum);
    23fe:	87 e2       	ldi	r24, 0x27	; 39
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	27 e2       	ldi	r18, 0x27	; 39
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	f9 01       	movw	r30, r18
    2408:	20 81       	ld	r18, Z
    240a:	62 2f       	mov	r22, r18
    240c:	2b 81       	ldd	r18, Y+3	; 0x03
    240e:	42 2f       	mov	r20, r18
    2410:	50 e0       	ldi	r21, 0x00	; 0
    2412:	21 e0       	ldi	r18, 0x01	; 1
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	02 c0       	rjmp	.+4      	; 0x241c <setPinMode+0x2c0>
    2418:	22 0f       	add	r18, r18
    241a:	33 1f       	adc	r19, r19
    241c:	4a 95       	dec	r20
    241e:	e2 f7       	brpl	.-8      	; 0x2418 <setPinMode+0x2bc>
    2420:	20 95       	com	r18
    2422:	26 23       	and	r18, r22
    2424:	fc 01       	movw	r30, r24
    2426:	20 83       	st	Z, r18
                    set_bit(PORTC,   pinNum);
    2428:	88 e2       	ldi	r24, 0x28	; 40
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	28 e2       	ldi	r18, 0x28	; 40
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	f9 01       	movw	r30, r18
    2432:	20 81       	ld	r18, Z
    2434:	62 2f       	mov	r22, r18
    2436:	2b 81       	ldd	r18, Y+3	; 0x03
    2438:	42 2f       	mov	r20, r18
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	21 e0       	ldi	r18, 0x01	; 1
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	04 2e       	mov	r0, r20
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <setPinMode+0x2ec>
    2444:	22 0f       	add	r18, r18
    2446:	33 1f       	adc	r19, r19
    2448:	0a 94       	dec	r0
    244a:	e2 f7       	brpl	.-8      	; 0x2444 <setPinMode+0x2e8>
    244c:	26 2b       	or	r18, r22
    244e:	fc 01       	movw	r30, r24
    2450:	20 83       	st	Z, r18
                    break;
    2452:	2b c0       	rjmp	.+86     	; 0x24aa <setPinMode+0x34e>
                case D:
                    clear_bit(DDRD,  pinNum);
    2454:	8a e2       	ldi	r24, 0x2A	; 42
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	2a e2       	ldi	r18, 0x2A	; 42
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	f9 01       	movw	r30, r18
    245e:	20 81       	ld	r18, Z
    2460:	62 2f       	mov	r22, r18
    2462:	2b 81       	ldd	r18, Y+3	; 0x03
    2464:	42 2f       	mov	r20, r18
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	21 e0       	ldi	r18, 0x01	; 1
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <setPinMode+0x316>
    246e:	22 0f       	add	r18, r18
    2470:	33 1f       	adc	r19, r19
    2472:	4a 95       	dec	r20
    2474:	e2 f7       	brpl	.-8      	; 0x246e <setPinMode+0x312>
    2476:	20 95       	com	r18
    2478:	26 23       	and	r18, r22
    247a:	fc 01       	movw	r30, r24
    247c:	20 83       	st	Z, r18
                    set_bit(PORTD,   pinNum);
    247e:	8b e2       	ldi	r24, 0x2B	; 43
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	2b e2       	ldi	r18, 0x2B	; 43
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	f9 01       	movw	r30, r18
    2488:	20 81       	ld	r18, Z
    248a:	62 2f       	mov	r22, r18
    248c:	2b 81       	ldd	r18, Y+3	; 0x03
    248e:	42 2f       	mov	r20, r18
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	21 e0       	ldi	r18, 0x01	; 1
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	04 2e       	mov	r0, r20
    2498:	02 c0       	rjmp	.+4      	; 0x249e <setPinMode+0x342>
    249a:	22 0f       	add	r18, r18
    249c:	33 1f       	adc	r19, r19
    249e:	0a 94       	dec	r0
    24a0:	e2 f7       	brpl	.-8      	; 0x249a <setPinMode+0x33e>
    24a2:	26 2b       	or	r18, r22
    24a4:	fc 01       	movw	r30, r24
    24a6:	20 83       	st	Z, r18
                    break;
    24a8:	00 00       	nop
            }
            break;
    24aa:	80 c1       	rjmp	.+768    	; 0x27ac <setPinMode+0x650>

        case MODE_LOW:
            switch (portLetter)
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	88 2f       	mov	r24, r24
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	81 30       	cpi	r24, 0x01	; 1
    24b4:	91 05       	cpc	r25, r1
    24b6:	d1 f1       	breq	.+116    	; 0x252c <setPinMode+0x3d0>
    24b8:	82 30       	cpi	r24, 0x02	; 2
    24ba:	91 05       	cpc	r25, r1
    24bc:	1c f4       	brge	.+6      	; 0x24c4 <setPinMode+0x368>
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	51 f0       	breq	.+20     	; 0x24d6 <setPinMode+0x37a>
                case D:
                    set_bit(DDRD,    pinNum);
                    clear_bit(PORTD, pinNum);
                    break;
            }
            break;
    24c2:	74 c1       	rjmp	.+744    	; 0x27ac <setPinMode+0x650>
                    break;
            }
            break;

        case MODE_LOW:
            switch (portLetter)
    24c4:	82 30       	cpi	r24, 0x02	; 2
    24c6:	91 05       	cpc	r25, r1
    24c8:	09 f4       	brne	.+2      	; 0x24cc <setPinMode+0x370>
    24ca:	5b c0       	rjmp	.+182    	; 0x2582 <setPinMode+0x426>
    24cc:	83 30       	cpi	r24, 0x03	; 3
    24ce:	91 05       	cpc	r25, r1
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <setPinMode+0x378>
    24d2:	82 c0       	rjmp	.+260    	; 0x25d8 <setPinMode+0x47c>
                case D:
                    set_bit(DDRD,    pinNum);
                    clear_bit(PORTD, pinNum);
                    break;
            }
            break;
    24d4:	6b c1       	rjmp	.+726    	; 0x27ac <setPinMode+0x650>

        case MODE_LOW:
            switch (portLetter)
            {
                case A:
                    set_bit(DDRA,    pinNum);
    24d6:	81 e2       	ldi	r24, 0x21	; 33
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	21 e2       	ldi	r18, 0x21	; 33
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	f9 01       	movw	r30, r18
    24e0:	20 81       	ld	r18, Z
    24e2:	62 2f       	mov	r22, r18
    24e4:	2b 81       	ldd	r18, Y+3	; 0x03
    24e6:	42 2f       	mov	r20, r18
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	21 e0       	ldi	r18, 0x01	; 1
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <setPinMode+0x398>
    24f0:	22 0f       	add	r18, r18
    24f2:	33 1f       	adc	r19, r19
    24f4:	4a 95       	dec	r20
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <setPinMode+0x394>
    24f8:	26 2b       	or	r18, r22
    24fa:	fc 01       	movw	r30, r24
    24fc:	20 83       	st	Z, r18
                    clear_bit(PORTA, pinNum);
    24fe:	82 e2       	ldi	r24, 0x22	; 34
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	22 e2       	ldi	r18, 0x22	; 34
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	f9 01       	movw	r30, r18
    2508:	20 81       	ld	r18, Z
    250a:	62 2f       	mov	r22, r18
    250c:	2b 81       	ldd	r18, Y+3	; 0x03
    250e:	42 2f       	mov	r20, r18
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	21 e0       	ldi	r18, 0x01	; 1
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	04 2e       	mov	r0, r20
    2518:	02 c0       	rjmp	.+4      	; 0x251e <setPinMode+0x3c2>
    251a:	22 0f       	add	r18, r18
    251c:	33 1f       	adc	r19, r19
    251e:	0a 94       	dec	r0
    2520:	e2 f7       	brpl	.-8      	; 0x251a <setPinMode+0x3be>
    2522:	20 95       	com	r18
    2524:	26 23       	and	r18, r22
    2526:	fc 01       	movw	r30, r24
    2528:	20 83       	st	Z, r18
                    break;
    252a:	81 c0       	rjmp	.+258    	; 0x262e <setPinMode+0x4d2>
                case B:
                    set_bit(DDRB,    pinNum);
    252c:	84 e2       	ldi	r24, 0x24	; 36
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	24 e2       	ldi	r18, 0x24	; 36
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	f9 01       	movw	r30, r18
    2536:	20 81       	ld	r18, Z
    2538:	62 2f       	mov	r22, r18
    253a:	2b 81       	ldd	r18, Y+3	; 0x03
    253c:	42 2f       	mov	r20, r18
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	21 e0       	ldi	r18, 0x01	; 1
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	02 c0       	rjmp	.+4      	; 0x254a <setPinMode+0x3ee>
    2546:	22 0f       	add	r18, r18
    2548:	33 1f       	adc	r19, r19
    254a:	4a 95       	dec	r20
    254c:	e2 f7       	brpl	.-8      	; 0x2546 <setPinMode+0x3ea>
    254e:	26 2b       	or	r18, r22
    2550:	fc 01       	movw	r30, r24
    2552:	20 83       	st	Z, r18
                    clear_bit(PORTB, pinNum);
    2554:	85 e2       	ldi	r24, 0x25	; 37
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	25 e2       	ldi	r18, 0x25	; 37
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	f9 01       	movw	r30, r18
    255e:	20 81       	ld	r18, Z
    2560:	62 2f       	mov	r22, r18
    2562:	2b 81       	ldd	r18, Y+3	; 0x03
    2564:	42 2f       	mov	r20, r18
    2566:	50 e0       	ldi	r21, 0x00	; 0
    2568:	21 e0       	ldi	r18, 0x01	; 1
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	04 2e       	mov	r0, r20
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <setPinMode+0x418>
    2570:	22 0f       	add	r18, r18
    2572:	33 1f       	adc	r19, r19
    2574:	0a 94       	dec	r0
    2576:	e2 f7       	brpl	.-8      	; 0x2570 <setPinMode+0x414>
    2578:	20 95       	com	r18
    257a:	26 23       	and	r18, r22
    257c:	fc 01       	movw	r30, r24
    257e:	20 83       	st	Z, r18
                    break;
    2580:	56 c0       	rjmp	.+172    	; 0x262e <setPinMode+0x4d2>
                case C:
                    set_bit(DDRC,    pinNum);
    2582:	87 e2       	ldi	r24, 0x27	; 39
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	27 e2       	ldi	r18, 0x27	; 39
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	f9 01       	movw	r30, r18
    258c:	20 81       	ld	r18, Z
    258e:	62 2f       	mov	r22, r18
    2590:	2b 81       	ldd	r18, Y+3	; 0x03
    2592:	42 2f       	mov	r20, r18
    2594:	50 e0       	ldi	r21, 0x00	; 0
    2596:	21 e0       	ldi	r18, 0x01	; 1
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <setPinMode+0x444>
    259c:	22 0f       	add	r18, r18
    259e:	33 1f       	adc	r19, r19
    25a0:	4a 95       	dec	r20
    25a2:	e2 f7       	brpl	.-8      	; 0x259c <setPinMode+0x440>
    25a4:	26 2b       	or	r18, r22
    25a6:	fc 01       	movw	r30, r24
    25a8:	20 83       	st	Z, r18
                    clear_bit(PORTC, pinNum);
    25aa:	88 e2       	ldi	r24, 0x28	; 40
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	28 e2       	ldi	r18, 0x28	; 40
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	f9 01       	movw	r30, r18
    25b4:	20 81       	ld	r18, Z
    25b6:	62 2f       	mov	r22, r18
    25b8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ba:	42 2f       	mov	r20, r18
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	21 e0       	ldi	r18, 0x01	; 1
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	04 2e       	mov	r0, r20
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <setPinMode+0x46e>
    25c6:	22 0f       	add	r18, r18
    25c8:	33 1f       	adc	r19, r19
    25ca:	0a 94       	dec	r0
    25cc:	e2 f7       	brpl	.-8      	; 0x25c6 <setPinMode+0x46a>
    25ce:	20 95       	com	r18
    25d0:	26 23       	and	r18, r22
    25d2:	fc 01       	movw	r30, r24
    25d4:	20 83       	st	Z, r18
                    break;
    25d6:	2b c0       	rjmp	.+86     	; 0x262e <setPinMode+0x4d2>
                case D:
                    set_bit(DDRD,    pinNum);
    25d8:	8a e2       	ldi	r24, 0x2A	; 42
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	2a e2       	ldi	r18, 0x2A	; 42
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	f9 01       	movw	r30, r18
    25e2:	20 81       	ld	r18, Z
    25e4:	62 2f       	mov	r22, r18
    25e6:	2b 81       	ldd	r18, Y+3	; 0x03
    25e8:	42 2f       	mov	r20, r18
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	21 e0       	ldi	r18, 0x01	; 1
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <setPinMode+0x49a>
    25f2:	22 0f       	add	r18, r18
    25f4:	33 1f       	adc	r19, r19
    25f6:	4a 95       	dec	r20
    25f8:	e2 f7       	brpl	.-8      	; 0x25f2 <setPinMode+0x496>
    25fa:	26 2b       	or	r18, r22
    25fc:	fc 01       	movw	r30, r24
    25fe:	20 83       	st	Z, r18
                    clear_bit(PORTD, pinNum);
    2600:	8b e2       	ldi	r24, 0x2B	; 43
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	2b e2       	ldi	r18, 0x2B	; 43
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	f9 01       	movw	r30, r18
    260a:	20 81       	ld	r18, Z
    260c:	62 2f       	mov	r22, r18
    260e:	2b 81       	ldd	r18, Y+3	; 0x03
    2610:	42 2f       	mov	r20, r18
    2612:	50 e0       	ldi	r21, 0x00	; 0
    2614:	21 e0       	ldi	r18, 0x01	; 1
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	04 2e       	mov	r0, r20
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <setPinMode+0x4c4>
    261c:	22 0f       	add	r18, r18
    261e:	33 1f       	adc	r19, r19
    2620:	0a 94       	dec	r0
    2622:	e2 f7       	brpl	.-8      	; 0x261c <setPinMode+0x4c0>
    2624:	20 95       	com	r18
    2626:	26 23       	and	r18, r22
    2628:	fc 01       	movw	r30, r24
    262a:	20 83       	st	Z, r18
                    break;
    262c:	00 00       	nop
            }
            break;
    262e:	be c0       	rjmp	.+380    	; 0x27ac <setPinMode+0x650>

        case MODE_HIGH:
            switch (portLetter)
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	88 2f       	mov	r24, r24
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	81 30       	cpi	r24, 0x01	; 1
    2638:	91 05       	cpc	r25, r1
    263a:	c9 f1       	breq	.+114    	; 0x26ae <setPinMode+0x552>
    263c:	82 30       	cpi	r24, 0x02	; 2
    263e:	91 05       	cpc	r25, r1
    2640:	1c f4       	brge	.+6      	; 0x2648 <setPinMode+0x4ec>
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	51 f0       	breq	.+20     	; 0x265a <setPinMode+0x4fe>
                case D:
                    set_bit(DDRD,  pinNum);
                    set_bit(PORTD, pinNum);
                    break;
            }
            break;
    2646:	b2 c0       	rjmp	.+356    	; 0x27ac <setPinMode+0x650>
                    break;
            }
            break;

        case MODE_HIGH:
            switch (portLetter)
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	91 05       	cpc	r25, r1
    264c:	09 f4       	brne	.+2      	; 0x2650 <setPinMode+0x4f4>
    264e:	59 c0       	rjmp	.+178    	; 0x2702 <setPinMode+0x5a6>
    2650:	83 30       	cpi	r24, 0x03	; 3
    2652:	91 05       	cpc	r25, r1
    2654:	09 f4       	brne	.+2      	; 0x2658 <setPinMode+0x4fc>
    2656:	7f c0       	rjmp	.+254    	; 0x2756 <setPinMode+0x5fa>
                case D:
                    set_bit(DDRD,  pinNum);
                    set_bit(PORTD, pinNum);
                    break;
            }
            break;
    2658:	a9 c0       	rjmp	.+338    	; 0x27ac <setPinMode+0x650>

        case MODE_HIGH:
            switch (portLetter)
            {
                case A:
                    set_bit(DDRA,  pinNum);
    265a:	81 e2       	ldi	r24, 0x21	; 33
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	21 e2       	ldi	r18, 0x21	; 33
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	f9 01       	movw	r30, r18
    2664:	20 81       	ld	r18, Z
    2666:	62 2f       	mov	r22, r18
    2668:	2b 81       	ldd	r18, Y+3	; 0x03
    266a:	42 2f       	mov	r20, r18
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	21 e0       	ldi	r18, 0x01	; 1
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <setPinMode+0x51c>
    2674:	22 0f       	add	r18, r18
    2676:	33 1f       	adc	r19, r19
    2678:	4a 95       	dec	r20
    267a:	e2 f7       	brpl	.-8      	; 0x2674 <setPinMode+0x518>
    267c:	26 2b       	or	r18, r22
    267e:	fc 01       	movw	r30, r24
    2680:	20 83       	st	Z, r18
                    set_bit(PORTA, pinNum);
    2682:	82 e2       	ldi	r24, 0x22	; 34
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	22 e2       	ldi	r18, 0x22	; 34
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	f9 01       	movw	r30, r18
    268c:	20 81       	ld	r18, Z
    268e:	62 2f       	mov	r22, r18
    2690:	2b 81       	ldd	r18, Y+3	; 0x03
    2692:	42 2f       	mov	r20, r18
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	21 e0       	ldi	r18, 0x01	; 1
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	04 2e       	mov	r0, r20
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <setPinMode+0x546>
    269e:	22 0f       	add	r18, r18
    26a0:	33 1f       	adc	r19, r19
    26a2:	0a 94       	dec	r0
    26a4:	e2 f7       	brpl	.-8      	; 0x269e <setPinMode+0x542>
    26a6:	26 2b       	or	r18, r22
    26a8:	fc 01       	movw	r30, r24
    26aa:	20 83       	st	Z, r18
                    break;
    26ac:	7e c0       	rjmp	.+252    	; 0x27aa <setPinMode+0x64e>
                case B:
                    set_bit(DDRB,  pinNum);
    26ae:	84 e2       	ldi	r24, 0x24	; 36
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	24 e2       	ldi	r18, 0x24	; 36
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	f9 01       	movw	r30, r18
    26b8:	20 81       	ld	r18, Z
    26ba:	62 2f       	mov	r22, r18
    26bc:	2b 81       	ldd	r18, Y+3	; 0x03
    26be:	42 2f       	mov	r20, r18
    26c0:	50 e0       	ldi	r21, 0x00	; 0
    26c2:	21 e0       	ldi	r18, 0x01	; 1
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	02 c0       	rjmp	.+4      	; 0x26cc <setPinMode+0x570>
    26c8:	22 0f       	add	r18, r18
    26ca:	33 1f       	adc	r19, r19
    26cc:	4a 95       	dec	r20
    26ce:	e2 f7       	brpl	.-8      	; 0x26c8 <setPinMode+0x56c>
    26d0:	26 2b       	or	r18, r22
    26d2:	fc 01       	movw	r30, r24
    26d4:	20 83       	st	Z, r18
                    set_bit(PORTB, pinNum);
    26d6:	85 e2       	ldi	r24, 0x25	; 37
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	25 e2       	ldi	r18, 0x25	; 37
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	f9 01       	movw	r30, r18
    26e0:	20 81       	ld	r18, Z
    26e2:	62 2f       	mov	r22, r18
    26e4:	2b 81       	ldd	r18, Y+3	; 0x03
    26e6:	42 2f       	mov	r20, r18
    26e8:	50 e0       	ldi	r21, 0x00	; 0
    26ea:	21 e0       	ldi	r18, 0x01	; 1
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	04 2e       	mov	r0, r20
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <setPinMode+0x59a>
    26f2:	22 0f       	add	r18, r18
    26f4:	33 1f       	adc	r19, r19
    26f6:	0a 94       	dec	r0
    26f8:	e2 f7       	brpl	.-8      	; 0x26f2 <setPinMode+0x596>
    26fa:	26 2b       	or	r18, r22
    26fc:	fc 01       	movw	r30, r24
    26fe:	20 83       	st	Z, r18
                    break;
    2700:	54 c0       	rjmp	.+168    	; 0x27aa <setPinMode+0x64e>
                case C:
                    set_bit(DDRC,  pinNum);
    2702:	87 e2       	ldi	r24, 0x27	; 39
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	27 e2       	ldi	r18, 0x27	; 39
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	f9 01       	movw	r30, r18
    270c:	20 81       	ld	r18, Z
    270e:	62 2f       	mov	r22, r18
    2710:	2b 81       	ldd	r18, Y+3	; 0x03
    2712:	42 2f       	mov	r20, r18
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	21 e0       	ldi	r18, 0x01	; 1
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <setPinMode+0x5c4>
    271c:	22 0f       	add	r18, r18
    271e:	33 1f       	adc	r19, r19
    2720:	4a 95       	dec	r20
    2722:	e2 f7       	brpl	.-8      	; 0x271c <setPinMode+0x5c0>
    2724:	26 2b       	or	r18, r22
    2726:	fc 01       	movw	r30, r24
    2728:	20 83       	st	Z, r18
                    set_bit(PORTC, pinNum);
    272a:	88 e2       	ldi	r24, 0x28	; 40
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	28 e2       	ldi	r18, 0x28	; 40
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	f9 01       	movw	r30, r18
    2734:	20 81       	ld	r18, Z
    2736:	62 2f       	mov	r22, r18
    2738:	2b 81       	ldd	r18, Y+3	; 0x03
    273a:	42 2f       	mov	r20, r18
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	21 e0       	ldi	r18, 0x01	; 1
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	04 2e       	mov	r0, r20
    2744:	02 c0       	rjmp	.+4      	; 0x274a <setPinMode+0x5ee>
    2746:	22 0f       	add	r18, r18
    2748:	33 1f       	adc	r19, r19
    274a:	0a 94       	dec	r0
    274c:	e2 f7       	brpl	.-8      	; 0x2746 <setPinMode+0x5ea>
    274e:	26 2b       	or	r18, r22
    2750:	fc 01       	movw	r30, r24
    2752:	20 83       	st	Z, r18
                    break;
    2754:	2a c0       	rjmp	.+84     	; 0x27aa <setPinMode+0x64e>
                case D:
                    set_bit(DDRD,  pinNum);
    2756:	8a e2       	ldi	r24, 0x2A	; 42
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	2a e2       	ldi	r18, 0x2A	; 42
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	f9 01       	movw	r30, r18
    2760:	20 81       	ld	r18, Z
    2762:	62 2f       	mov	r22, r18
    2764:	2b 81       	ldd	r18, Y+3	; 0x03
    2766:	42 2f       	mov	r20, r18
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	21 e0       	ldi	r18, 0x01	; 1
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <setPinMode+0x618>
    2770:	22 0f       	add	r18, r18
    2772:	33 1f       	adc	r19, r19
    2774:	4a 95       	dec	r20
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <setPinMode+0x614>
    2778:	26 2b       	or	r18, r22
    277a:	fc 01       	movw	r30, r24
    277c:	20 83       	st	Z, r18
                    set_bit(PORTD, pinNum);
    277e:	8b e2       	ldi	r24, 0x2B	; 43
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	2b e2       	ldi	r18, 0x2B	; 43
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	f9 01       	movw	r30, r18
    2788:	20 81       	ld	r18, Z
    278a:	62 2f       	mov	r22, r18
    278c:	2b 81       	ldd	r18, Y+3	; 0x03
    278e:	42 2f       	mov	r20, r18
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	21 e0       	ldi	r18, 0x01	; 1
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	04 2e       	mov	r0, r20
    2798:	02 c0       	rjmp	.+4      	; 0x279e <setPinMode+0x642>
    279a:	22 0f       	add	r18, r18
    279c:	33 1f       	adc	r19, r19
    279e:	0a 94       	dec	r0
    27a0:	e2 f7       	brpl	.-8      	; 0x279a <setPinMode+0x63e>
    27a2:	26 2b       	or	r18, r22
    27a4:	fc 01       	movw	r30, r24
    27a6:	20 83       	st	Z, r18
                    break;
    27a8:	00 00       	nop
            }
            break;
    27aa:	00 00       	nop
    }
}
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <togglePinOutput>:
 *
 * @param pl Port descriptor for pin.
 * @param pinNum Pin number for pin.
 */
void togglePinOutput(portLetter pl, int pinNum)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <togglePinOutput+0x6>
    27c0:	0f 92       	push	r0
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	7b 83       	std	Y+3, r23	; 0x03
    27ca:	6a 83       	std	Y+2, r22	; 0x02
    switch (pl)
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	88 2f       	mov	r24, r24
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	91 05       	cpc	r25, r1
    27d6:	21 f1       	breq	.+72     	; 0x2820 <togglePinOutput+0x66>
    27d8:	82 30       	cpi	r24, 0x02	; 2
    27da:	91 05       	cpc	r25, r1
    27dc:	1c f4       	brge	.+6      	; 0x27e4 <togglePinOutput+0x2a>
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	49 f0       	breq	.+18     	; 0x27f4 <togglePinOutput+0x3a>
    27e2:	60 c0       	rjmp	.+192    	; 0x28a4 <togglePinOutput+0xea>
    27e4:	82 30       	cpi	r24, 0x02	; 2
    27e6:	91 05       	cpc	r25, r1
    27e8:	89 f1       	breq	.+98     	; 0x284c <togglePinOutput+0x92>
    27ea:	83 30       	cpi	r24, 0x03	; 3
    27ec:	91 05       	cpc	r25, r1
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <togglePinOutput+0x38>
    27f0:	43 c0       	rjmp	.+134    	; 0x2878 <togglePinOutput+0xbe>
    27f2:	58 c0       	rjmp	.+176    	; 0x28a4 <togglePinOutput+0xea>
    {
        case A:
            toggle_bit(PORTA, pinNum);
    27f4:	82 e2       	ldi	r24, 0x22	; 34
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	22 e2       	ldi	r18, 0x22	; 34
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	f9 01       	movw	r30, r18
    27fe:	20 81       	ld	r18, Z
    2800:	62 2f       	mov	r22, r18
    2802:	2a 81       	ldd	r18, Y+2	; 0x02
    2804:	42 2f       	mov	r20, r18
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	21 e0       	ldi	r18, 0x01	; 1
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	04 2e       	mov	r0, r20
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <togglePinOutput+0x5a>
    2810:	22 0f       	add	r18, r18
    2812:	33 1f       	adc	r19, r19
    2814:	0a 94       	dec	r0
    2816:	e2 f7       	brpl	.-8      	; 0x2810 <togglePinOutput+0x56>
    2818:	26 27       	eor	r18, r22
    281a:	fc 01       	movw	r30, r24
    281c:	20 83       	st	Z, r18
            break;
    281e:	42 c0       	rjmp	.+132    	; 0x28a4 <togglePinOutput+0xea>
        case B:
            toggle_bit(PORTB, pinNum);
    2820:	85 e2       	ldi	r24, 0x25	; 37
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	25 e2       	ldi	r18, 0x25	; 37
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	f9 01       	movw	r30, r18
    282a:	20 81       	ld	r18, Z
    282c:	62 2f       	mov	r22, r18
    282e:	2a 81       	ldd	r18, Y+2	; 0x02
    2830:	42 2f       	mov	r20, r18
    2832:	50 e0       	ldi	r21, 0x00	; 0
    2834:	21 e0       	ldi	r18, 0x01	; 1
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	04 2e       	mov	r0, r20
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <togglePinOutput+0x86>
    283c:	22 0f       	add	r18, r18
    283e:	33 1f       	adc	r19, r19
    2840:	0a 94       	dec	r0
    2842:	e2 f7       	brpl	.-8      	; 0x283c <togglePinOutput+0x82>
    2844:	26 27       	eor	r18, r22
    2846:	fc 01       	movw	r30, r24
    2848:	20 83       	st	Z, r18
            break;
    284a:	2c c0       	rjmp	.+88     	; 0x28a4 <togglePinOutput+0xea>
        case C:
            toggle_bit(PORTC, pinNum);
    284c:	88 e2       	ldi	r24, 0x28	; 40
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	28 e2       	ldi	r18, 0x28	; 40
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	f9 01       	movw	r30, r18
    2856:	20 81       	ld	r18, Z
    2858:	62 2f       	mov	r22, r18
    285a:	2a 81       	ldd	r18, Y+2	; 0x02
    285c:	42 2f       	mov	r20, r18
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	21 e0       	ldi	r18, 0x01	; 1
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	04 2e       	mov	r0, r20
    2866:	02 c0       	rjmp	.+4      	; 0x286c <togglePinOutput+0xb2>
    2868:	22 0f       	add	r18, r18
    286a:	33 1f       	adc	r19, r19
    286c:	0a 94       	dec	r0
    286e:	e2 f7       	brpl	.-8      	; 0x2868 <togglePinOutput+0xae>
    2870:	26 27       	eor	r18, r22
    2872:	fc 01       	movw	r30, r24
    2874:	20 83       	st	Z, r18
            break;
    2876:	16 c0       	rjmp	.+44     	; 0x28a4 <togglePinOutput+0xea>
        case D:
            toggle_bit(PORTD, pinNum);
    2878:	8b e2       	ldi	r24, 0x2B	; 43
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	2b e2       	ldi	r18, 0x2B	; 43
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	f9 01       	movw	r30, r18
    2882:	20 81       	ld	r18, Z
    2884:	62 2f       	mov	r22, r18
    2886:	2a 81       	ldd	r18, Y+2	; 0x02
    2888:	42 2f       	mov	r20, r18
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	21 e0       	ldi	r18, 0x01	; 1
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	04 2e       	mov	r0, r20
    2892:	02 c0       	rjmp	.+4      	; 0x2898 <togglePinOutput+0xde>
    2894:	22 0f       	add	r18, r18
    2896:	33 1f       	adc	r19, r19
    2898:	0a 94       	dec	r0
    289a:	e2 f7       	brpl	.-8      	; 0x2894 <togglePinOutput+0xda>
    289c:	26 27       	eor	r18, r22
    289e:	fc 01       	movw	r30, r24
    28a0:	20 83       	st	Z, r18
            break;
    28a2:	00 00       	nop
    }
}
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <__vector_28>:
 * placed in the 'gpsData' buffer and the count is incrmented. If
 * the buffer reaches an overflow condition then new characters
 * are placed at the end of the buffer.
 */
SIGNAL(USART1_RX_vect)
{
    28b0:	1f 92       	push	r1
    28b2:	0f 92       	push	r0
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	0f 92       	push	r0
    28b8:	11 24       	eor	r1, r1
    28ba:	2f 93       	push	r18
    28bc:	3f 93       	push	r19
    28be:	4f 93       	push	r20
    28c0:	5f 93       	push	r21
    28c2:	6f 93       	push	r22
    28c4:	7f 93       	push	r23
    28c6:	8f 93       	push	r24
    28c8:	9f 93       	push	r25
    28ca:	af 93       	push	r26
    28cc:	bf 93       	push	r27
    28ce:	ef 93       	push	r30
    28d0:	ff 93       	push	r31
    28d2:	df 93       	push	r29
    28d4:	cf 93       	push	r28
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    if (gpsSize < GPS_BUFFER_SIZE)
    28da:	80 91 31 03 	lds	r24, 0x0331
    28de:	90 91 32 03 	lds	r25, 0x0332
    28e2:	8a 35       	cpi	r24, 0x5A	; 90
    28e4:	91 05       	cpc	r25, r1
    28e6:	9c f4       	brge	.+38     	; 0x290e <__vector_28+0x5e>
    {
        gpsData[gpsSize++] = UDR1;
    28e8:	80 91 31 03 	lds	r24, 0x0331
    28ec:	90 91 32 03 	lds	r25, 0x0332
    28f0:	2e ec       	ldi	r18, 0xCE	; 206
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	f9 01       	movw	r30, r18
    28f6:	40 81       	ld	r20, Z
    28f8:	9c 01       	movw	r18, r24
    28fa:	29 57       	subi	r18, 0x79	; 121
    28fc:	3d 4f       	sbci	r19, 0xFD	; 253
    28fe:	f9 01       	movw	r30, r18
    2900:	40 83       	st	Z, r20
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	90 93 32 03 	sts	0x0332, r25
    2908:	80 93 31 03 	sts	0x0331, r24
    290c:	0d c0       	rjmp	.+26     	; 0x2928 <__vector_28+0x78>
    }
    else
    {
        gpsData[gpsSize - 1] = UDR1;
    290e:	80 91 31 03 	lds	r24, 0x0331
    2912:	90 91 32 03 	lds	r25, 0x0332
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	2e ec       	ldi	r18, 0xCE	; 206
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	f9 01       	movw	r30, r18
    291e:	20 81       	ld	r18, Z
    2920:	89 57       	subi	r24, 0x79	; 121
    2922:	9d 4f       	sbci	r25, 0xFD	; 253
    2924:	fc 01       	movw	r30, r24
    2926:	20 83       	st	Z, r18
    }
    
    timer_Wake();
    2928:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <timer_Wake>
}
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	ff 91       	pop	r31
    2932:	ef 91       	pop	r30
    2934:	bf 91       	pop	r27
    2936:	af 91       	pop	r26
    2938:	9f 91       	pop	r25
    293a:	8f 91       	pop	r24
    293c:	7f 91       	pop	r23
    293e:	6f 91       	pop	r22
    2940:	5f 91       	pop	r21
    2942:	4f 91       	pop	r20
    2944:	3f 91       	pop	r19
    2946:	2f 91       	pop	r18
    2948:	0f 90       	pop	r0
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	0f 90       	pop	r0
    294e:	1f 90       	pop	r1
    2950:	18 95       	reti

00002952 <gps_Init>:
/**
 * Initializes the GPS communications by intializing
 * the apropriate uart connection and enabling interrupts.
 */
void gps_Init(void)
{
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    usart_Init(GPS, GPS_BAUD_INIT);
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	49 e0       	ldi	r20, 0x09	; 9
    295e:	50 e0       	ldi	r21, 0x00	; 0
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	70 e0       	ldi	r23, 0x00	; 0
    2964:	0e 94 82 28 	call	0x5104	; 0x5104 <usart_Init>

    timer_Wait_MS(1000);
    2968:	88 ee       	ldi	r24, 0xE8	; 232
    296a:	93 e0       	ldi	r25, 0x03	; 3
    296c:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
    gps_Send_Msg(GPS_RATE_MSG);
    2970:	89 ec       	ldi	r24, 0xC9	; 201
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	0e 94 cf 14 	call	0x299e	; 0x299e <gps_Send_Msg>
    timer_Wait_MS(100);
    2978:	84 e6       	ldi	r24, 0x64	; 100
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>

    gpsThreshold = data_Read_EEPROM(DATA_GPS_THRESHOLD_ADDR);
    2980:	86 e1       	ldi	r24, 0x16	; 22
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    2988:	80 93 39 03 	sts	0x0339, r24

    usart_Interrupt_RX(GPS, ENABLE);
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	0e 94 f2 2b 	call	0x57e4	; 0x57e4 <usart_Interrupt_RX>

    gps_Clear();
    2994:	0e 94 56 15 	call	0x2aac	; 0x2aac <gps_Clear>
}
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <gps_Send_Msg>:
 * Sends a message to the GPS itself.
 *
 * @param msg The message to send.
 */
void gps_Send_Msg(const char *msg)
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <gps_Send_Msg+0x6>
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
    usart_Text(GPS, msg);
    29ac:	29 81       	ldd	r18, Y+1	; 0x01
    29ae:	3a 81       	ldd	r19, Y+2	; 0x02
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	b9 01       	movw	r22, r18
    29b4:	0e 94 59 29 	call	0x52b2	; 0x52b2 <usart_Text>
}
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	cf 91       	pop	r28
    29be:	df 91       	pop	r29
    29c0:	08 95       	ret

000029c2 <gps_Poll>:

/**
 * Polls the GPS communications buffer for new data.
 */
void gps_Poll()
{
    29c2:	df 93       	push	r29
    29c4:	cf 93       	push	r28
    29c6:	0f 92       	push	r0
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
    cli();
    29cc:	f8 94       	cli
    bool newString = gps_Clear();
    29ce:	0e 94 56 15 	call	0x2aac	; 0x2aac <gps_Clear>
    29d2:	89 83       	std	Y+1, r24	; 0x01
    sei();
    29d4:	78 94       	sei

    if (newString)
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	88 23       	and	r24, r24
    29da:	29 f0       	breq	.+10     	; 0x29e6 <gps_Poll+0x24>
    {
        valid = gps_Parse();
    29dc:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <gps_Parse>
    29e0:	80 93 33 03 	sts	0x0333, r24
    29e4:	04 c0       	rjmp	.+8      	; 0x29ee <gps_Poll+0x2c>
            usart_Text(SERIAL, PSTR("*************OVERFLOW by : "));
            usart_Digits(SERIAL, gpsSize - GPS_BUFFER_SIZE, BASE_10, UNSIGNED_ZEROS, 3);
            usart_Text(SERIAL, PSTR("\r\n"));
        }
#endif
        gpsSize = 0;
    29e6:	10 92 32 03 	sts	0x0332, r1
    29ea:	10 92 31 03 	sts	0x0331, r1
    }

    if (valid)
    29ee:	80 91 33 03 	lds	r24, 0x0333
    29f2:	88 23       	and	r24, r24
    29f4:	e1 f4       	brne	.+56     	; 0x2a2e <gps_Poll+0x6c>
        usart_Write(SERIAL, '\n');
        usart_Text(SERIAL, PSTR("RAW       : "));
        usart_String(SERIAL, gpsData);
#endif

        latHigh = 20000;
    29f6:	80 e2       	ldi	r24, 0x20	; 32
    29f8:	9e e4       	ldi	r25, 0x4E	; 78
    29fa:	90 93 30 01 	sts	0x0130, r25
    29fe:	80 93 2f 01 	sts	0x012F, r24
        latLow = 0;
    2a02:	10 92 36 03 	sts	0x0336, r1
    2a06:	10 92 35 03 	sts	0x0335, r1
        lonHigh = 20000;
    2a0a:	80 e2       	ldi	r24, 0x20	; 32
    2a0c:	9e e4       	ldi	r25, 0x4E	; 78
    2a0e:	90 93 32 01 	sts	0x0132, r25
    2a12:	80 93 31 01 	sts	0x0131, r24
        lonLow = 0;
    2a16:	10 92 38 03 	sts	0x0338, r1
    2a1a:	10 92 37 03 	sts	0x0337, r1
        altitude = 60000;
    2a1e:	80 e6       	ldi	r24, 0x60	; 96
    2a20:	9a ee       	ldi	r25, 0xEA	; 234
    2a22:	90 93 34 01 	sts	0x0134, r25
    2a26:	80 93 33 01 	sts	0x0133, r24
        satNum = 0;
    2a2a:	10 92 34 03 	sts	0x0334, r1
    }
}
    2a2e:	0f 90       	pop	r0
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <gps_Pull>:
 * @param data Address of DataPoint to load into.
 *
 * @return T/F last GPS fix was valid.
 */
extern bool gps_Pull(DataPoint* data)
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <gps_Pull+0x6>
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	89 83       	std	Y+1, r24	; 0x01
    data->latHigh = latHigh;
    2a44:	20 91 2f 01 	lds	r18, 0x012F
    2a48:	30 91 30 01 	lds	r19, 0x0130
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	fc 01       	movw	r30, r24
    2a52:	31 83       	std	Z+1, r19	; 0x01
    2a54:	20 83       	st	Z, r18
    data->latLow = latLow;
    2a56:	20 91 35 03 	lds	r18, 0x0335
    2a5a:	30 91 36 03 	lds	r19, 0x0336
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	fc 01       	movw	r30, r24
    2a64:	33 83       	std	Z+3, r19	; 0x03
    2a66:	22 83       	std	Z+2, r18	; 0x02
    data->lonHigh = lonHigh;
    2a68:	20 91 31 01 	lds	r18, 0x0131
    2a6c:	30 91 32 01 	lds	r19, 0x0132
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	9a 81       	ldd	r25, Y+2	; 0x02
    2a74:	fc 01       	movw	r30, r24
    2a76:	35 83       	std	Z+5, r19	; 0x05
    2a78:	24 83       	std	Z+4, r18	; 0x04
    data->lonLow = lonLow;
    2a7a:	20 91 37 03 	lds	r18, 0x0337
    2a7e:	30 91 38 03 	lds	r19, 0x0338
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	fc 01       	movw	r30, r24
    2a88:	37 83       	std	Z+7, r19	; 0x07
    2a8a:	26 83       	std	Z+6, r18	; 0x06
    data->altitude = altitude;
    2a8c:	20 91 33 01 	lds	r18, 0x0133
    2a90:	30 91 34 01 	lds	r19, 0x0134
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	9a 81       	ldd	r25, Y+2	; 0x02
    2a98:	fc 01       	movw	r30, r24
    2a9a:	31 87       	std	Z+9, r19	; 0x09
    2a9c:	20 87       	std	Z+8, r18	; 0x08

    return valid;
    2a9e:	80 91 33 03 	lds	r24, 0x0333
}
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	cf 91       	pop	r28
    2aa8:	df 91       	pop	r29
    2aaa:	08 95       	ret

00002aac <gps_Clear>:
 * and moves any valid GPS string into the 'goodData' buffer.
 *
 * @return Returns true if a new message was found, false if not.
 */
bool gps_Clear(void)
{
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <gps_Clear+0x6>
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <gps_Clear+0x8>
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <gps_Clear+0xa>
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    int i, j, k;

    for (k = 0; k < gpsSize; k++)
    2aba:	1e 82       	std	Y+6, r1	; 0x06
    2abc:	1d 82       	std	Y+5, r1	; 0x05
    2abe:	68 c0       	rjmp	.+208    	; 0x2b90 <gps_Clear+0xe4>
    {
        if (gpsData[k] == ',')
    2ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac4:	89 57       	subi	r24, 0x79	; 121
    2ac6:	9d 4f       	sbci	r25, 0xFD	; 253
    2ac8:	fc 01       	movw	r30, r24
    2aca:	80 81       	ld	r24, Z
    2acc:	8c 32       	cpi	r24, 0x2C	; 44
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <gps_Clear+0x26>
    2ad0:	5a c0       	rjmp	.+180    	; 0x2b86 <gps_Clear+0xda>
        {
            for (i = k + 1; i < gpsSize; i++)
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad6:	01 96       	adiw	r24, 0x01	; 1
    2ad8:	9a 83       	std	Y+2, r25	; 0x02
    2ada:	89 83       	std	Y+1, r24	; 0x01
    2adc:	4a c0       	rjmp	.+148    	; 0x2b72 <gps_Clear+0xc6>
            {
                if (gpsData[i] == '\n' && i > 3 && gpsData[i - 4] == '*')
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae2:	89 57       	subi	r24, 0x79	; 121
    2ae4:	9d 4f       	sbci	r25, 0xFD	; 253
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	80 81       	ld	r24, Z
    2aea:	8a 30       	cpi	r24, 0x0A	; 10
    2aec:	e9 f5       	brne	.+122    	; 0x2b68 <gps_Clear+0xbc>
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	9a 81       	ldd	r25, Y+2	; 0x02
    2af2:	84 30       	cpi	r24, 0x04	; 4
    2af4:	91 05       	cpc	r25, r1
    2af6:	c4 f1       	brlt	.+112    	; 0x2b68 <gps_Clear+0xbc>
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	9a 81       	ldd	r25, Y+2	; 0x02
    2afc:	04 97       	sbiw	r24, 0x04	; 4
    2afe:	89 57       	subi	r24, 0x79	; 121
    2b00:	9d 4f       	sbci	r25, 0xFD	; 253
    2b02:	fc 01       	movw	r30, r24
    2b04:	80 81       	ld	r24, Z
    2b06:	8a 32       	cpi	r24, 0x2A	; 42
    2b08:	79 f5       	brne	.+94     	; 0x2b68 <gps_Clear+0xbc>
                {
                    for (j = 0; j <= i - 4; j++)
    2b0a:	1c 82       	std	Y+4, r1	; 0x04
    2b0c:	1b 82       	std	Y+3, r1	; 0x03
    2b0e:	16 c0       	rjmp	.+44     	; 0x2b3c <gps_Clear+0x90>
                    {
                        goodData[j] = gpsData[j + k - 1];
    2b10:	2b 81       	ldd	r18, Y+3	; 0x03
    2b12:	3c 81       	ldd	r19, Y+4	; 0x04
    2b14:	8d 81       	ldd	r24, Y+5	; 0x05
    2b16:	9e 81       	ldd	r25, Y+6	; 0x06
    2b18:	82 0f       	add	r24, r18
    2b1a:	93 1f       	adc	r25, r19
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	89 57       	subi	r24, 0x79	; 121
    2b20:	9d 4f       	sbci	r25, 0xFD	; 253
    2b22:	fc 01       	movw	r30, r24
    2b24:	20 81       	ld	r18, Z
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2a:	8f 51       	subi	r24, 0x1F	; 31
    2b2c:	9d 4f       	sbci	r25, 0xFD	; 253
    2b2e:	fc 01       	movw	r30, r24
    2b30:	20 83       	st	Z, r18
        {
            for (i = k + 1; i < gpsSize; i++)
            {
                if (gpsData[i] == '\n' && i > 3 && gpsData[i - 4] == '*')
                {
                    for (j = 0; j <= i - 4; j++)
    2b32:	8b 81       	ldd	r24, Y+3	; 0x03
    2b34:	9c 81       	ldd	r25, Y+4	; 0x04
    2b36:	01 96       	adiw	r24, 0x01	; 1
    2b38:	9c 83       	std	Y+4, r25	; 0x04
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b40:	9c 01       	movw	r18, r24
    2b42:	24 50       	subi	r18, 0x04	; 4
    2b44:	30 40       	sbci	r19, 0x00	; 0
    2b46:	8b 81       	ldd	r24, Y+3	; 0x03
    2b48:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4a:	28 17       	cp	r18, r24
    2b4c:	39 07       	cpc	r19, r25
    2b4e:	04 f7       	brge	.-64     	; 0x2b10 <gps_Clear+0x64>
                    {
                        goodData[j] = gpsData[j + k - 1];
                    }
                    goodData[j] = '\0';
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	9c 81       	ldd	r25, Y+4	; 0x04
    2b54:	8f 51       	subi	r24, 0x1F	; 31
    2b56:	9d 4f       	sbci	r25, 0xFD	; 253
    2b58:	fc 01       	movw	r30, r24
    2b5a:	10 82       	st	Z, r1
                    gpsSize = 0;
    2b5c:	10 92 32 03 	sts	0x0332, r1
    2b60:	10 92 31 03 	sts	0x0331, r1

                    return true;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	1f c0       	rjmp	.+62     	; 0x2ba6 <gps_Clear+0xfa>

    for (k = 0; k < gpsSize; k++)
    {
        if (gpsData[k] == ',')
        {
            for (i = k + 1; i < gpsSize; i++)
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	9a 83       	std	Y+2, r25	; 0x02
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	80 91 31 03 	lds	r24, 0x0331
    2b76:	90 91 32 03 	lds	r25, 0x0332
    2b7a:	29 81       	ldd	r18, Y+1	; 0x01
    2b7c:	3a 81       	ldd	r19, Y+2	; 0x02
    2b7e:	28 17       	cp	r18, r24
    2b80:	39 07       	cpc	r19, r25
    2b82:	0c f4       	brge	.+2      	; 0x2b86 <gps_Clear+0xda>
    2b84:	ac cf       	rjmp	.-168    	; 0x2ade <gps_Clear+0x32>
 */
bool gps_Clear(void)
{
    int i, j, k;

    for (k = 0; k < gpsSize; k++)
    2b86:	8d 81       	ldd	r24, Y+5	; 0x05
    2b88:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8a:	01 96       	adiw	r24, 0x01	; 1
    2b8c:	9e 83       	std	Y+6, r25	; 0x06
    2b8e:	8d 83       	std	Y+5, r24	; 0x05
    2b90:	80 91 31 03 	lds	r24, 0x0331
    2b94:	90 91 32 03 	lds	r25, 0x0332
    2b98:	2d 81       	ldd	r18, Y+5	; 0x05
    2b9a:	3e 81       	ldd	r19, Y+6	; 0x06
    2b9c:	28 17       	cp	r18, r24
    2b9e:	39 07       	cpc	r19, r25
    2ba0:	0c f4       	brge	.+2      	; 0x2ba4 <gps_Clear+0xf8>
    2ba2:	8e cf       	rjmp	.-228    	; 0x2ac0 <gps_Clear+0x14>
        }
    }

    //gpsSize = 0;

    return false;
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
}
    2ba6:	26 96       	adiw	r28, 0x06	; 6
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
    2bb2:	cf 91       	pop	r28
    2bb4:	df 91       	pop	r29
    2bb6:	08 95       	ret

00002bb8 <gps_Parse>:
 *
 * @return Returns true if a valid GPS message was parsed that contained
 * the required number of satellites.
 */
bool gps_Parse(void)
{
    2bb8:	df 93       	push	r29
    2bba:	cf 93       	push	r28
    2bbc:	cd b7       	in	r28, 0x3d	; 61
    2bbe:	de b7       	in	r29, 0x3e	; 62
    2bc0:	2c 97       	sbiw	r28, 0x0c	; 12
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	cd bf       	out	0x3d, r28	; 61
    int i = 0;
    2bcc:	1a 82       	std	Y+2, r1	; 0x02
    2bce:	19 82       	std	Y+1, r1	; 0x01
    int j = 0;
    2bd0:	1c 82       	std	Y+4, r1	; 0x04
    2bd2:	1b 82       	std	Y+3, r1	; 0x03
    int search = 0;
    2bd4:	1e 82       	std	Y+6, r1	; 0x06
    2bd6:	1d 82       	std	Y+5, r1	; 0x05
    char temp[6];
    static bool ret = false;

    temp[5] = '\0';
    2bd8:	1c 86       	std	Y+12, r1	; 0x0c

    if (goodData[0] == 'A')
    2bda:	80 91 e1 02 	lds	r24, 0x02E1
    2bde:	81 34       	cpi	r24, 0x41	; 65
    2be0:	09 f0       	breq	.+2      	; 0x2be4 <gps_Parse+0x2c>
    2be2:	51 c2       	rjmp	.+1186   	; 0x3086 <gps_Parse+0x4ce>
    {
        /*
         * GPGGA Message format
         * MessageID,UTC,LAT,NS,LON,EW,FQ,SAT,HDoP,ALT,UNIT,HoG,UNIT,?,?
         */
        for (i = 0; i < GPS_STRING_SIZE - 1 && goodData[i] != '*';)
    2be4:	1a 82       	std	Y+2, r1	; 0x02
    2be6:	19 82       	std	Y+1, r1	; 0x01
    2be8:	3b c2       	rjmp	.+1142   	; 0x3060 <gps_Parse+0x4a8>
        {
            if (goodData[i] == ',')
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	9a 81       	ldd	r25, Y+2	; 0x02
    2bee:	8f 51       	subi	r24, 0x1F	; 31
    2bf0:	9d 4f       	sbci	r25, 0xFD	; 253
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	80 81       	ld	r24, Z
    2bf6:	8c 32       	cpi	r24, 0x2C	; 44
    2bf8:	81 f4       	brne	.+32     	; 0x2c1a <gps_Parse+0x62>
            {
                search++;
    2bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfe:	01 96       	adiw	r24, 0x01	; 1
    2c00:	9e 83       	std	Y+6, r25	; 0x06
    2c02:	8d 83       	std	Y+5, r24	; 0x05
                i++;
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	9a 81       	ldd	r25, Y+2	; 0x02
    2c08:	01 96       	adiw	r24, 0x01	; 1
    2c0a:	9a 83       	std	Y+2, r25	; 0x02
    2c0c:	89 83       	std	Y+1, r24	; 0x01

                if (search > 9) break;
    2c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c10:	9e 81       	ldd	r25, Y+6	; 0x06
    2c12:	8a 30       	cpi	r24, 0x0A	; 10
    2c14:	91 05       	cpc	r25, r1
    2c16:	0c f0       	brlt	.+2      	; 0x2c1a <gps_Parse+0x62>
    2c18:	32 c2       	rjmp	.+1124   	; 0x307e <gps_Parse+0x4c6>
            }

            switch ((ggaField)search)
    2c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1c:	88 2f       	mov	r24, r24
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	84 30       	cpi	r24, 0x04	; 4
    2c22:	91 05       	cpc	r25, r1
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <gps_Parse+0x70>
    2c26:	c3 c0       	rjmp	.+390    	; 0x2dae <gps_Parse+0x1f6>
    2c28:	85 30       	cpi	r24, 0x05	; 5
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	44 f4       	brge	.+16     	; 0x2c3e <gps_Parse+0x86>
    2c2e:	82 30       	cpi	r24, 0x02	; 2
    2c30:	91 05       	cpc	r25, r1
    2c32:	91 f0       	breq	.+36     	; 0x2c58 <gps_Parse+0xa0>
    2c34:	83 30       	cpi	r24, 0x03	; 3
    2c36:	91 05       	cpc	r25, r1
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <gps_Parse+0x84>
    2c3a:	91 c0       	rjmp	.+290    	; 0x2d5e <gps_Parse+0x1a6>
    2c3c:	f5 c1       	rjmp	.+1002   	; 0x3028 <gps_Parse+0x470>
    2c3e:	87 30       	cpi	r24, 0x07	; 7
    2c40:	91 05       	cpc	r25, r1
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <gps_Parse+0x8e>
    2c44:	5f c1       	rjmp	.+702    	; 0x2f04 <gps_Parse+0x34c>
    2c46:	89 30       	cpi	r24, 0x09	; 9
    2c48:	91 05       	cpc	r25, r1
    2c4a:	09 f4       	brne	.+2      	; 0x2c4e <gps_Parse+0x96>
    2c4c:	a9 c1       	rjmp	.+850    	; 0x2fa0 <gps_Parse+0x3e8>
    2c4e:	85 30       	cpi	r24, 0x05	; 5
    2c50:	91 05       	cpc	r25, r1
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <gps_Parse+0x9e>
    2c54:	2f c1       	rjmp	.+606    	; 0x2eb4 <gps_Parse+0x2fc>
    2c56:	e8 c1       	rjmp	.+976    	; 0x3028 <gps_Parse+0x470>
                     * Storage format: dddddddd dddddddd ffffffff ffffffff
                     * (d - degrees and minutes, f - fractional minutes)
                     */
                case GGA_LAT:
                {
                    if (goodData[i] == ',')
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5c:	8f 51       	subi	r24, 0x1F	; 31
    2c5e:	9d 4f       	sbci	r25, 0xFD	; 253
    2c60:	fc 01       	movw	r30, r24
    2c62:	80 81       	ld	r24, Z
    2c64:	8c 32       	cpi	r24, 0x2C	; 44
    2c66:	19 f4       	brne	.+6      	; 0x2c6e <gps_Parse+0xb6>
                    {
#ifdef GPS_DEBUG
                        usart_Text(SERIAL, PSTR("Bad at GGA_LAT\r\n"));
#endif
                        ret = false;
    2c68:	10 92 3a 03 	sts	0x033A, r1
                        break;
    2c6c:	de c1       	rjmp	.+956    	; 0x302a <gps_Parse+0x472>
                    }

                    for (j = 0; j < 4; j++)
    2c6e:	1c 82       	std	Y+4, r1	; 0x04
    2c70:	1b 82       	std	Y+3, r1	; 0x03
    2c72:	18 c0       	rjmp	.+48     	; 0x2ca4 <gps_Parse+0xec>
                    {
                        temp[j] = goodData[i + j];
    2c74:	29 81       	ldd	r18, Y+1	; 0x01
    2c76:	3a 81       	ldd	r19, Y+2	; 0x02
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7c:	82 0f       	add	r24, r18
    2c7e:	93 1f       	adc	r25, r19
    2c80:	8f 51       	subi	r24, 0x1F	; 31
    2c82:	9d 4f       	sbci	r25, 0xFD	; 253
    2c84:	fc 01       	movw	r30, r24
    2c86:	40 81       	ld	r20, Z
    2c88:	9e 01       	movw	r18, r28
    2c8a:	29 5f       	subi	r18, 0xF9	; 249
    2c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c90:	9c 81       	ldd	r25, Y+4	; 0x04
    2c92:	82 0f       	add	r24, r18
    2c94:	93 1f       	adc	r25, r19
    2c96:	fc 01       	movw	r30, r24
    2c98:	40 83       	st	Z, r20
#endif
                        ret = false;
                        break;
                    }

                    for (j = 0; j < 4; j++)
    2c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9e:	01 96       	adiw	r24, 0x01	; 1
    2ca0:	9c 83       	std	Y+4, r25	; 0x04
    2ca2:	8b 83       	std	Y+3, r24	; 0x03
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca8:	84 30       	cpi	r24, 0x04	; 4
    2caa:	91 05       	cpc	r25, r1
    2cac:	1c f3       	brlt	.-58     	; 0x2c74 <gps_Parse+0xbc>
                    {
                        temp[j] = goodData[i + j];
                    }
                    temp[j] = '\0';
    2cae:	9e 01       	movw	r18, r28
    2cb0:	29 5f       	subi	r18, 0xF9	; 249
    2cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb8:	82 0f       	add	r24, r18
    2cba:	93 1f       	adc	r25, r19
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	10 82       	st	Z, r1
                    i += j;
    2cc0:	29 81       	ldd	r18, Y+1	; 0x01
    2cc2:	3a 81       	ldd	r19, Y+2	; 0x02
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc8:	82 0f       	add	r24, r18
    2cca:	93 1f       	adc	r25, r19
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
                    latHigh = atoi(temp);
    2cd0:	ce 01       	movw	r24, r28
    2cd2:	07 96       	adiw	r24, 0x07	; 7
    2cd4:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <atoi>
    2cd8:	90 93 30 01 	sts	0x0130, r25
    2cdc:	80 93 2f 01 	sts	0x012F, r24

                    i++;
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	9a 83       	std	Y+2, r25	; 0x02
    2ce8:	89 83       	std	Y+1, r24	; 0x01

                    for (j = 0; j < 3; j++)
    2cea:	1c 82       	std	Y+4, r1	; 0x04
    2cec:	1b 82       	std	Y+3, r1	; 0x03
    2cee:	18 c0       	rjmp	.+48     	; 0x2d20 <gps_Parse+0x168>
                    {
                        temp[j] = goodData[i + j];
    2cf0:	29 81       	ldd	r18, Y+1	; 0x01
    2cf2:	3a 81       	ldd	r19, Y+2	; 0x02
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	82 0f       	add	r24, r18
    2cfa:	93 1f       	adc	r25, r19
    2cfc:	8f 51       	subi	r24, 0x1F	; 31
    2cfe:	9d 4f       	sbci	r25, 0xFD	; 253
    2d00:	fc 01       	movw	r30, r24
    2d02:	40 81       	ld	r20, Z
    2d04:	9e 01       	movw	r18, r28
    2d06:	29 5f       	subi	r18, 0xF9	; 249
    2d08:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0e:	82 0f       	add	r24, r18
    2d10:	93 1f       	adc	r25, r19
    2d12:	fc 01       	movw	r30, r24
    2d14:	40 83       	st	Z, r20
                    i += j;
                    latHigh = atoi(temp);

                    i++;

                    for (j = 0; j < 3; j++)
    2d16:	8b 81       	ldd	r24, Y+3	; 0x03
    2d18:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1a:	01 96       	adiw	r24, 0x01	; 1
    2d1c:	9c 83       	std	Y+4, r25	; 0x04
    2d1e:	8b 83       	std	Y+3, r24	; 0x03
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	9c 81       	ldd	r25, Y+4	; 0x04
    2d24:	83 30       	cpi	r24, 0x03	; 3
    2d26:	91 05       	cpc	r25, r1
    2d28:	1c f3       	brlt	.-58     	; 0x2cf0 <gps_Parse+0x138>
                    {
                        temp[j] = goodData[i + j];
                    }
                    temp[j] = '\0';
    2d2a:	9e 01       	movw	r18, r28
    2d2c:	29 5f       	subi	r18, 0xF9	; 249
    2d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	9c 81       	ldd	r25, Y+4	; 0x04
    2d34:	82 0f       	add	r24, r18
    2d36:	93 1f       	adc	r25, r19
    2d38:	fc 01       	movw	r30, r24
    2d3a:	10 82       	st	Z, r1
                    i += j;
    2d3c:	29 81       	ldd	r18, Y+1	; 0x01
    2d3e:	3a 81       	ldd	r19, Y+2	; 0x02
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	9c 81       	ldd	r25, Y+4	; 0x04
    2d44:	82 0f       	add	r24, r18
    2d46:	93 1f       	adc	r25, r19
    2d48:	9a 83       	std	Y+2, r25	; 0x02
    2d4a:	89 83       	std	Y+1, r24	; 0x01
                    latLow = atoi(temp);
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	07 96       	adiw	r24, 0x07	; 7
    2d50:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <atoi>
    2d54:	90 93 36 03 	sts	0x0336, r25
    2d58:	80 93 35 03 	sts	0x0335, r24

                    break;
    2d5c:	66 c1       	rjmp	.+716    	; 0x302a <gps_Parse+0x472>
                /*
                 * Extract North/South indicator.
                 */
                case GGA_NS:
                {
                    if (goodData[i] == ',')
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	9a 81       	ldd	r25, Y+2	; 0x02
    2d62:	8f 51       	subi	r24, 0x1F	; 31
    2d64:	9d 4f       	sbci	r25, 0xFD	; 253
    2d66:	fc 01       	movw	r30, r24
    2d68:	80 81       	ld	r24, Z
    2d6a:	8c 32       	cpi	r24, 0x2C	; 44
    2d6c:	19 f4       	brne	.+6      	; 0x2d74 <gps_Parse+0x1bc>
                    {
#ifdef GPS_DEBUG
                        usart_Text(SERIAL, PSTR("Bad at GGA_NS\r\n"));
#endif
                        ret = false;
    2d6e:	10 92 3a 03 	sts	0x033A, r1
                        break;
    2d72:	5b c1       	rjmp	.+694    	; 0x302a <gps_Parse+0x472>
                    }

                    if (goodData[i++] == 'S') latHigh = -latHigh;
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	9a 81       	ldd	r25, Y+2	; 0x02
    2d78:	8f 51       	subi	r24, 0x1F	; 31
    2d7a:	9d 4f       	sbci	r25, 0xFD	; 253
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	80 81       	ld	r24, Z
    2d80:	21 e0       	ldi	r18, 0x01	; 1
    2d82:	83 35       	cpi	r24, 0x53	; 83
    2d84:	09 f0       	breq	.+2      	; 0x2d88 <gps_Parse+0x1d0>
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8c:	01 96       	adiw	r24, 0x01	; 1
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
    2d92:	22 23       	and	r18, r18
    2d94:	59 f0       	breq	.+22     	; 0x2dac <gps_Parse+0x1f4>
    2d96:	80 91 2f 01 	lds	r24, 0x012F
    2d9a:	90 91 30 01 	lds	r25, 0x0130
    2d9e:	90 95       	com	r25
    2da0:	81 95       	neg	r24
    2da2:	9f 4f       	sbci	r25, 0xFF	; 255
    2da4:	90 93 30 01 	sts	0x0130, r25
    2da8:	80 93 2f 01 	sts	0x012F, r24

                    break;
    2dac:	3e c1       	rjmp	.+636    	; 0x302a <gps_Parse+0x472>
                 * Storage format: dddddddd dddddddd ffffffff ffffffff
                 * (d - degrees and minutes, f - fractional minutes)
                 */
                case GGA_LON:
                {
                    if (goodData[i] == ',')
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	9a 81       	ldd	r25, Y+2	; 0x02
    2db2:	8f 51       	subi	r24, 0x1F	; 31
    2db4:	9d 4f       	sbci	r25, 0xFD	; 253
    2db6:	fc 01       	movw	r30, r24
    2db8:	80 81       	ld	r24, Z
    2dba:	8c 32       	cpi	r24, 0x2C	; 44
    2dbc:	19 f4       	brne	.+6      	; 0x2dc4 <gps_Parse+0x20c>
                    {
#ifdef GPS_DEBUG
                        usart_Text(SERIAL, PSTR("Bad at GGA_LON\r\n"));
#endif
                        ret = false;
    2dbe:	10 92 3a 03 	sts	0x033A, r1
                        break;
    2dc2:	33 c1       	rjmp	.+614    	; 0x302a <gps_Parse+0x472>
                    }

                    for (j = 0; j < 5; j++)
    2dc4:	1c 82       	std	Y+4, r1	; 0x04
    2dc6:	1b 82       	std	Y+3, r1	; 0x03
    2dc8:	18 c0       	rjmp	.+48     	; 0x2dfa <gps_Parse+0x242>
                    {
                        temp[j] = goodData[i + j];
    2dca:	29 81       	ldd	r18, Y+1	; 0x01
    2dcc:	3a 81       	ldd	r19, Y+2	; 0x02
    2dce:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd2:	82 0f       	add	r24, r18
    2dd4:	93 1f       	adc	r25, r19
    2dd6:	8f 51       	subi	r24, 0x1F	; 31
    2dd8:	9d 4f       	sbci	r25, 0xFD	; 253
    2dda:	fc 01       	movw	r30, r24
    2ddc:	40 81       	ld	r20, Z
    2dde:	9e 01       	movw	r18, r28
    2de0:	29 5f       	subi	r18, 0xF9	; 249
    2de2:	3f 4f       	sbci	r19, 0xFF	; 255
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	82 0f       	add	r24, r18
    2dea:	93 1f       	adc	r25, r19
    2dec:	fc 01       	movw	r30, r24
    2dee:	40 83       	st	Z, r20
#endif
                        ret = false;
                        break;
                    }

                    for (j = 0; j < 5; j++)
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	9c 81       	ldd	r25, Y+4	; 0x04
    2df4:	01 96       	adiw	r24, 0x01	; 1
    2df6:	9c 83       	std	Y+4, r25	; 0x04
    2df8:	8b 83       	std	Y+3, r24	; 0x03
    2dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfe:	85 30       	cpi	r24, 0x05	; 5
    2e00:	91 05       	cpc	r25, r1
    2e02:	1c f3       	brlt	.-58     	; 0x2dca <gps_Parse+0x212>
                    {
                        temp[j] = goodData[i + j];
                    }
                    temp[j] = '\0';
    2e04:	9e 01       	movw	r18, r28
    2e06:	29 5f       	subi	r18, 0xF9	; 249
    2e08:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0e:	82 0f       	add	r24, r18
    2e10:	93 1f       	adc	r25, r19
    2e12:	fc 01       	movw	r30, r24
    2e14:	10 82       	st	Z, r1
                    i += j;
    2e16:	29 81       	ldd	r18, Y+1	; 0x01
    2e18:	3a 81       	ldd	r19, Y+2	; 0x02
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1e:	82 0f       	add	r24, r18
    2e20:	93 1f       	adc	r25, r19
    2e22:	9a 83       	std	Y+2, r25	; 0x02
    2e24:	89 83       	std	Y+1, r24	; 0x01
                    lonHigh = atoi(temp);
    2e26:	ce 01       	movw	r24, r28
    2e28:	07 96       	adiw	r24, 0x07	; 7
    2e2a:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <atoi>
    2e2e:	90 93 32 01 	sts	0x0132, r25
    2e32:	80 93 31 01 	sts	0x0131, r24

                    i++;
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3a:	01 96       	adiw	r24, 0x01	; 1
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	89 83       	std	Y+1, r24	; 0x01

                    for (j = 0; j < 3; j++)
    2e40:	1c 82       	std	Y+4, r1	; 0x04
    2e42:	1b 82       	std	Y+3, r1	; 0x03
    2e44:	18 c0       	rjmp	.+48     	; 0x2e76 <gps_Parse+0x2be>
                    {
                        temp[j] = goodData[i + j];
    2e46:	29 81       	ldd	r18, Y+1	; 0x01
    2e48:	3a 81       	ldd	r19, Y+2	; 0x02
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4e:	82 0f       	add	r24, r18
    2e50:	93 1f       	adc	r25, r19
    2e52:	8f 51       	subi	r24, 0x1F	; 31
    2e54:	9d 4f       	sbci	r25, 0xFD	; 253
    2e56:	fc 01       	movw	r30, r24
    2e58:	40 81       	ld	r20, Z
    2e5a:	9e 01       	movw	r18, r28
    2e5c:	29 5f       	subi	r18, 0xF9	; 249
    2e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	9c 81       	ldd	r25, Y+4	; 0x04
    2e64:	82 0f       	add	r24, r18
    2e66:	93 1f       	adc	r25, r19
    2e68:	fc 01       	movw	r30, r24
    2e6a:	40 83       	st	Z, r20
                    i += j;
                    lonHigh = atoi(temp);

                    i++;

                    for (j = 0; j < 3; j++)
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e70:	01 96       	adiw	r24, 0x01	; 1
    2e72:	9c 83       	std	Y+4, r25	; 0x04
    2e74:	8b 83       	std	Y+3, r24	; 0x03
    2e76:	8b 81       	ldd	r24, Y+3	; 0x03
    2e78:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7a:	83 30       	cpi	r24, 0x03	; 3
    2e7c:	91 05       	cpc	r25, r1
    2e7e:	1c f3       	brlt	.-58     	; 0x2e46 <gps_Parse+0x28e>
                    {
                        temp[j] = goodData[i + j];
                    }
                    temp[j] = '\0';
    2e80:	9e 01       	movw	r18, r28
    2e82:	29 5f       	subi	r18, 0xF9	; 249
    2e84:	3f 4f       	sbci	r19, 0xFF	; 255
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8a:	82 0f       	add	r24, r18
    2e8c:	93 1f       	adc	r25, r19
    2e8e:	fc 01       	movw	r30, r24
    2e90:	10 82       	st	Z, r1
                    i += j;
    2e92:	29 81       	ldd	r18, Y+1	; 0x01
    2e94:	3a 81       	ldd	r19, Y+2	; 0x02
    2e96:	8b 81       	ldd	r24, Y+3	; 0x03
    2e98:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9a:	82 0f       	add	r24, r18
    2e9c:	93 1f       	adc	r25, r19
    2e9e:	9a 83       	std	Y+2, r25	; 0x02
    2ea0:	89 83       	std	Y+1, r24	; 0x01
                    lonLow = atoi(temp);
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	07 96       	adiw	r24, 0x07	; 7
    2ea6:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <atoi>
    2eaa:	90 93 38 03 	sts	0x0338, r25
    2eae:	80 93 37 03 	sts	0x0337, r24

                    break;
    2eb2:	bb c0       	rjmp	.+374    	; 0x302a <gps_Parse+0x472>
                /*
                 * Extract East/West indicator.
                 */
                case GGA_EW:
                {
                    if (goodData[i] == ',')
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb8:	8f 51       	subi	r24, 0x1F	; 31
    2eba:	9d 4f       	sbci	r25, 0xFD	; 253
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	80 81       	ld	r24, Z
    2ec0:	8c 32       	cpi	r24, 0x2C	; 44
    2ec2:	19 f4       	brne	.+6      	; 0x2eca <gps_Parse+0x312>
                    {
#ifdef GPS_DEBUG
                        usart_Text(SERIAL, PSTR("Bad at GGA_EW\r\n"));
#endif
                        ret = false;
    2ec4:	10 92 3a 03 	sts	0x033A, r1
                        break;
    2ec8:	b0 c0       	rjmp	.+352    	; 0x302a <gps_Parse+0x472>
                    }

                    if (goodData[i++] == 'W') lonHigh = -lonHigh;
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ece:	8f 51       	subi	r24, 0x1F	; 31
    2ed0:	9d 4f       	sbci	r25, 0xFD	; 253
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	80 81       	ld	r24, Z
    2ed6:	21 e0       	ldi	r18, 0x01	; 1
    2ed8:	87 35       	cpi	r24, 0x57	; 87
    2eda:	09 f0       	breq	.+2      	; 0x2ede <gps_Parse+0x326>
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee2:	01 96       	adiw	r24, 0x01	; 1
    2ee4:	9a 83       	std	Y+2, r25	; 0x02
    2ee6:	89 83       	std	Y+1, r24	; 0x01
    2ee8:	22 23       	and	r18, r18
    2eea:	59 f0       	breq	.+22     	; 0x2f02 <gps_Parse+0x34a>
    2eec:	80 91 31 01 	lds	r24, 0x0131
    2ef0:	90 91 32 01 	lds	r25, 0x0132
    2ef4:	90 95       	com	r25
    2ef6:	81 95       	neg	r24
    2ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    2efa:	90 93 32 01 	sts	0x0132, r25
    2efe:	80 93 31 01 	sts	0x0131, r24

                    break;
    2f02:	93 c0       	rjmp	.+294    	; 0x302a <gps_Parse+0x472>
                 * GPS format: NN
                 * Not stored, used to check validity.
                 */
                case GGA_SAT:
                {
                    if (goodData[i] == ',')
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	9a 81       	ldd	r25, Y+2	; 0x02
    2f08:	8f 51       	subi	r24, 0x1F	; 31
    2f0a:	9d 4f       	sbci	r25, 0xFD	; 253
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	80 81       	ld	r24, Z
    2f10:	8c 32       	cpi	r24, 0x2C	; 44
    2f12:	29 f4       	brne	.+10     	; 0x2f1e <gps_Parse+0x366>
                    {
#ifdef GPS_DEBUG
                        usart_Text(SERIAL, PSTR("Bad at GGA_SAT\r\n"));
#endif
                        ret = false;
    2f14:	10 92 3a 03 	sts	0x033A, r1
                        satNum = 0;
    2f18:	10 92 34 03 	sts	0x0334, r1
                        break;
    2f1c:	86 c0       	rjmp	.+268    	; 0x302a <gps_Parse+0x472>
                    }

                    for (j = 0; goodData[i + j] != ','; j++)
    2f1e:	1c 82       	std	Y+4, r1	; 0x04
    2f20:	1b 82       	std	Y+3, r1	; 0x03
    2f22:	18 c0       	rjmp	.+48     	; 0x2f54 <gps_Parse+0x39c>
                    {
                        temp[j] = goodData[i + j];
    2f24:	29 81       	ldd	r18, Y+1	; 0x01
    2f26:	3a 81       	ldd	r19, Y+2	; 0x02
    2f28:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2c:	82 0f       	add	r24, r18
    2f2e:	93 1f       	adc	r25, r19
    2f30:	8f 51       	subi	r24, 0x1F	; 31
    2f32:	9d 4f       	sbci	r25, 0xFD	; 253
    2f34:	fc 01       	movw	r30, r24
    2f36:	40 81       	ld	r20, Z
    2f38:	9e 01       	movw	r18, r28
    2f3a:	29 5f       	subi	r18, 0xF9	; 249
    2f3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f40:	9c 81       	ldd	r25, Y+4	; 0x04
    2f42:	82 0f       	add	r24, r18
    2f44:	93 1f       	adc	r25, r19
    2f46:	fc 01       	movw	r30, r24
    2f48:	40 83       	st	Z, r20
                        ret = false;
                        satNum = 0;
                        break;
                    }

                    for (j = 0; goodData[i + j] != ','; j++)
    2f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4e:	01 96       	adiw	r24, 0x01	; 1
    2f50:	9c 83       	std	Y+4, r25	; 0x04
    2f52:	8b 83       	std	Y+3, r24	; 0x03
    2f54:	29 81       	ldd	r18, Y+1	; 0x01
    2f56:	3a 81       	ldd	r19, Y+2	; 0x02
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5c:	82 0f       	add	r24, r18
    2f5e:	93 1f       	adc	r25, r19
    2f60:	8f 51       	subi	r24, 0x1F	; 31
    2f62:	9d 4f       	sbci	r25, 0xFD	; 253
    2f64:	fc 01       	movw	r30, r24
    2f66:	80 81       	ld	r24, Z
    2f68:	8c 32       	cpi	r24, 0x2C	; 44
    2f6a:	e1 f6       	brne	.-72     	; 0x2f24 <gps_Parse+0x36c>
                    {
                        temp[j] = goodData[i + j];
                    }
                    temp[j] = '\0';
    2f6c:	9e 01       	movw	r18, r28
    2f6e:	29 5f       	subi	r18, 0xF9	; 249
    2f70:	3f 4f       	sbci	r19, 0xFF	; 255
    2f72:	8b 81       	ldd	r24, Y+3	; 0x03
    2f74:	9c 81       	ldd	r25, Y+4	; 0x04
    2f76:	82 0f       	add	r24, r18
    2f78:	93 1f       	adc	r25, r19
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	10 82       	st	Z, r1
                    satNum = atoi(temp);
    2f7e:	ce 01       	movw	r24, r28
    2f80:	07 96       	adiw	r24, 0x07	; 7
    2f82:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <atoi>
    2f86:	80 93 34 03 	sts	0x0334, r24
                    ret = satNum >= gpsThreshold;
    2f8a:	20 91 34 03 	lds	r18, 0x0334
    2f8e:	90 91 39 03 	lds	r25, 0x0339
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	29 17       	cp	r18, r25
    2f96:	08 f4       	brcc	.+2      	; 0x2f9a <gps_Parse+0x3e2>
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	80 93 3a 03 	sts	0x033A, r24
#ifdef GPS_DEBUG
                    if (!ret) usart_Text(SERIAL, PSTR("Bad at GGA_SAT_CHK\r\n"));
#endif

                    break;
    2f9e:	45 c0       	rjmp	.+138    	; 0x302a <gps_Parse+0x472>
                 * GPS format: varies, floating point.
                 * Storage format: unsigned integer of the whole portion.
                 */
                case GGA_ALT:
                {
                    if (goodData[i] == ',')
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa4:	8f 51       	subi	r24, 0x1F	; 31
    2fa6:	9d 4f       	sbci	r25, 0xFD	; 253
    2fa8:	fc 01       	movw	r30, r24
    2faa:	80 81       	ld	r24, Z
    2fac:	8c 32       	cpi	r24, 0x2C	; 44
    2fae:	19 f4       	brne	.+6      	; 0x2fb6 <gps_Parse+0x3fe>
                    {
#ifdef GPS_DEBUG
                        usart_Text(SERIAL, PSTR("Bad at GGA_ALT\r\n"));
#endif
                        ret = false;
    2fb0:	10 92 3a 03 	sts	0x033A, r1
                        break;
    2fb4:	3a c0       	rjmp	.+116    	; 0x302a <gps_Parse+0x472>
                    }

                    for (j = 0; goodData[i + j] != '.'; j++)
    2fb6:	1c 82       	std	Y+4, r1	; 0x04
    2fb8:	1b 82       	std	Y+3, r1	; 0x03
    2fba:	18 c0       	rjmp	.+48     	; 0x2fec <gps_Parse+0x434>
                    {
                        temp[j] = goodData[i + j];
    2fbc:	29 81       	ldd	r18, Y+1	; 0x01
    2fbe:	3a 81       	ldd	r19, Y+2	; 0x02
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc4:	82 0f       	add	r24, r18
    2fc6:	93 1f       	adc	r25, r19
    2fc8:	8f 51       	subi	r24, 0x1F	; 31
    2fca:	9d 4f       	sbci	r25, 0xFD	; 253
    2fcc:	fc 01       	movw	r30, r24
    2fce:	40 81       	ld	r20, Z
    2fd0:	9e 01       	movw	r18, r28
    2fd2:	29 5f       	subi	r18, 0xF9	; 249
    2fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fda:	82 0f       	add	r24, r18
    2fdc:	93 1f       	adc	r25, r19
    2fde:	fc 01       	movw	r30, r24
    2fe0:	40 83       	st	Z, r20
#endif
                        ret = false;
                        break;
                    }

                    for (j = 0; goodData[i + j] != '.'; j++)
    2fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe6:	01 96       	adiw	r24, 0x01	; 1
    2fe8:	9c 83       	std	Y+4, r25	; 0x04
    2fea:	8b 83       	std	Y+3, r24	; 0x03
    2fec:	29 81       	ldd	r18, Y+1	; 0x01
    2fee:	3a 81       	ldd	r19, Y+2	; 0x02
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff4:	82 0f       	add	r24, r18
    2ff6:	93 1f       	adc	r25, r19
    2ff8:	8f 51       	subi	r24, 0x1F	; 31
    2ffa:	9d 4f       	sbci	r25, 0xFD	; 253
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	80 81       	ld	r24, Z
    3000:	8e 32       	cpi	r24, 0x2E	; 46
    3002:	e1 f6       	brne	.-72     	; 0x2fbc <gps_Parse+0x404>
                    {
                        temp[j] = goodData[i + j];
                    }
                    temp[j] = '\0';
    3004:	9e 01       	movw	r18, r28
    3006:	29 5f       	subi	r18, 0xF9	; 249
    3008:	3f 4f       	sbci	r19, 0xFF	; 255
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	9c 81       	ldd	r25, Y+4	; 0x04
    300e:	82 0f       	add	r24, r18
    3010:	93 1f       	adc	r25, r19
    3012:	fc 01       	movw	r30, r24
    3014:	10 82       	st	Z, r1
                    altitude = atoi(temp);
    3016:	ce 01       	movw	r24, r28
    3018:	07 96       	adiw	r24, 0x07	; 7
    301a:	0e 94 a9 3f 	call	0x7f52	; 0x7f52 <atoi>
    301e:	90 93 34 01 	sts	0x0134, r25
    3022:	80 93 33 01 	sts	0x0133, r24

                    break;
    3026:	01 c0       	rjmp	.+2      	; 0x302a <gps_Parse+0x472>
                }
                default:
                {
                    break;
    3028:	00 00       	nop
                }
            }

            while (goodData[i] != ',' && goodData[i] != '*' && i < GPS_STRING_SIZE) i++;
    302a:	05 c0       	rjmp	.+10     	; 0x3036 <gps_Parse+0x47e>
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	9a 81       	ldd	r25, Y+2	; 0x02
    3030:	01 96       	adiw	r24, 0x01	; 1
    3032:	9a 83       	std	Y+2, r25	; 0x02
    3034:	89 83       	std	Y+1, r24	; 0x01
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	9a 81       	ldd	r25, Y+2	; 0x02
    303a:	8f 51       	subi	r24, 0x1F	; 31
    303c:	9d 4f       	sbci	r25, 0xFD	; 253
    303e:	fc 01       	movw	r30, r24
    3040:	80 81       	ld	r24, Z
    3042:	8c 32       	cpi	r24, 0x2C	; 44
    3044:	69 f0       	breq	.+26     	; 0x3060 <gps_Parse+0x4a8>
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	9a 81       	ldd	r25, Y+2	; 0x02
    304a:	8f 51       	subi	r24, 0x1F	; 31
    304c:	9d 4f       	sbci	r25, 0xFD	; 253
    304e:	fc 01       	movw	r30, r24
    3050:	80 81       	ld	r24, Z
    3052:	8a 32       	cpi	r24, 0x2A	; 42
    3054:	29 f0       	breq	.+10     	; 0x3060 <gps_Parse+0x4a8>
    3056:	89 81       	ldd	r24, Y+1	; 0x01
    3058:	9a 81       	ldd	r25, Y+2	; 0x02
    305a:	80 35       	cpi	r24, 0x50	; 80
    305c:	91 05       	cpc	r25, r1
    305e:	34 f3       	brlt	.-52     	; 0x302c <gps_Parse+0x474>
    {
        /*
         * GPGGA Message format
         * MessageID,UTC,LAT,NS,LON,EW,FQ,SAT,HDoP,ALT,UNIT,HoG,UNIT,?,?
         */
        for (i = 0; i < GPS_STRING_SIZE - 1 && goodData[i] != '*';)
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	9a 81       	ldd	r25, Y+2	; 0x02
    3064:	8f 34       	cpi	r24, 0x4F	; 79
    3066:	91 05       	cpc	r25, r1
    3068:	5c f4       	brge	.+22     	; 0x3080 <gps_Parse+0x4c8>
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	9a 81       	ldd	r25, Y+2	; 0x02
    306e:	8f 51       	subi	r24, 0x1F	; 31
    3070:	9d 4f       	sbci	r25, 0xFD	; 253
    3072:	fc 01       	movw	r30, r24
    3074:	80 81       	ld	r24, Z
    3076:	8a 32       	cpi	r24, 0x2A	; 42
    3078:	09 f0       	breq	.+2      	; 0x307c <gps_Parse+0x4c4>
    307a:	b7 cd       	rjmp	.-1170   	; 0x2bea <gps_Parse+0x32>
    307c:	01 c0       	rjmp	.+2      	; 0x3080 <gps_Parse+0x4c8>
            if (goodData[i] == ',')
            {
                search++;
                i++;

                if (search > 9) break;
    307e:	00 00       	nop
        usart_Text(SERIAL, PSTR("Bad at TYPE\r\n"));
#endif
        return false;
    }

    return ret;
    3080:	80 91 3a 03 	lds	r24, 0x033A
    3084:	01 c0       	rjmp	.+2      	; 0x3088 <gps_Parse+0x4d0>
    else
    {
#ifdef GPS_DEBUG
        usart_Text(SERIAL, PSTR("Bad at TYPE\r\n"));
#endif
        return false;
    3086:	80 e0       	ldi	r24, 0x00	; 0
    }

    return ret;
}
    3088:	2c 96       	adiw	r28, 0x0c	; 12
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <init>:
 * are restored to all EEPROM settings.
 *
 * @return Returns 'OK' if previous data was found by data_Init(), 'ERROR' otherwise.
 */
status init(void)
{
    309a:	8f 92       	push	r8
    309c:	9f 92       	push	r9
    309e:	af 92       	push	r10
    30a0:	bf 92       	push	r11
    30a2:	cf 92       	push	r12
    30a4:	df 92       	push	r13
    30a6:	ef 92       	push	r14
    30a8:	ff 92       	push	r15
    30aa:	0f 93       	push	r16
    30ac:	1f 93       	push	r17
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <init+0x1a>
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
    int i;

    cli();
    30b8:	f8 94       	cli

    user_Init();
    30ba:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <user_Init>
    timer_Wait_MS(1000);
    30be:	88 ee       	ldi	r24, 0xE8	; 232
    30c0:	93 e0       	ldi	r25, 0x03	; 3
    30c2:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
    coms_Init();
    30c6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <coms_Init>
    usart_Print_Num(SERIAL, UBRR1L);
    30ca:	8c ec       	ldi	r24, 0xCC	; 204
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	fc 01       	movw	r30, r24
    30d0:	80 81       	ld	r24, Z
    30d2:	88 2e       	mov	r8, r24
    30d4:	99 24       	eor	r9, r9
    30d6:	aa 24       	eor	r10, r10
    30d8:	bb 24       	eor	r11, r11
    30da:	cc 24       	eor	r12, r12
    30dc:	dd 24       	eor	r13, r13
    30de:	76 01       	movw	r14, r12
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	08 2d       	mov	r16, r8
    30e4:	19 2d       	mov	r17, r9
    30e6:	2a 2d       	mov	r18, r10
    30e8:	3b 2d       	mov	r19, r11
    30ea:	4c 2d       	mov	r20, r12
    30ec:	5d 2d       	mov	r21, r13
    30ee:	6e 2d       	mov	r22, r14
    30f0:	7f 2d       	mov	r23, r15
    30f2:	0e 94 91 29 	call	0x5322	; 0x5322 <usart_Print_Num>
    sensor_Init(true);
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <sensor_Init>
    data_Init();
    30fc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <data_Init>

    if (user_Get_Button(BUTTON_CLEAR))
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <user_Get_Button>
    3106:	88 23       	and	r24, r24
    3108:	71 f1       	breq	.+92     	; 0x3166 <init+0xcc>
    {

        for (i = 0; i < 50; i++)
    310a:	1a 82       	std	Y+2, r1	; 0x02
    310c:	19 82       	std	Y+1, r1	; 0x01
    310e:	15 c0       	rjmp	.+42     	; 0x313a <init+0xa0>
        {
            timer_Wait_MS(50);
    3110:	82 e3       	ldi	r24, 0x32	; 50
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
            user_Toggle_LED(LED_CLEAR);
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <user_Toggle_LED>
            user_Toggle_LED(LED_STOP);
    311e:	82 e0       	ldi	r24, 0x02	; 2
    3120:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <user_Toggle_LED>
            user_Toggle_LED(LED_START);
    3124:	83 e0       	ldi	r24, 0x03	; 3
    3126:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <user_Toggle_LED>
            user_Toggle_LED(LED_POWER);
    312a:	84 e0       	ldi	r24, 0x04	; 4
    312c:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <user_Toggle_LED>
    data_Init();

    if (user_Get_Button(BUTTON_CLEAR))
    {

        for (i = 0; i < 50; i++)
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	9a 81       	ldd	r25, Y+2	; 0x02
    3134:	01 96       	adiw	r24, 0x01	; 1
    3136:	9a 83       	std	Y+2, r25	; 0x02
    3138:	89 83       	std	Y+1, r24	; 0x01
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	9a 81       	ldd	r25, Y+2	; 0x02
    313e:	82 33       	cpi	r24, 0x32	; 50
    3140:	91 05       	cpc	r25, r1
    3142:	34 f3       	brlt	.-52     	; 0x3110 <init+0x76>
            user_Toggle_LED(LED_STOP);
            user_Toggle_LED(LED_START);
            user_Toggle_LED(LED_POWER);
        }

        adx_Calibrate();
    3144:	0e 94 58 02 	call	0x4b0	; 0x4b0 <adx_Calibrate>
        rtc_Init();
    3148:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <rtc_Init>
        data_Reset_EEPROM();
    314c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <data_Reset_EEPROM>

        wdt_enable(WDTO_120MS);
    3150:	88 e1       	ldi	r24, 0x18	; 24
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	2b e0       	ldi	r18, 0x0B	; 11
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	a8 95       	wdr
    315c:	80 93 60 00 	sts	0x0060, r24
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	20 93 60 00 	sts	0x0060, r18
    }

    sei();
    3166:	78 94       	sei

    return OK;
    3168:	81 e0       	ldi	r24, 0x01	; 1
}
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	1f 91       	pop	r17
    3174:	0f 91       	pop	r16
    3176:	ff 90       	pop	r15
    3178:	ef 90       	pop	r14
    317a:	df 90       	pop	r13
    317c:	cf 90       	pop	r12
    317e:	bf 90       	pop	r11
    3180:	af 90       	pop	r10
    3182:	9f 90       	pop	r9
    3184:	8f 90       	pop	r8
    3186:	08 95       	ret

00003188 <main>:
 * Main function of the program. Communications and buttons are continously
 * handled while data is collected according to settings and then stored at
 * the perscribed intervals if recording is enabled.
 */
int main (void)
{
    3188:	0f 93       	push	r16
    318a:	1f 93       	push	r17
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	ac 97       	sbiw	r28, 0x2c	; 44
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    init();
    31a0:	0e 94 4d 18 	call	0x309a	; 0x309a <init>
    
    int i;
    bool dataReady = false, recordReady = false;
    31a4:	1c 82       	std	Y+4, r1	; 0x04
    31a6:	1b 82       	std	Y+3, r1	; 0x03
    
    RunData runData = {false, false, 0, 0, 0};
    31a8:	28 e0       	ldi	r18, 0x08	; 8
    31aa:	ce 01       	movw	r24, r28
    31ac:	05 96       	adiw	r24, 0x05	; 5
    31ae:	fc 01       	movw	r30, r24
    31b0:	32 2f       	mov	r19, r18
    31b2:	11 92       	st	Z+, r1
    31b4:	3a 95       	dec	r19
    31b6:	e9 f7       	brne	.-6      	; 0x31b2 <main+0x2a>
    
    i = 0;
    31b8:	1a 82       	std	Y+2, r1	; 0x02
    31ba:	19 82       	std	Y+1, r1	; 0x01

    DataPoint data;
    sensor_Reset(&data);
    31bc:	ce 01       	movw	r24, r28
    31be:	0d 96       	adiw	r24, 0x0d	; 13
    31c0:	0e 94 33 21 	call	0x4266	; 0x4266 <sensor_Reset>

    runData.recordPeriod = (unsigned int)data_Read_EEPROM(DATA_GLOBAL_RATE_ADDR_H) << 8;
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    31cc:	88 2f       	mov	r24, r24
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	98 2f       	mov	r25, r24
    31d2:	88 27       	eor	r24, r24
    31d4:	98 87       	std	Y+8, r25	; 0x08
    31d6:	8f 83       	std	Y+7, r24	; 0x07
    runData.recordPeriod += (unsigned int)data_Read_EEPROM(DATA_GLOBAL_RATE_ADDR_L);
    31d8:	0f 81       	ldd	r16, Y+7	; 0x07
    31da:	18 85       	ldd	r17, Y+8	; 0x08
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    31e4:	88 2f       	mov	r24, r24
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	80 0f       	add	r24, r16
    31ea:	91 1f       	adc	r25, r17
    31ec:	98 87       	std	Y+8, r25	; 0x08
    31ee:	8f 83       	std	Y+7, r24	; 0x07

    if (runData.recordPeriod < MINIMUM_GLOBAL_INTERVAL)
    31f0:	8f 81       	ldd	r24, Y+7	; 0x07
    31f2:	98 85       	ldd	r25, Y+8	; 0x08
    31f4:	8a 30       	cpi	r24, 0x0A	; 10
    31f6:	91 05       	cpc	r25, r1
    31f8:	20 f4       	brcc	.+8      	; 0x3202 <main+0x7a>
    {
        runData.recordPeriod = MINIMUM_GLOBAL_INTERVAL;
    31fa:	8a e0       	ldi	r24, 0x0A	; 10
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	98 87       	std	Y+8, r25	; 0x08
    3200:	8f 83       	std	Y+7, r24	; 0x07
    }

    while(1)
    {
        user_Handle_Buttons(&runData);
    3202:	ce 01       	movw	r24, r28
    3204:	05 96       	adiw	r24, 0x05	; 5
    3206:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <user_Handle_Buttons>

        coms_Handle(&runData);
    320a:	ce 01       	movw	r24, r28
    320c:	05 96       	adiw	r24, 0x05	; 5
    320e:	0e 94 32 0c 	call	0x1864	; 0x1864 <coms_Handle>

        dataReady = sensor_Read(&data);
    3212:	ce 01       	movw	r24, r28
    3214:	0d 96       	adiw	r24, 0x0d	; 13
    3216:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <sensor_Read>
    321a:	8c 83       	std	Y+4, r24	; 0x04

        recordReady |= timer_Job_Ready4(&(runData.recordTimer), runData.recordPeriod, &(runData.recordLastTime), false);
    321c:	8b 81       	ldd	r24, Y+3	; 0x03
    321e:	08 2f       	mov	r16, r24
    3220:	10 e0       	ldi	r17, 0x00	; 0
    3222:	4f 81       	ldd	r20, Y+7	; 0x07
    3224:	58 85       	ldd	r21, Y+8	; 0x08
    3226:	ce 01       	movw	r24, r28
    3228:	05 96       	adiw	r24, 0x05	; 5
    322a:	04 96       	adiw	r24, 0x04	; 4
    322c:	9e 01       	movw	r18, r28
    322e:	2b 5f       	subi	r18, 0xFB	; 251
    3230:	3f 4f       	sbci	r19, 0xFF	; 255
    3232:	2a 5f       	subi	r18, 0xFA	; 250
    3234:	3f 4f       	sbci	r19, 0xFF	; 255
    3236:	ba 01       	movw	r22, r20
    3238:	a9 01       	movw	r20, r18
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <timer_Job_Ready4>
    3240:	88 2f       	mov	r24, r24
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	80 2b       	or	r24, r16
    3246:	91 2b       	or	r25, r17
    3248:	21 e0       	ldi	r18, 0x01	; 1
    324a:	00 97       	sbiw	r24, 0x00	; 0
    324c:	09 f4       	brne	.+2      	; 0x3250 <main+0xc8>
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	2b 83       	std	Y+3, r18	; 0x03

        if (dataReady && recordReady)
    3252:	8c 81       	ldd	r24, Y+4	; 0x04
    3254:	88 23       	and	r24, r24
    3256:	99 f1       	breq	.+102    	; 0x32be <main+0x136>
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	88 23       	and	r24, r24
    325c:	81 f1       	breq	.+96     	; 0x32be <main+0x136>
        {

            if (runData.record)
    325e:	8d 81       	ldd	r24, Y+5	; 0x05
    3260:	88 23       	and	r24, r24
    3262:	41 f0       	breq	.+16     	; 0x3274 <main+0xec>
            {
                if (data_Write(&data) == ERROR)
    3264:	ce 01       	movw	r24, r28
    3266:	0d 96       	adiw	r24, 0x0d	; 13
    3268:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <data_Write>
    326c:	88 23       	and	r24, r24
    326e:	01 f5       	brne	.+64     	; 0x32b0 <main+0x128>
                {
                    runData.record = false;
    3270:	1d 82       	std	Y+5, r1	; 0x05
    3272:	1e c0       	rjmp	.+60     	; 0x32b0 <main+0x128>
                }
            }
            else if (runData.liveData)
    3274:	8e 81       	ldd	r24, Y+6	; 0x06
    3276:	88 23       	and	r24, r24
    3278:	d9 f0       	breq	.+54     	; 0x32b0 <main+0x128>
            {
                for (i = 0; i < sizeof(DataPoint); i++) usart_Write(SERIAL, ((unsigned char*)(&data))[i]);
    327a:	1a 82       	std	Y+2, r1	; 0x02
    327c:	19 82       	std	Y+1, r1	; 0x01
    327e:	12 c0       	rjmp	.+36     	; 0x32a4 <main+0x11c>
    3280:	9e 01       	movw	r18, r28
    3282:	23 5f       	subi	r18, 0xF3	; 243
    3284:	3f 4f       	sbci	r19, 0xFF	; 255
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	9a 81       	ldd	r25, Y+2	; 0x02
    328a:	82 0f       	add	r24, r18
    328c:	93 1f       	adc	r25, r19
    328e:	fc 01       	movw	r30, r24
    3290:	90 81       	ld	r25, Z
    3292:	81 e0       	ldi	r24, 0x01	; 1
    3294:	69 2f       	mov	r22, r25
    3296:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	9a 81       	ldd	r25, Y+2	; 0x02
    329e:	01 96       	adiw	r24, 0x01	; 1
    32a0:	9a 83       	std	Y+2, r25	; 0x02
    32a2:	89 83       	std	Y+1, r24	; 0x01
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	9a 81       	ldd	r25, Y+2	; 0x02
    32a8:	80 32       	cpi	r24, 0x20	; 32
    32aa:	91 05       	cpc	r25, r1
    32ac:	48 f3       	brcs	.-46     	; 0x3280 <main+0xf8>
                runData.liveData = false;
    32ae:	1e 82       	std	Y+6, r1	; 0x06
            }

            runData.recordTimer = 0;
    32b0:	1a 86       	std	Y+10, r1	; 0x0a
    32b2:	19 86       	std	Y+9, r1	; 0x09
            recordReady = false;
    32b4:	1b 82       	std	Y+3, r1	; 0x03

            sensor_Reset(&data);
    32b6:	ce 01       	movw	r24, r28
    32b8:	0d 96       	adiw	r24, 0x0d	; 13
    32ba:	0e 94 33 21 	call	0x4266	; 0x4266 <sensor_Reset>
        }
        
        timer_Sleep();
    32be:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <timer_Sleep>
    }
    32c2:	9f cf       	rjmp	.-194    	; 0x3202 <main+0x7a>

000032c4 <light_Init>:

/**
 * Sends initialization values to the light sensor.
 */
void light_Init(void)
{
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <light_Init+0x6>
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    char out[2] = {LIGHT_ICTRL_ADDR, LIGHT_ICTRL_VAL};
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	89 83       	std	Y+1, r24	; 0x01
    32d2:	1a 82       	std	Y+2, r1	; 0x02
    twi_Write(LIGHT_ADDR, out, 2);
    32d4:	84 eb       	ldi	r24, 0xB4	; 180
    32d6:	9e 01       	movw	r18, r28
    32d8:	2f 5f       	subi	r18, 0xFF	; 255
    32da:	3f 4f       	sbci	r19, 0xFF	; 255
    32dc:	b9 01       	movw	r22, r18
    32de:	42 e0       	ldi	r20, 0x02	; 2
    32e0:	50 e0       	ldi	r21, 0x00	; 0
    32e2:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>

    timer_Wait_MS(100);
    32e6:	84 e6       	ldi	r24, 0x64	; 100
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>

    out[0] = LIGHT_CTRL_ADDR;
    32ee:	82 e0       	ldi	r24, 0x02	; 2
    32f0:	89 83       	std	Y+1, r24	; 0x01
    out[1] = LIGHT_CTRL_VAL;
    32f2:	83 ec       	ldi	r24, 0xC3	; 195
    32f4:	8a 83       	std	Y+2, r24	; 0x02
    twi_Write(LIGHT_ADDR, out, 2);
    32f6:	84 eb       	ldi	r24, 0xB4	; 180
    32f8:	9e 01       	movw	r18, r28
    32fa:	2f 5f       	subi	r18, 0xFF	; 255
    32fc:	3f 4f       	sbci	r19, 0xFF	; 255
    32fe:	b9 01       	movw	r22, r18
    3300:	42 e0       	ldi	r20, 0x02	; 2
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>

    twi_Write(LIGHT_ADDR, out, 1);
    3308:	84 eb       	ldi	r24, 0xB4	; 180
    330a:	9e 01       	movw	r18, r28
    330c:	2f 5f       	subi	r18, 0xFF	; 255
    330e:	3f 4f       	sbci	r19, 0xFF	; 255
    3310:	b9 01       	movw	r22, r18
    3312:	41 e0       	ldi	r20, 0x01	; 1
    3314:	50 e0       	ldi	r21, 0x00	; 0
    3316:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>
    twi_Read(LIGHT_ADDR, out + 1, 1);
    331a:	9e 01       	movw	r18, r28
    331c:	2e 5f       	subi	r18, 0xFE	; 254
    331e:	3f 4f       	sbci	r19, 0xFF	; 255
    3320:	84 eb       	ldi	r24, 0xB4	; 180
    3322:	b9 01       	movw	r22, r18
    3324:	41 e0       	ldi	r20, 0x01	; 1
    3326:	50 e0       	ldi	r21, 0x00	; 0
    3328:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>
}
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	cf 91       	pop	r28
    3332:	df 91       	pop	r29
    3334:	08 95       	ret

00003336 <light_Read>:
 *
 * @param exp Address to store the light exponent.
 * @param man Address to store the light mantissa.
 */
void light_Read(uint8_t* exp, uint8_t* man)
{
    3336:	df 93       	push	r29
    3338:	cf 93       	push	r28
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    333e:	27 97       	sbiw	r28, 0x07	; 7
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
    334a:	9d 83       	std	Y+5, r25	; 0x05
    334c:	8c 83       	std	Y+4, r24	; 0x04
    334e:	7f 83       	std	Y+7, r23	; 0x07
    3350:	6e 83       	std	Y+6, r22	; 0x06
    //NOTE: This device does not seem to follow all of the I2C protocol.
    //      Specifically, multiple byte reads do NOT increment address.
    //      Worked around below with two one-byte reads.

    char out[1] = {LIGHT_VAL_1_ADDR};
    3352:	83 e0       	ldi	r24, 0x03	; 3
    3354:	89 83       	std	Y+1, r24	; 0x01
    char in[2];

    twi_Write(LIGHT_ADDR, out, 1);
    3356:	84 eb       	ldi	r24, 0xB4	; 180
    3358:	9e 01       	movw	r18, r28
    335a:	2f 5f       	subi	r18, 0xFF	; 255
    335c:	3f 4f       	sbci	r19, 0xFF	; 255
    335e:	b9 01       	movw	r22, r18
    3360:	41 e0       	ldi	r20, 0x01	; 1
    3362:	50 e0       	ldi	r21, 0x00	; 0
    3364:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>
    twi_Read(LIGHT_ADDR, in, 2);
    3368:	9e 01       	movw	r18, r28
    336a:	2e 5f       	subi	r18, 0xFE	; 254
    336c:	3f 4f       	sbci	r19, 0xFF	; 255
    336e:	84 eb       	ldi	r24, 0xB4	; 180
    3370:	b9 01       	movw	r22, r18
    3372:	42 e0       	ldi	r20, 0x02	; 2
    3374:	50 e0       	ldi	r21, 0x00	; 0
    3376:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>

    *exp =  (0xF0 & in[0]) >> 4;
    337a:	8a 81       	ldd	r24, Y+2	; 0x02
    337c:	28 2f       	mov	r18, r24
    337e:	22 95       	swap	r18
    3380:	2f 70       	andi	r18, 0x0F	; 15
    3382:	8c 81       	ldd	r24, Y+4	; 0x04
    3384:	9d 81       	ldd	r25, Y+5	; 0x05
    3386:	fc 01       	movw	r30, r24
    3388:	20 83       	st	Z, r18
    *man = ((0x0F & in[0]) << 4) + (0x0F & in[1]);
    338a:	8a 81       	ldd	r24, Y+2	; 0x02
    338c:	88 2f       	mov	r24, r24
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	82 95       	swap	r24
    3392:	92 95       	swap	r25
    3394:	90 7f       	andi	r25, 0xF0	; 240
    3396:	98 27       	eor	r25, r24
    3398:	80 7f       	andi	r24, 0xF0	; 240
    339a:	98 27       	eor	r25, r24
    339c:	98 2f       	mov	r25, r24
    339e:	8b 81       	ldd	r24, Y+3	; 0x03
    33a0:	8f 70       	andi	r24, 0x0F	; 15
    33a2:	29 2f       	mov	r18, r25
    33a4:	28 0f       	add	r18, r24
    33a6:	8e 81       	ldd	r24, Y+6	; 0x06
    33a8:	9f 81       	ldd	r25, Y+7	; 0x07
    33aa:	fc 01       	movw	r30, r24
    33ac:	20 83       	st	Z, r18
}
    33ae:	27 96       	adiw	r28, 0x07	; 7
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	f8 94       	cli
    33b4:	de bf       	out	0x3e, r29	; 62
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	cd bf       	out	0x3d, r28	; 61
    33ba:	cf 91       	pop	r28
    33bc:	df 91       	pop	r29
    33be:	08 95       	ret

000033c0 <rtc_Init>:

/**
 * Initializes the real-time clock.
 */
void rtc_Init(void)
{
    33c0:	df 93       	push	r29
    33c2:	cf 93       	push	r28
    33c4:	00 d0       	rcall	.+0      	; 0x33c6 <rtc_Init+0x6>
    33c6:	00 d0       	rcall	.+0      	; 0x33c8 <rtc_Init+0x8>
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
    char out[4] = {RTC_CTRL_ADDR, RTC_CTRL_1, RTC_CTRL_2, RTC_CTRL_3};
    33cc:	87 e0       	ldi	r24, 0x07	; 7
    33ce:	89 83       	std	Y+1, r24	; 0x01
    33d0:	80 e8       	ldi	r24, 0x80	; 128
    33d2:	8a 83       	std	Y+2, r24	; 0x02
    33d4:	1b 82       	std	Y+3, r1	; 0x03
    33d6:	1c 82       	std	Y+4, r1	; 0x04
    twi_Write(RTC_ADDR, out, 4);
    33d8:	80 ed       	ldi	r24, 0xD0	; 208
    33da:	9e 01       	movw	r18, r28
    33dc:	2f 5f       	subi	r18, 0xFF	; 255
    33de:	3f 4f       	sbci	r19, 0xFF	; 255
    33e0:	b9 01       	movw	r22, r18
    33e2:	44 e0       	ldi	r20, 0x04	; 4
    33e4:	50 e0       	ldi	r21, 0x00	; 0
    33e6:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>
}
    33ea:	0f 90       	pop	r0
    33ec:	0f 90       	pop	r0
    33ee:	0f 90       	pop	r0
    33f0:	0f 90       	pop	r0
    33f2:	cf 91       	pop	r28
    33f4:	df 91       	pop	r29
    33f6:	08 95       	ret

000033f8 <rtc_Read_Time>:
 *
 * @param data Address of the DataPoint which the time
 * is read into.
 */
void rtc_Read_Time(DataPoint *data)
{
    33f8:	df 93       	push	r29
    33fa:	cf 93       	push	r28
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62
    3400:	2a 97       	sbiw	r28, 0x0a	; 10
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	9a 87       	std	Y+10, r25	; 0x0a
    340e:	89 87       	std	Y+9, r24	; 0x09
    char in[7];
    char out = RTC_TIME_ADDR;
    3410:	18 86       	std	Y+8, r1	; 0x08

    twi_Write(RTC_ADDR, &out, 1);
    3412:	9e 01       	movw	r18, r28
    3414:	28 5f       	subi	r18, 0xF8	; 248
    3416:	3f 4f       	sbci	r19, 0xFF	; 255
    3418:	80 ed       	ldi	r24, 0xD0	; 208
    341a:	b9 01       	movw	r22, r18
    341c:	41 e0       	ldi	r20, 0x01	; 1
    341e:	50 e0       	ldi	r21, 0x00	; 0
    3420:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>
    twi_Read(RTC_ADDR, in, 7);
    3424:	80 ed       	ldi	r24, 0xD0	; 208
    3426:	9e 01       	movw	r18, r28
    3428:	2f 5f       	subi	r18, 0xFF	; 255
    342a:	3f 4f       	sbci	r19, 0xFF	; 255
    342c:	b9 01       	movw	r22, r18
    342e:	47 e0       	ldi	r20, 0x07	; 7
    3430:	50 e0       	ldi	r21, 0x00	; 0
    3432:	0e 94 07 28 	call	0x500e	; 0x500e <twi_Read>

    data->bitpack.data.seconds = (in[0] & 0x0F) + (10 * ((in[0] & 0x70) >> 4));
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	28 2f       	mov	r18, r24
    343a:	2f 70       	andi	r18, 0x0F	; 15
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	88 2f       	mov	r24, r24
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	80 77       	andi	r24, 0x70	; 112
    3444:	90 70       	andi	r25, 0x00	; 0
    3446:	95 95       	asr	r25
    3448:	87 95       	ror	r24
    344a:	95 95       	asr	r25
    344c:	87 95       	ror	r24
    344e:	95 95       	asr	r25
    3450:	87 95       	ror	r24
    3452:	95 95       	asr	r25
    3454:	87 95       	ror	r24
    3456:	88 0f       	add	r24, r24
    3458:	98 2f       	mov	r25, r24
    345a:	99 0f       	add	r25, r25
    345c:	99 0f       	add	r25, r25
    345e:	89 0f       	add	r24, r25
    3460:	82 0f       	add	r24, r18
    3462:	28 2f       	mov	r18, r24
    3464:	2f 73       	andi	r18, 0x3F	; 63
    3466:	89 85       	ldd	r24, Y+9	; 0x09
    3468:	9a 85       	ldd	r25, Y+10	; 0x0a
    346a:	32 2f       	mov	r19, r18
    346c:	3f 70       	andi	r19, 0x0F	; 15
    346e:	32 95       	swap	r19
    3470:	30 7f       	andi	r19, 0xF0	; 240
    3472:	fc 01       	movw	r30, r24
    3474:	43 8d       	ldd	r20, Z+27	; 0x1b
    3476:	4f 70       	andi	r20, 0x0F	; 15
    3478:	34 2b       	or	r19, r20
    347a:	fc 01       	movw	r30, r24
    347c:	33 8f       	std	Z+27, r19	; 0x1b
    347e:	22 95       	swap	r18
    3480:	2f 70       	andi	r18, 0x0F	; 15
    3482:	23 70       	andi	r18, 0x03	; 3
    3484:	23 70       	andi	r18, 0x03	; 3
    3486:	fc 01       	movw	r30, r24
    3488:	34 8d       	ldd	r19, Z+28	; 0x1c
    348a:	3c 7f       	andi	r19, 0xFC	; 252
    348c:	23 2b       	or	r18, r19
    348e:	fc 01       	movw	r30, r24
    3490:	24 8f       	std	Z+28, r18	; 0x1c
    data->bitpack.data.minutes = (in[1] & 0x0F) + (10 * ((in[1] & 0x70) >> 4));
    3492:	8a 81       	ldd	r24, Y+2	; 0x02
    3494:	28 2f       	mov	r18, r24
    3496:	2f 70       	andi	r18, 0x0F	; 15
    3498:	8a 81       	ldd	r24, Y+2	; 0x02
    349a:	88 2f       	mov	r24, r24
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	80 77       	andi	r24, 0x70	; 112
    34a0:	90 70       	andi	r25, 0x00	; 0
    34a2:	95 95       	asr	r25
    34a4:	87 95       	ror	r24
    34a6:	95 95       	asr	r25
    34a8:	87 95       	ror	r24
    34aa:	95 95       	asr	r25
    34ac:	87 95       	ror	r24
    34ae:	95 95       	asr	r25
    34b0:	87 95       	ror	r24
    34b2:	88 0f       	add	r24, r24
    34b4:	98 2f       	mov	r25, r24
    34b6:	99 0f       	add	r25, r25
    34b8:	99 0f       	add	r25, r25
    34ba:	89 0f       	add	r24, r25
    34bc:	82 0f       	add	r24, r18
    34be:	28 2f       	mov	r18, r24
    34c0:	2f 73       	andi	r18, 0x3F	; 63
    34c2:	89 85       	ldd	r24, Y+9	; 0x09
    34c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c6:	22 0f       	add	r18, r18
    34c8:	22 0f       	add	r18, r18
    34ca:	fc 01       	movw	r30, r24
    34cc:	34 8d       	ldd	r19, Z+28	; 0x1c
    34ce:	33 70       	andi	r19, 0x03	; 3
    34d0:	23 2b       	or	r18, r19
    34d2:	fc 01       	movw	r30, r24
    34d4:	24 8f       	std	Z+28, r18	; 0x1c
    data->bitpack.data.hours   = (in[2] & 0x0F) + (10 * ((in[2] & 0x30) >> 4));
    34d6:	8b 81       	ldd	r24, Y+3	; 0x03
    34d8:	28 2f       	mov	r18, r24
    34da:	2f 70       	andi	r18, 0x0F	; 15
    34dc:	8b 81       	ldd	r24, Y+3	; 0x03
    34de:	88 2f       	mov	r24, r24
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	80 73       	andi	r24, 0x30	; 48
    34e4:	90 70       	andi	r25, 0x00	; 0
    34e6:	95 95       	asr	r25
    34e8:	87 95       	ror	r24
    34ea:	95 95       	asr	r25
    34ec:	87 95       	ror	r24
    34ee:	95 95       	asr	r25
    34f0:	87 95       	ror	r24
    34f2:	95 95       	asr	r25
    34f4:	87 95       	ror	r24
    34f6:	88 0f       	add	r24, r24
    34f8:	98 2f       	mov	r25, r24
    34fa:	99 0f       	add	r25, r25
    34fc:	99 0f       	add	r25, r25
    34fe:	89 0f       	add	r24, r25
    3500:	82 0f       	add	r24, r18
    3502:	28 2f       	mov	r18, r24
    3504:	2f 71       	andi	r18, 0x1F	; 31
    3506:	89 85       	ldd	r24, Y+9	; 0x09
    3508:	9a 85       	ldd	r25, Y+10	; 0x0a
    350a:	2f 71       	andi	r18, 0x1F	; 31
    350c:	fc 01       	movw	r30, r24
    350e:	35 8d       	ldd	r19, Z+29	; 0x1d
    3510:	30 7e       	andi	r19, 0xE0	; 224
    3512:	23 2b       	or	r18, r19
    3514:	fc 01       	movw	r30, r24
    3516:	25 8f       	std	Z+29, r18	; 0x1d
    data->bitpack.data.day     = (in[3] & 0x07);
    3518:	8c 81       	ldd	r24, Y+4	; 0x04
    351a:	87 70       	andi	r24, 0x07	; 7
    351c:	28 2f       	mov	r18, r24
    351e:	27 70       	andi	r18, 0x07	; 7
    3520:	27 70       	andi	r18, 0x07	; 7
    3522:	89 85       	ldd	r24, Y+9	; 0x09
    3524:	9a 85       	ldd	r25, Y+10	; 0x0a
    3526:	22 95       	swap	r18
    3528:	22 0f       	add	r18, r18
    352a:	20 7e       	andi	r18, 0xE0	; 224
    352c:	fc 01       	movw	r30, r24
    352e:	35 8d       	ldd	r19, Z+29	; 0x1d
    3530:	3f 71       	andi	r19, 0x1F	; 31
    3532:	23 2b       	or	r18, r19
    3534:	fc 01       	movw	r30, r24
    3536:	25 8f       	std	Z+29, r18	; 0x1d
    data->bitpack.data.date    = (in[4] & 0x0F) + (10 * ((in[4] & 0x30) >> 4));
    3538:	8d 81       	ldd	r24, Y+5	; 0x05
    353a:	28 2f       	mov	r18, r24
    353c:	2f 70       	andi	r18, 0x0F	; 15
    353e:	8d 81       	ldd	r24, Y+5	; 0x05
    3540:	88 2f       	mov	r24, r24
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	80 73       	andi	r24, 0x30	; 48
    3546:	90 70       	andi	r25, 0x00	; 0
    3548:	95 95       	asr	r25
    354a:	87 95       	ror	r24
    354c:	95 95       	asr	r25
    354e:	87 95       	ror	r24
    3550:	95 95       	asr	r25
    3552:	87 95       	ror	r24
    3554:	95 95       	asr	r25
    3556:	87 95       	ror	r24
    3558:	88 0f       	add	r24, r24
    355a:	98 2f       	mov	r25, r24
    355c:	99 0f       	add	r25, r25
    355e:	99 0f       	add	r25, r25
    3560:	89 0f       	add	r24, r25
    3562:	82 0f       	add	r24, r18
    3564:	28 2f       	mov	r18, r24
    3566:	2f 71       	andi	r18, 0x1F	; 31
    3568:	89 85       	ldd	r24, Y+9	; 0x09
    356a:	9a 85       	ldd	r25, Y+10	; 0x0a
    356c:	2f 71       	andi	r18, 0x1F	; 31
    356e:	fc 01       	movw	r30, r24
    3570:	36 8d       	ldd	r19, Z+30	; 0x1e
    3572:	30 7e       	andi	r19, 0xE0	; 224
    3574:	23 2b       	or	r18, r19
    3576:	fc 01       	movw	r30, r24
    3578:	26 8f       	std	Z+30, r18	; 0x1e
    data->bitpack.data.month   = (in[5] & 0x0F) + (10 * ((in[5] & 0x10) >> 4));
    357a:	8e 81       	ldd	r24, Y+6	; 0x06
    357c:	28 2f       	mov	r18, r24
    357e:	2f 70       	andi	r18, 0x0F	; 15
    3580:	8e 81       	ldd	r24, Y+6	; 0x06
    3582:	88 2f       	mov	r24, r24
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	80 71       	andi	r24, 0x10	; 16
    3588:	90 70       	andi	r25, 0x00	; 0
    358a:	95 95       	asr	r25
    358c:	87 95       	ror	r24
    358e:	95 95       	asr	r25
    3590:	87 95       	ror	r24
    3592:	95 95       	asr	r25
    3594:	87 95       	ror	r24
    3596:	95 95       	asr	r25
    3598:	87 95       	ror	r24
    359a:	88 0f       	add	r24, r24
    359c:	98 2f       	mov	r25, r24
    359e:	99 0f       	add	r25, r25
    35a0:	99 0f       	add	r25, r25
    35a2:	89 0f       	add	r24, r25
    35a4:	82 0f       	add	r24, r18
    35a6:	28 2f       	mov	r18, r24
    35a8:	2f 70       	andi	r18, 0x0F	; 15
    35aa:	89 85       	ldd	r24, Y+9	; 0x09
    35ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ae:	32 2f       	mov	r19, r18
    35b0:	37 70       	andi	r19, 0x07	; 7
    35b2:	32 95       	swap	r19
    35b4:	33 0f       	add	r19, r19
    35b6:	30 7e       	andi	r19, 0xE0	; 224
    35b8:	fc 01       	movw	r30, r24
    35ba:	46 8d       	ldd	r20, Z+30	; 0x1e
    35bc:	4f 71       	andi	r20, 0x1F	; 31
    35be:	34 2b       	or	r19, r20
    35c0:	fc 01       	movw	r30, r24
    35c2:	36 8f       	std	Z+30, r19	; 0x1e
    35c4:	26 95       	lsr	r18
    35c6:	26 95       	lsr	r18
    35c8:	26 95       	lsr	r18
    35ca:	21 70       	andi	r18, 0x01	; 1
    35cc:	21 70       	andi	r18, 0x01	; 1
    35ce:	fc 01       	movw	r30, r24
    35d0:	37 8d       	ldd	r19, Z+31	; 0x1f
    35d2:	3e 7f       	andi	r19, 0xFE	; 254
    35d4:	23 2b       	or	r18, r19
    35d6:	fc 01       	movw	r30, r24
    35d8:	27 8f       	std	Z+31, r18	; 0x1f
    data->bitpack.data.year    = (in[6] & 0x0F) + (10 * ((in[6] & 0xF0) >> 4));
    35da:	8f 81       	ldd	r24, Y+7	; 0x07
    35dc:	98 2f       	mov	r25, r24
    35de:	9f 70       	andi	r25, 0x0F	; 15
    35e0:	8f 81       	ldd	r24, Y+7	; 0x07
    35e2:	82 95       	swap	r24
    35e4:	8f 70       	andi	r24, 0x0F	; 15
    35e6:	88 0f       	add	r24, r24
    35e8:	28 2f       	mov	r18, r24
    35ea:	22 0f       	add	r18, r18
    35ec:	22 0f       	add	r18, r18
    35ee:	82 0f       	add	r24, r18
    35f0:	89 0f       	add	r24, r25
    35f2:	28 2f       	mov	r18, r24
    35f4:	2f 77       	andi	r18, 0x7F	; 127
    35f6:	89 85       	ldd	r24, Y+9	; 0x09
    35f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fa:	22 0f       	add	r18, r18
    35fc:	fc 01       	movw	r30, r24
    35fe:	37 8d       	ldd	r19, Z+31	; 0x1f
    3600:	31 70       	andi	r19, 0x01	; 1
    3602:	23 2b       	or	r18, r19
    3604:	fc 01       	movw	r30, r24
    3606:	27 8f       	std	Z+31, r18	; 0x1f
}
    3608:	2a 96       	adiw	r28, 0x0a	; 10
    360a:	0f b6       	in	r0, 0x3f	; 63
    360c:	f8 94       	cli
    360e:	de bf       	out	0x3e, r29	; 62
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	cd bf       	out	0x3d, r28	; 61
    3614:	cf 91       	pop	r28
    3616:	df 91       	pop	r29
    3618:	08 95       	ret

0000361a <rtc_Set_Time>:
 * Sets the time of the real-time clock.
 *
 * @param t The time value to set the clock to.
 */
void rtc_Set_Time(Time *t)
{
    361a:	df 93       	push	r29
    361c:	cf 93       	push	r28
    361e:	cd b7       	in	r28, 0x3d	; 61
    3620:	de b7       	in	r29, 0x3e	; 62
    3622:	2a 97       	sbiw	r28, 0x0a	; 10
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	f8 94       	cli
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	cd bf       	out	0x3d, r28	; 61
    362e:	9a 87       	std	Y+10, r25	; 0x0a
    3630:	89 87       	std	Y+9, r24	; 0x09
    char out[8];

    out[0] = RTC_TIME_ADDR;
    3632:	19 82       	std	Y+1, r1	; 0x01
    out[1] = (t->seconds % 10) + ((t->seconds / 10) << 4);
    3634:	89 85       	ldd	r24, Y+9	; 0x09
    3636:	9a 85       	ldd	r25, Y+10	; 0x0a
    3638:	fc 01       	movw	r30, r24
    363a:	80 81       	ld	r24, Z
    363c:	9a e0       	ldi	r25, 0x0A	; 10
    363e:	69 2f       	mov	r22, r25
    3640:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__udivmodqi4>
    3644:	89 2f       	mov	r24, r25
    3646:	28 2f       	mov	r18, r24
    3648:	89 85       	ldd	r24, Y+9	; 0x09
    364a:	9a 85       	ldd	r25, Y+10	; 0x0a
    364c:	fc 01       	movw	r30, r24
    364e:	80 81       	ld	r24, Z
    3650:	9a e0       	ldi	r25, 0x0A	; 10
    3652:	69 2f       	mov	r22, r25
    3654:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__udivmodqi4>
    3658:	82 95       	swap	r24
    365a:	80 7f       	andi	r24, 0xF0	; 240
    365c:	82 0f       	add	r24, r18
    365e:	8a 83       	std	Y+2, r24	; 0x02
    out[2] = (t->minutes % 10) + ((t->minutes / 10) << 4);
    3660:	89 85       	ldd	r24, Y+9	; 0x09
    3662:	9a 85       	ldd	r25, Y+10	; 0x0a
    3664:	fc 01       	movw	r30, r24
    3666:	81 81       	ldd	r24, Z+1	; 0x01
    3668:	9a e0       	ldi	r25, 0x0A	; 10
    366a:	69 2f       	mov	r22, r25
    366c:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__udivmodqi4>
    3670:	89 2f       	mov	r24, r25
    3672:	28 2f       	mov	r18, r24
    3674:	89 85       	ldd	r24, Y+9	; 0x09
    3676:	9a 85       	ldd	r25, Y+10	; 0x0a
    3678:	fc 01       	movw	r30, r24
    367a:	81 81       	ldd	r24, Z+1	; 0x01
    367c:	9a e0       	ldi	r25, 0x0A	; 10
    367e:	69 2f       	mov	r22, r25
    3680:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__udivmodqi4>
    3684:	82 95       	swap	r24
    3686:	80 7f       	andi	r24, 0xF0	; 240
    3688:	82 0f       	add	r24, r18
    368a:	8b 83       	std	Y+3, r24	; 0x03
    out[3] = (t->hours   % 10) + ((t->hours   / 10) << 4);
    368c:	89 85       	ldd	r24, Y+9	; 0x09
    368e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3690:	fc 01       	movw	r30, r24
    3692:	82 81       	ldd	r24, Z+2	; 0x02
    3694:	9a e0       	ldi	r25, 0x0A	; 10
    3696:	69 2f       	mov	r22, r25
    3698:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__udivmodqi4>
    369c:	89 2f       	mov	r24, r25
    369e:	28 2f       	mov	r18, r24
    36a0:	89 85       	ldd	r24, Y+9	; 0x09
    36a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a4:	fc 01       	movw	r30, r24
    36a6:	82 81       	ldd	r24, Z+2	; 0x02
    36a8:	9a e0       	ldi	r25, 0x0A	; 10
    36aa:	69 2f       	mov	r22, r25
    36ac:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__udivmodqi4>
    36b0:	82 95       	swap	r24
    36b2:	80 7f       	andi	r24, 0xF0	; 240
    36b4:	82 0f       	add	r24, r18
    36b6:	8c 83       	std	Y+4, r24	; 0x04
    out[4] =  t->dow;
    36b8:	89 85       	ldd	r24, Y+9	; 0x09
    36ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    36bc:	fc 01       	movw	r30, r24
    36be:	83 81       	ldd	r24, Z+3	; 0x03
    36c0:	8d 83       	std	Y+5, r24	; 0x05
    out[5] = (t->date    % 10) + ((t->date    / 10) << 4);
    36c2:	89 85       	ldd	r24, Y+9	; 0x09
    36c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c6:	fc 01       	movw	r30, r24
    36c8:	84 81       	ldd	r24, Z+4	; 0x04
    36ca:	9a e0       	ldi	r25, 0x0A	; 10
    36cc:	69 2f       	mov	r22, r25
    36ce:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__udivmodqi4>
    36d2:	89 2f       	mov	r24, r25
    36d4:	28 2f       	mov	r18, r24
    36d6:	89 85       	ldd	r24, Y+9	; 0x09
    36d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36da:	fc 01       	movw	r30, r24
    36dc:	84 81       	ldd	r24, Z+4	; 0x04
    36de:	9a e0       	ldi	r25, 0x0A	; 10
    36e0:	69 2f       	mov	r22, r25
    36e2:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__udivmodqi4>
    36e6:	82 95       	swap	r24
    36e8:	80 7f       	andi	r24, 0xF0	; 240
    36ea:	82 0f       	add	r24, r18
    36ec:	8e 83       	std	Y+6, r24	; 0x06
    out[6] = (t->month   % 10) + ((t->month   / 10) << 4);
    36ee:	89 85       	ldd	r24, Y+9	; 0x09
    36f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f2:	fc 01       	movw	r30, r24
    36f4:	85 81       	ldd	r24, Z+5	; 0x05
    36f6:	9a e0       	ldi	r25, 0x0A	; 10
    36f8:	69 2f       	mov	r22, r25
    36fa:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__udivmodqi4>
    36fe:	89 2f       	mov	r24, r25
    3700:	28 2f       	mov	r18, r24
    3702:	89 85       	ldd	r24, Y+9	; 0x09
    3704:	9a 85       	ldd	r25, Y+10	; 0x0a
    3706:	fc 01       	movw	r30, r24
    3708:	85 81       	ldd	r24, Z+5	; 0x05
    370a:	9a e0       	ldi	r25, 0x0A	; 10
    370c:	69 2f       	mov	r22, r25
    370e:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__udivmodqi4>
    3712:	82 95       	swap	r24
    3714:	80 7f       	andi	r24, 0xF0	; 240
    3716:	82 0f       	add	r24, r18
    3718:	8f 83       	std	Y+7, r24	; 0x07
    out[7] = (t->year    % 10) + ((t->year    / 10) << 4);
    371a:	89 85       	ldd	r24, Y+9	; 0x09
    371c:	9a 85       	ldd	r25, Y+10	; 0x0a
    371e:	fc 01       	movw	r30, r24
    3720:	86 81       	ldd	r24, Z+6	; 0x06
    3722:	9a e0       	ldi	r25, 0x0A	; 10
    3724:	69 2f       	mov	r22, r25
    3726:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__udivmodqi4>
    372a:	89 2f       	mov	r24, r25
    372c:	28 2f       	mov	r18, r24
    372e:	89 85       	ldd	r24, Y+9	; 0x09
    3730:	9a 85       	ldd	r25, Y+10	; 0x0a
    3732:	fc 01       	movw	r30, r24
    3734:	86 81       	ldd	r24, Z+6	; 0x06
    3736:	9a e0       	ldi	r25, 0x0A	; 10
    3738:	69 2f       	mov	r22, r25
    373a:	0e 94 02 3f 	call	0x7e04	; 0x7e04 <__udivmodqi4>
    373e:	82 95       	swap	r24
    3740:	80 7f       	andi	r24, 0xF0	; 240
    3742:	82 0f       	add	r24, r18
    3744:	88 87       	std	Y+8, r24	; 0x08

    twi_Write(RTC_ADDR, out, 8);
    3746:	80 ed       	ldi	r24, 0xD0	; 208
    3748:	9e 01       	movw	r18, r28
    374a:	2f 5f       	subi	r18, 0xFF	; 255
    374c:	3f 4f       	sbci	r19, 0xFF	; 255
    374e:	b9 01       	movw	r22, r18
    3750:	48 e0       	ldi	r20, 0x08	; 8
    3752:	50 e0       	ldi	r21, 0x00	; 0
    3754:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <twi_Write>
}
    3758:	2a 96       	adiw	r28, 0x0a	; 10
    375a:	0f b6       	in	r0, 0x3f	; 63
    375c:	f8 94       	cli
    375e:	de bf       	out	0x3e, r29	; 62
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	cd bf       	out	0x3d, r28	; 61
    3764:	cf 91       	pop	r28
    3766:	df 91       	pop	r29
    3768:	08 95       	ret

0000376a <__vector_4>:
 * Increments a counter in the event of a rising edge
 * on the external sensor. Only active when count-type
 * is enabled via EEPROM setting.
 */
ISR(PCINT0_vect)
{
    376a:	1f 92       	push	r1
    376c:	0f 92       	push	r0
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	0f 92       	push	r0
    3772:	11 24       	eor	r1, r1
    3774:	8f 93       	push	r24
    3776:	9f 93       	push	r25
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    extInts++;
    3780:	80 91 64 03 	lds	r24, 0x0364
    3784:	90 91 65 03 	lds	r25, 0x0365
    3788:	01 96       	adiw	r24, 0x01	; 1
    378a:	90 93 65 03 	sts	0x0365, r25
    378e:	80 93 64 03 	sts	0x0364, r24
}
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	9f 91       	pop	r25
    3798:	8f 91       	pop	r24
    379a:	0f 90       	pop	r0
    379c:	0f be       	out	0x3f, r0	; 63
    379e:	0f 90       	pop	r0
    37a0:	1f 90       	pop	r1
    37a2:	18 95       	reti

000037a4 <sensor_Init>:
/**
 * Initializes the EEPROM-stored sensor settings.
 * Also calls the timer, user and gps initializers.
 */
void sensor_Init(bool gps)
{
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <sensor_Init+0x6>
    37aa:	0f 92       	push	r0
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	8b 83       	std	Y+3, r24	; 0x03
    adc_Init(ADC_EXTERNAL, ADC_10BIT_RES);
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	61 e0       	ldi	r22, 0x01	; 1
    37b6:	0e 94 ae 00 	call	0x15c	; 0x15c <adc_Init>

    timer_Init();
    37ba:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <timer_Init>
    twi_Init();
    37be:	0e 94 72 27 	call	0x4ee4	; 0x4ee4 <twi_Init>
    bmp_Init();
    37c2:	0e 94 8d 03 	call	0x71a	; 0x71a <bmp_Init>
    adx_Init();
    37c6:	0e 94 b5 01 	call	0x36a	; 0x36a <adx_Init>
    light_Init();
    37ca:	0e 94 62 19 	call	0x32c4	; 0x32c4 <light_Init>

    if (gps) gps_Init();
    37ce:	8b 81       	ldd	r24, Y+3	; 0x03
    37d0:	88 23       	and	r24, r24
    37d2:	11 f0       	breq	.+4      	; 0x37d8 <sensor_Init+0x34>
    37d4:	0e 94 a9 14 	call	0x2952	; 0x2952 <gps_Init>

    unsigned int globalRate = (unsigned int)data_Read_EEPROM(DATA_GLOBAL_RATE_ADDR_H) << 8;
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    37e0:	88 2f       	mov	r24, r24
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	98 2f       	mov	r25, r24
    37e6:	88 27       	eor	r24, r24
    37e8:	9a 83       	std	Y+2, r25	; 0x02
    37ea:	89 83       	std	Y+1, r24	; 0x01
    globalRate += (unsigned int)data_Read_EEPROM(DATA_GLOBAL_RATE_ADDR_L);
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    37f4:	88 2f       	mov	r24, r24
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	29 81       	ldd	r18, Y+1	; 0x01
    37fa:	3a 81       	ldd	r19, Y+2	; 0x02
    37fc:	82 0f       	add	r24, r18
    37fe:	93 1f       	adc	r25, r19
    3800:	9a 83       	std	Y+2, r25	; 0x02
    3802:	89 83       	std	Y+1, r24	; 0x01
    
    bta1Type = data_Read_EEPROM(DATA_BTA_1_TYPE_ADDR);
    3804:	8c e0       	ldi	r24, 0x0C	; 12
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    380c:	80 93 5f 03 	sts	0x035F, r24
    bta2Type = data_Read_EEPROM(DATA_BTA_2_TYPE_ADDR);
    3810:	8f e0       	ldi	r24, 0x0F	; 15
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    3818:	80 93 60 03 	sts	0x0360, r24

    mini1Type = data_Read_EEPROM(DATA_MINI_1_TYPE_ADDR);
    381c:	82 e1       	ldi	r24, 0x12	; 18
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    3824:	80 93 61 03 	sts	0x0361, r24
    mini2Type = data_Read_EEPROM(DATA_MINI_2_TYPE_ADDR);
    3828:	85 e1       	ldi	r24, 0x15	; 21
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    3830:	80 93 62 03 	sts	0x0362, r24

    gpsEnabled = (data_Read_EEPROM(DATA_GPS_THRESHOLD_ADDR) != 0);
    3834:	86 e1       	ldi	r24, 0x16	; 22
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <data_Read_EEPROM>
    383c:	98 2f       	mov	r25, r24
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	99 23       	and	r25, r25
    3842:	09 f4       	brne	.+2      	; 0x3846 <sensor_Init+0xa2>
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	80 93 68 03 	sts	0x0368, r24
    baroEnabled = globalRate >= MINIMUM_BARO_INTERVAL;
    384a:	21 e0       	ldi	r18, 0x01	; 1
    384c:	89 81       	ldd	r24, Y+1	; 0x01
    384e:	9a 81       	ldd	r25, Y+2	; 0x02
    3850:	89 31       	cpi	r24, 0x19	; 25
    3852:	91 05       	cpc	r25, r1
    3854:	08 f4       	brcc	.+2      	; 0x3858 <sensor_Init+0xb4>
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	20 93 69 03 	sts	0x0369, r18
    
    //Enforce rate limits
    if (globalRate < MINIMUM_GLOBAL_INTERVAL) globalRate = MINIMUM_GLOBAL_INTERVAL;
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	9a 81       	ldd	r25, Y+2	; 0x02
    3860:	8a 30       	cpi	r24, 0x0A	; 10
    3862:	91 05       	cpc	r25, r1
    3864:	20 f4       	brcc	.+8      	; 0x386e <sensor_Init+0xca>
    3866:	8a e0       	ldi	r24, 0x0A	; 10
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	9a 83       	std	Y+2, r25	; 0x02
    386c:	89 83       	std	Y+1, r24	; 0x01

    //Set Porta A to input mode.
    DDRA = PORTA = 0;
    386e:	21 e2       	ldi	r18, 0x21	; 33
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	82 e2       	ldi	r24, 0x22	; 34
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	fc 01       	movw	r30, r24
    3878:	10 82       	st	Z, r1
    387a:	fc 01       	movw	r30, r24
    387c:	80 81       	ld	r24, Z
    387e:	f9 01       	movw	r30, r18
    3880:	80 83       	st	Z, r24

    //Turn ON pullups
    setPinMode(MODE_LOW, BTA_PULLUP_PORT, BTA_1_PULLUP_PIN);
    3882:	82 e0       	ldi	r24, 0x02	; 2
    3884:	62 e0       	ldi	r22, 0x02	; 2
    3886:	45 e0       	ldi	r20, 0x05	; 5
    3888:	50 e0       	ldi	r21, 0x00	; 0
    388a:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
    setPinMode(MODE_LOW, BTA_PULLUP_PORT, BTA_2_PULLUP_PIN);
    388e:	82 e0       	ldi	r24, 0x02	; 2
    3890:	62 e0       	ldi	r22, 0x02	; 2
    3892:	44 e0       	ldi	r20, 0x04	; 4
    3894:	50 e0       	ldi	r21, 0x00	; 0
    3896:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>

    cli();
    389a:	f8 94       	cli

    clear_bit(EICRA, 0);
    389c:	89 e6       	ldi	r24, 0x69	; 105
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	29 e6       	ldi	r18, 0x69	; 105
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	f9 01       	movw	r30, r18
    38a6:	20 81       	ld	r18, Z
    38a8:	2e 7f       	andi	r18, 0xFE	; 254
    38aa:	fc 01       	movw	r30, r24
    38ac:	20 83       	st	Z, r18
    clear_bit(EICRA, 1);
    38ae:	89 e6       	ldi	r24, 0x69	; 105
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	29 e6       	ldi	r18, 0x69	; 105
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	f9 01       	movw	r30, r18
    38b8:	20 81       	ld	r18, Z
    38ba:	2d 7f       	andi	r18, 0xFD	; 253
    38bc:	fc 01       	movw	r30, r24
    38be:	20 83       	st	Z, r18
    clear_bit(PCMSK0, 6);
    38c0:	8b e6       	ldi	r24, 0x6B	; 107
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	2b e6       	ldi	r18, 0x6B	; 107
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	f9 01       	movw	r30, r18
    38ca:	20 81       	ld	r18, Z
    38cc:	2f 7b       	andi	r18, 0xBF	; 191
    38ce:	fc 01       	movw	r30, r24
    38d0:	20 83       	st	Z, r18
    PCICR = 0;
    38d2:	88 e6       	ldi	r24, 0x68	; 104
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	fc 01       	movw	r30, r24
    38d8:	10 82       	st	Z, r1
    extNum = 0;
    38da:	10 92 63 03 	sts	0x0363, r1

    if (bta1Type == EXTERNAL_COUNT_TYPE)
    38de:	80 91 5f 03 	lds	r24, 0x035F
    38e2:	88 23       	and	r24, r24
    38e4:	71 f5       	brne	.+92     	; 0x3942 <sensor_Init+0x19e>
    {
        set_bit(EICRA, 0);
    38e6:	89 e6       	ldi	r24, 0x69	; 105
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	29 e6       	ldi	r18, 0x69	; 105
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	f9 01       	movw	r30, r18
    38f0:	20 81       	ld	r18, Z
    38f2:	21 60       	ori	r18, 0x01	; 1
    38f4:	fc 01       	movw	r30, r24
    38f6:	20 83       	st	Z, r18
        set_bit(EICRA, 1);
    38f8:	89 e6       	ldi	r24, 0x69	; 105
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	29 e6       	ldi	r18, 0x69	; 105
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	f9 01       	movw	r30, r18
    3902:	20 81       	ld	r18, Z
    3904:	22 60       	ori	r18, 0x02	; 2
    3906:	fc 01       	movw	r30, r24
    3908:	20 83       	st	Z, r18
        set_bit(PCMSK0, 6);
    390a:	8b e6       	ldi	r24, 0x6B	; 107
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	2b e6       	ldi	r18, 0x6B	; 107
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	f9 01       	movw	r30, r18
    3914:	20 81       	ld	r18, Z
    3916:	20 64       	ori	r18, 0x40	; 64
    3918:	fc 01       	movw	r30, r24
    391a:	20 83       	st	Z, r18
        set_bit(PCICR, BTA_1_PIN);
    391c:	88 e6       	ldi	r24, 0x68	; 104
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	28 e6       	ldi	r18, 0x68	; 104
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	f9 01       	movw	r30, r18
    3926:	20 81       	ld	r18, Z
    3928:	28 60       	ori	r18, 0x08	; 8
    392a:	fc 01       	movw	r30, r24
    392c:	20 83       	st	Z, r18

        setPinMode(MODE_HIGH, BTA_PULLUP_PORT, BTA_1_PULLUP_PIN);
    392e:	83 e0       	ldi	r24, 0x03	; 3
    3930:	62 e0       	ldi	r22, 0x02	; 2
    3932:	45 e0       	ldi	r20, 0x05	; 5
    3934:	50 e0       	ldi	r21, 0x00	; 0
    3936:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
        extNum = 1;
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	80 93 63 03 	sts	0x0363, r24
    3940:	89 c0       	rjmp	.+274    	; 0x3a54 <sensor_Init+0x2b0>
    }
    else if (bta2Type == EXTERNAL_COUNT_TYPE)
    3942:	80 91 60 03 	lds	r24, 0x0360
    3946:	88 23       	and	r24, r24
    3948:	71 f5       	brne	.+92     	; 0x39a6 <sensor_Init+0x202>
    {
        set_bit(EICRA, 0);
    394a:	89 e6       	ldi	r24, 0x69	; 105
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	29 e6       	ldi	r18, 0x69	; 105
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	f9 01       	movw	r30, r18
    3954:	20 81       	ld	r18, Z
    3956:	21 60       	ori	r18, 0x01	; 1
    3958:	fc 01       	movw	r30, r24
    395a:	20 83       	st	Z, r18
        set_bit(EICRA, 1);
    395c:	89 e6       	ldi	r24, 0x69	; 105
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	29 e6       	ldi	r18, 0x69	; 105
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	f9 01       	movw	r30, r18
    3966:	20 81       	ld	r18, Z
    3968:	22 60       	ori	r18, 0x02	; 2
    396a:	fc 01       	movw	r30, r24
    396c:	20 83       	st	Z, r18
        set_bit(PCMSK0, 6);
    396e:	8b e6       	ldi	r24, 0x6B	; 107
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	2b e6       	ldi	r18, 0x6B	; 107
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	f9 01       	movw	r30, r18
    3978:	20 81       	ld	r18, Z
    397a:	20 64       	ori	r18, 0x40	; 64
    397c:	fc 01       	movw	r30, r24
    397e:	20 83       	st	Z, r18
        set_bit(PCICR, BTA_2_PIN);
    3980:	88 e6       	ldi	r24, 0x68	; 104
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	28 e6       	ldi	r18, 0x68	; 104
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	f9 01       	movw	r30, r18
    398a:	20 81       	ld	r18, Z
    398c:	20 61       	ori	r18, 0x10	; 16
    398e:	fc 01       	movw	r30, r24
    3990:	20 83       	st	Z, r18

        setPinMode(MODE_HIGH, BTA_PULLUP_PORT, BTA_2_PULLUP_PIN);
    3992:	83 e0       	ldi	r24, 0x03	; 3
    3994:	62 e0       	ldi	r22, 0x02	; 2
    3996:	44 e0       	ldi	r20, 0x04	; 4
    3998:	50 e0       	ldi	r21, 0x00	; 0
    399a:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
        extNum = 2;
    399e:	82 e0       	ldi	r24, 0x02	; 2
    39a0:	80 93 63 03 	sts	0x0363, r24
    39a4:	57 c0       	rjmp	.+174    	; 0x3a54 <sensor_Init+0x2b0>
    }
    else if (mini1Type == EXTERNAL_COUNT_TYPE)
    39a6:	80 91 61 03 	lds	r24, 0x0361
    39aa:	88 23       	and	r24, r24
    39ac:	41 f5       	brne	.+80     	; 0x39fe <sensor_Init+0x25a>
    {
        set_bit(EICRA, 0);
    39ae:	89 e6       	ldi	r24, 0x69	; 105
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	29 e6       	ldi	r18, 0x69	; 105
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	f9 01       	movw	r30, r18
    39b8:	20 81       	ld	r18, Z
    39ba:	21 60       	ori	r18, 0x01	; 1
    39bc:	fc 01       	movw	r30, r24
    39be:	20 83       	st	Z, r18
        set_bit(EICRA, 1);
    39c0:	89 e6       	ldi	r24, 0x69	; 105
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	29 e6       	ldi	r18, 0x69	; 105
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	f9 01       	movw	r30, r18
    39ca:	20 81       	ld	r18, Z
    39cc:	22 60       	ori	r18, 0x02	; 2
    39ce:	fc 01       	movw	r30, r24
    39d0:	20 83       	st	Z, r18
        set_bit(PCMSK0, 6);
    39d2:	8b e6       	ldi	r24, 0x6B	; 107
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	2b e6       	ldi	r18, 0x6B	; 107
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	f9 01       	movw	r30, r18
    39dc:	20 81       	ld	r18, Z
    39de:	20 64       	ori	r18, 0x40	; 64
    39e0:	fc 01       	movw	r30, r24
    39e2:	20 83       	st	Z, r18
        set_bit(PCICR, MINIJACK_1_PIN);
    39e4:	88 e6       	ldi	r24, 0x68	; 104
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	28 e6       	ldi	r18, 0x68	; 104
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	f9 01       	movw	r30, r18
    39ee:	20 81       	ld	r18, Z
    39f0:	20 62       	ori	r18, 0x20	; 32
    39f2:	fc 01       	movw	r30, r24
    39f4:	20 83       	st	Z, r18
        extNum = 3;
    39f6:	83 e0       	ldi	r24, 0x03	; 3
    39f8:	80 93 63 03 	sts	0x0363, r24
    39fc:	2b c0       	rjmp	.+86     	; 0x3a54 <sensor_Init+0x2b0>
    }
    else if (mini2Type == EXTERNAL_COUNT_TYPE)
    39fe:	80 91 62 03 	lds	r24, 0x0362
    3a02:	88 23       	and	r24, r24
    3a04:	39 f5       	brne	.+78     	; 0x3a54 <sensor_Init+0x2b0>
    {
        set_bit(EICRA, 0);
    3a06:	89 e6       	ldi	r24, 0x69	; 105
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	29 e6       	ldi	r18, 0x69	; 105
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	f9 01       	movw	r30, r18
    3a10:	20 81       	ld	r18, Z
    3a12:	21 60       	ori	r18, 0x01	; 1
    3a14:	fc 01       	movw	r30, r24
    3a16:	20 83       	st	Z, r18
        set_bit(EICRA, 1);
    3a18:	89 e6       	ldi	r24, 0x69	; 105
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	29 e6       	ldi	r18, 0x69	; 105
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	f9 01       	movw	r30, r18
    3a22:	20 81       	ld	r18, Z
    3a24:	22 60       	ori	r18, 0x02	; 2
    3a26:	fc 01       	movw	r30, r24
    3a28:	20 83       	st	Z, r18
        set_bit(PCMSK0, 6);
    3a2a:	8b e6       	ldi	r24, 0x6B	; 107
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	2b e6       	ldi	r18, 0x6B	; 107
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	f9 01       	movw	r30, r18
    3a34:	20 81       	ld	r18, Z
    3a36:	20 64       	ori	r18, 0x40	; 64
    3a38:	fc 01       	movw	r30, r24
    3a3a:	20 83       	st	Z, r18
        set_bit(PCICR, MINIJACK_2_PIN);
    3a3c:	88 e6       	ldi	r24, 0x68	; 104
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	28 e6       	ldi	r18, 0x68	; 104
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	f9 01       	movw	r30, r18
    3a46:	20 81       	ld	r18, Z
    3a48:	20 64       	ori	r18, 0x40	; 64
    3a4a:	fc 01       	movw	r30, r24
    3a4c:	20 83       	st	Z, r18
        extNum = 4;
    3a4e:	84 e0       	ldi	r24, 0x04	; 4
    3a50:	80 93 63 03 	sts	0x0363, r24
    }

    sei();
    3a54:	78 94       	sei

    mainJob.trigger = globalRate / 2;
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
    3a58:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5a:	96 95       	lsr	r25
    3a5c:	87 95       	ror	r24
    3a5e:	90 93 3e 03 	sts	0x033E, r25
    3a62:	80 93 3d 03 	sts	0x033D, r24
    baroJob.trigger = globalRate / 2 - 6;
    3a66:	89 81       	ldd	r24, Y+1	; 0x01
    3a68:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6a:	96 95       	lsr	r25
    3a6c:	87 95       	ror	r24
    3a6e:	06 97       	sbiw	r24, 0x06	; 6
    3a70:	90 93 44 03 	sts	0x0344, r25
    3a74:	80 93 43 03 	sts	0x0343, r24

    bta1Job.trigger  = extNum == 1 ? globalRate : globalRate / 2;
    3a78:	80 91 63 03 	lds	r24, 0x0363
    3a7c:	81 30       	cpi	r24, 0x01	; 1
    3a7e:	29 f0       	breq	.+10     	; 0x3a8a <sensor_Init+0x2e6>
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	9a 81       	ldd	r25, Y+2	; 0x02
    3a84:	96 95       	lsr	r25
    3a86:	87 95       	ror	r24
    3a88:	02 c0       	rjmp	.+4      	; 0x3a8e <sensor_Init+0x2ea>
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a8e:	90 93 4a 03 	sts	0x034A, r25
    3a92:	80 93 49 03 	sts	0x0349, r24
    bta2Job.trigger  = extNum == 2 ? globalRate : globalRate / 2;
    3a96:	80 91 63 03 	lds	r24, 0x0363
    3a9a:	82 30       	cpi	r24, 0x02	; 2
    3a9c:	29 f0       	breq	.+10     	; 0x3aa8 <sensor_Init+0x304>
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa2:	96 95       	lsr	r25
    3aa4:	87 95       	ror	r24
    3aa6:	02 c0       	rjmp	.+4      	; 0x3aac <sensor_Init+0x308>
    3aa8:	89 81       	ldd	r24, Y+1	; 0x01
    3aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3aac:	90 93 50 03 	sts	0x0350, r25
    3ab0:	80 93 4f 03 	sts	0x034F, r24
    mini1Job.trigger = extNum == 3 ? globalRate : globalRate / 2;
    3ab4:	80 91 63 03 	lds	r24, 0x0363
    3ab8:	83 30       	cpi	r24, 0x03	; 3
    3aba:	29 f0       	breq	.+10     	; 0x3ac6 <sensor_Init+0x322>
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
    3abe:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac0:	96 95       	lsr	r25
    3ac2:	87 95       	ror	r24
    3ac4:	02 c0       	rjmp	.+4      	; 0x3aca <sensor_Init+0x326>
    3ac6:	89 81       	ldd	r24, Y+1	; 0x01
    3ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aca:	90 93 56 03 	sts	0x0356, r25
    3ace:	80 93 55 03 	sts	0x0355, r24
    mini2Job.trigger = extNum == 4 ? globalRate : globalRate / 2;
    3ad2:	80 91 63 03 	lds	r24, 0x0363
    3ad6:	84 30       	cpi	r24, 0x04	; 4
    3ad8:	29 f0       	breq	.+10     	; 0x3ae4 <sensor_Init+0x340>
    3ada:	89 81       	ldd	r24, Y+1	; 0x01
    3adc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ade:	96 95       	lsr	r25
    3ae0:	87 95       	ror	r24
    3ae2:	02 c0       	rjmp	.+4      	; 0x3ae8 <sensor_Init+0x344>
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
    3ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae8:	90 93 5c 03 	sts	0x035C, r25
    3aec:	80 93 5b 03 	sts	0x035B, r24
}
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	0f 90       	pop	r0
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	08 95       	ret

00003afc <sensor_Read>:
 * @param data The DataPoint to store the sensor data in.
 *
 * @return Returns true if the full data set has been gathered, false if it is still in process.
 */
bool sensor_Read(DataPoint *data)
{
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	cd b7       	in	r28, 0x3d	; 61
    3b02:	de b7       	in	r29, 0x3e	; 62
    3b04:	2a 97       	sbiw	r28, 0x0a	; 10
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	de bf       	out	0x3e, r29	; 62
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	cd bf       	out	0x3d, r28	; 61
    3b10:	9a 87       	std	Y+10, r25	; 0x0a
    3b12:	89 87       	std	Y+9, r24	; 0x09
    if (timer_Job_Ready2(mainJob, false))
    3b14:	40 91 3d 03 	lds	r20, 0x033D
    3b18:	50 91 3e 03 	lds	r21, 0x033E
    3b1c:	8b e3       	ldi	r24, 0x3B	; 59
    3b1e:	93 e0       	ldi	r25, 0x03	; 3
    3b20:	2f e3       	ldi	r18, 0x3F	; 63
    3b22:	33 e0       	ldi	r19, 0x03	; 3
    3b24:	ba 01       	movw	r22, r20
    3b26:	a9 01       	movw	r20, r18
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <timer_Job_Ready4>
    3b2e:	88 23       	and	r24, r24
    3b30:	09 f4       	brne	.+2      	; 0x3b34 <sensor_Read+0x38>
    3b32:	18 c1       	rjmp	.+560    	; 0x3d64 <sensor_Read+0x268>
    {
        ///Acelerometer
        int16_t x, y, z;
        adx_Read_Accel(&x, &y, &z);
    3b34:	ae 01       	movw	r20, r28
    3b36:	4d 5f       	subi	r20, 0xFD	; 253
    3b38:	5f 4f       	sbci	r21, 0xFF	; 255
    3b3a:	9e 01       	movw	r18, r28
    3b3c:	2b 5f       	subi	r18, 0xFB	; 251
    3b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b40:	ce 01       	movw	r24, r28
    3b42:	01 96       	adiw	r24, 0x01	; 1
    3b44:	ba 01       	movw	r22, r20
    3b46:	a9 01       	movw	r20, r18
    3b48:	0e 94 21 03 	call	0x642	; 0x642 <adx_Read_Accel>
        
        (*data).bitpack.data.accelX = x;
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    3b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b50:	9c 01       	movw	r18, r24
    3b52:	00 24       	eor	r0, r0
    3b54:	36 95       	lsr	r19
    3b56:	27 95       	ror	r18
    3b58:	07 94       	ror	r0
    3b5a:	36 95       	lsr	r19
    3b5c:	27 95       	ror	r18
    3b5e:	07 94       	ror	r0
    3b60:	32 2f       	mov	r19, r18
    3b62:	20 2d       	mov	r18, r0
    3b64:	02 2e       	mov	r0, r18
    3b66:	23 2f       	mov	r18, r19
    3b68:	00 0c       	add	r0, r0
    3b6a:	22 1f       	adc	r18, r18
    3b6c:	33 0b       	sbc	r19, r19
    3b6e:	00 0c       	add	r0, r0
    3b70:	22 1f       	adc	r18, r18
    3b72:	33 1f       	adc	r19, r19
    3b74:	89 85       	ldd	r24, Y+9	; 0x09
    3b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b78:	fc 01       	movw	r30, r24
    3b7a:	20 8b       	std	Z+16, r18	; 0x10
    3b7c:	23 2f       	mov	r18, r19
    3b7e:	23 70       	andi	r18, 0x03	; 3
    3b80:	fc 01       	movw	r30, r24
    3b82:	31 89       	ldd	r19, Z+17	; 0x11
    3b84:	3c 7f       	andi	r19, 0xFC	; 252
    3b86:	23 2b       	or	r18, r19
    3b88:	fc 01       	movw	r30, r24
    3b8a:	21 8b       	std	Z+17, r18	; 0x11
        (*data).bitpack.data.accelY = y;
    3b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b90:	9c 01       	movw	r18, r24
    3b92:	00 24       	eor	r0, r0
    3b94:	36 95       	lsr	r19
    3b96:	27 95       	ror	r18
    3b98:	07 94       	ror	r0
    3b9a:	36 95       	lsr	r19
    3b9c:	27 95       	ror	r18
    3b9e:	07 94       	ror	r0
    3ba0:	32 2f       	mov	r19, r18
    3ba2:	20 2d       	mov	r18, r0
    3ba4:	02 2e       	mov	r0, r18
    3ba6:	23 2f       	mov	r18, r19
    3ba8:	00 0c       	add	r0, r0
    3baa:	22 1f       	adc	r18, r18
    3bac:	33 0b       	sbc	r19, r19
    3bae:	00 0c       	add	r0, r0
    3bb0:	22 1f       	adc	r18, r18
    3bb2:	33 1f       	adc	r19, r19
    3bb4:	89 85       	ldd	r24, Y+9	; 0x09
    3bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb8:	42 2f       	mov	r20, r18
    3bba:	4f 73       	andi	r20, 0x3F	; 63
    3bbc:	44 0f       	add	r20, r20
    3bbe:	44 0f       	add	r20, r20
    3bc0:	fc 01       	movw	r30, r24
    3bc2:	51 89       	ldd	r21, Z+17	; 0x11
    3bc4:	53 70       	andi	r21, 0x03	; 3
    3bc6:	45 2b       	or	r20, r21
    3bc8:	fc 01       	movw	r30, r24
    3bca:	41 8b       	std	Z+17, r20	; 0x11
    3bcc:	42 2f       	mov	r20, r18
    3bce:	42 95       	swap	r20
    3bd0:	46 95       	lsr	r20
    3bd2:	46 95       	lsr	r20
    3bd4:	43 70       	andi	r20, 0x03	; 3
    3bd6:	43 70       	andi	r20, 0x03	; 3
    3bd8:	fc 01       	movw	r30, r24
    3bda:	52 89       	ldd	r21, Z+18	; 0x12
    3bdc:	5c 7f       	andi	r21, 0xFC	; 252
    3bde:	45 2b       	or	r20, r21
    3be0:	fc 01       	movw	r30, r24
    3be2:	42 8b       	std	Z+18, r20	; 0x12
    3be4:	23 2f       	mov	r18, r19
    3be6:	23 70       	andi	r18, 0x03	; 3
    3be8:	22 0f       	add	r18, r18
    3bea:	22 0f       	add	r18, r18
    3bec:	fc 01       	movw	r30, r24
    3bee:	32 89       	ldd	r19, Z+18	; 0x12
    3bf0:	33 7f       	andi	r19, 0xF3	; 243
    3bf2:	23 2b       	or	r18, r19
    3bf4:	fc 01       	movw	r30, r24
    3bf6:	22 8b       	std	Z+18, r18	; 0x12
        (*data).bitpack.data.accelZ = z;
    3bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    3bfc:	9c 01       	movw	r18, r24
    3bfe:	00 24       	eor	r0, r0
    3c00:	36 95       	lsr	r19
    3c02:	27 95       	ror	r18
    3c04:	07 94       	ror	r0
    3c06:	36 95       	lsr	r19
    3c08:	27 95       	ror	r18
    3c0a:	07 94       	ror	r0
    3c0c:	32 2f       	mov	r19, r18
    3c0e:	20 2d       	mov	r18, r0
    3c10:	02 2e       	mov	r0, r18
    3c12:	23 2f       	mov	r18, r19
    3c14:	00 0c       	add	r0, r0
    3c16:	22 1f       	adc	r18, r18
    3c18:	33 0b       	sbc	r19, r19
    3c1a:	00 0c       	add	r0, r0
    3c1c:	22 1f       	adc	r18, r18
    3c1e:	33 1f       	adc	r19, r19
    3c20:	89 85       	ldd	r24, Y+9	; 0x09
    3c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c24:	42 2f       	mov	r20, r18
    3c26:	4f 70       	andi	r20, 0x0F	; 15
    3c28:	42 95       	swap	r20
    3c2a:	40 7f       	andi	r20, 0xF0	; 240
    3c2c:	fc 01       	movw	r30, r24
    3c2e:	52 89       	ldd	r21, Z+18	; 0x12
    3c30:	5f 70       	andi	r21, 0x0F	; 15
    3c32:	45 2b       	or	r20, r21
    3c34:	fc 01       	movw	r30, r24
    3c36:	42 8b       	std	Z+18, r20	; 0x12
    3c38:	42 2f       	mov	r20, r18
    3c3a:	42 95       	swap	r20
    3c3c:	4f 70       	andi	r20, 0x0F	; 15
    3c3e:	4f 70       	andi	r20, 0x0F	; 15
    3c40:	fc 01       	movw	r30, r24
    3c42:	53 89       	ldd	r21, Z+19	; 0x13
    3c44:	50 7f       	andi	r21, 0xF0	; 240
    3c46:	45 2b       	or	r20, r21
    3c48:	fc 01       	movw	r30, r24
    3c4a:	43 8b       	std	Z+19, r20	; 0x13
    3c4c:	23 2f       	mov	r18, r19
    3c4e:	23 70       	andi	r18, 0x03	; 3
    3c50:	22 95       	swap	r18
    3c52:	20 7f       	andi	r18, 0xF0	; 240
    3c54:	fc 01       	movw	r30, r24
    3c56:	33 89       	ldd	r19, Z+19	; 0x13
    3c58:	3f 7c       	andi	r19, 0xCF	; 207
    3c5a:	23 2b       	or	r18, r19
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	23 8b       	std	Z+19, r18	; 0x13
        
        ///Light
        uint8_t exp, man;
        light_Read(&exp, &man);
    3c60:	ce 01       	movw	r24, r28
    3c62:	07 96       	adiw	r24, 0x07	; 7
    3c64:	9e 01       	movw	r18, r28
    3c66:	28 5f       	subi	r18, 0xF8	; 248
    3c68:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6a:	b9 01       	movw	r22, r18
    3c6c:	0e 94 9b 19 	call	0x3336	; 0x3336 <light_Read>
            
        (*data).bitpack.data.lightExp = exp;
    3c70:	8f 81       	ldd	r24, Y+7	; 0x07
    3c72:	28 2f       	mov	r18, r24
    3c74:	2f 70       	andi	r18, 0x0F	; 15
    3c76:	89 85       	ldd	r24, Y+9	; 0x09
    3c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c7a:	32 2f       	mov	r19, r18
    3c7c:	33 70       	andi	r19, 0x03	; 3
    3c7e:	32 95       	swap	r19
    3c80:	33 0f       	add	r19, r19
    3c82:	33 0f       	add	r19, r19
    3c84:	30 7c       	andi	r19, 0xC0	; 192
    3c86:	fc 01       	movw	r30, r24
    3c88:	43 89       	ldd	r20, Z+19	; 0x13
    3c8a:	4f 73       	andi	r20, 0x3F	; 63
    3c8c:	34 2b       	or	r19, r20
    3c8e:	fc 01       	movw	r30, r24
    3c90:	33 8b       	std	Z+19, r19	; 0x13
    3c92:	26 95       	lsr	r18
    3c94:	26 95       	lsr	r18
    3c96:	23 70       	andi	r18, 0x03	; 3
    3c98:	23 70       	andi	r18, 0x03	; 3
    3c9a:	fc 01       	movw	r30, r24
    3c9c:	34 89       	ldd	r19, Z+20	; 0x14
    3c9e:	3c 7f       	andi	r19, 0xFC	; 252
    3ca0:	23 2b       	or	r18, r19
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	24 8b       	std	Z+20, r18	; 0x14
        (*data).bitpack.data.lightMan = man;
    3ca6:	28 85       	ldd	r18, Y+8	; 0x08
    3ca8:	89 85       	ldd	r24, Y+9	; 0x09
    3caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cac:	32 2f       	mov	r19, r18
    3cae:	3f 73       	andi	r19, 0x3F	; 63
    3cb0:	33 0f       	add	r19, r19
    3cb2:	33 0f       	add	r19, r19
    3cb4:	fc 01       	movw	r30, r24
    3cb6:	44 89       	ldd	r20, Z+20	; 0x14
    3cb8:	43 70       	andi	r20, 0x03	; 3
    3cba:	34 2b       	or	r19, r20
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	34 8b       	std	Z+20, r19	; 0x14
    3cc0:	22 95       	swap	r18
    3cc2:	26 95       	lsr	r18
    3cc4:	26 95       	lsr	r18
    3cc6:	23 70       	andi	r18, 0x03	; 3
    3cc8:	23 70       	andi	r18, 0x03	; 3
    3cca:	fc 01       	movw	r30, r24
    3ccc:	35 89       	ldd	r19, Z+21	; 0x15
    3cce:	3c 7f       	andi	r19, 0xFC	; 252
    3cd0:	23 2b       	or	r18, r19
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	25 8b       	std	Z+21, r18	; 0x15
        
        ///Calendar
        rtc_Read_Time(data);
    3cd6:	89 85       	ldd	r24, Y+9	; 0x09
    3cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cda:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <rtc_Read_Time>
        
        ///Humidity
        (*data).bitpack.data.humidity = adc_Read(HUMIDITY_PIN);
    3cde:	87 e0       	ldi	r24, 0x07	; 7
    3ce0:	0e 94 2b 01 	call	0x256	; 0x256 <adc_Read>
    3ce4:	9c 01       	movw	r18, r24
    3ce6:	33 70       	andi	r19, 0x03	; 3
    3ce8:	89 85       	ldd	r24, Y+9	; 0x09
    3cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cec:	42 2f       	mov	r20, r18
    3cee:	4f 73       	andi	r20, 0x3F	; 63
    3cf0:	44 0f       	add	r20, r20
    3cf2:	44 0f       	add	r20, r20
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	55 89       	ldd	r21, Z+21	; 0x15
    3cf8:	53 70       	andi	r21, 0x03	; 3
    3cfa:	45 2b       	or	r20, r21
    3cfc:	fc 01       	movw	r30, r24
    3cfe:	45 8b       	std	Z+21, r20	; 0x15
    3d00:	42 2f       	mov	r20, r18
    3d02:	42 95       	swap	r20
    3d04:	46 95       	lsr	r20
    3d06:	46 95       	lsr	r20
    3d08:	43 70       	andi	r20, 0x03	; 3
    3d0a:	43 70       	andi	r20, 0x03	; 3
    3d0c:	fc 01       	movw	r30, r24
    3d0e:	56 89       	ldd	r21, Z+22	; 0x16
    3d10:	5c 7f       	andi	r21, 0xFC	; 252
    3d12:	45 2b       	or	r20, r21
    3d14:	fc 01       	movw	r30, r24
    3d16:	46 8b       	std	Z+22, r20	; 0x16
    3d18:	23 2f       	mov	r18, r19
    3d1a:	23 70       	andi	r18, 0x03	; 3
    3d1c:	22 0f       	add	r18, r18
    3d1e:	22 0f       	add	r18, r18
    3d20:	fc 01       	movw	r30, r24
    3d22:	36 89       	ldd	r19, Z+22	; 0x16
    3d24:	33 7f       	andi	r19, 0xF3	; 243
    3d26:	23 2b       	or	r18, r19
    3d28:	fc 01       	movw	r30, r24
    3d2a:	26 8b       	std	Z+22, r18	; 0x16
        
         ///GPS Pull
        if (gpsEnabled)
    3d2c:	80 91 68 03 	lds	r24, 0x0368
    3d30:	88 23       	and	r24, r24
    3d32:	79 f0       	breq	.+30     	; 0x3d52 <sensor_Read+0x256>
        {
            if (gps_Pull(data))
    3d34:	89 85       	ldd	r24, Y+9	; 0x09
    3d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d38:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <gps_Pull>
    3d3c:	88 23       	and	r24, r24
    3d3e:	29 f0       	breq	.+10     	; 0x3d4a <sensor_Read+0x24e>
            {
                user_Set_LED(LED_GPS, ON);
    3d40:	85 e0       	ldi	r24, 0x05	; 5
    3d42:	61 e0       	ldi	r22, 0x01	; 1
    3d44:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <user_Set_LED>
    3d48:	04 c0       	rjmp	.+8      	; 0x3d52 <sensor_Read+0x256>
            }
            else
            {
                user_Set_LED(LED_GPS, OFF);
    3d4a:	85 e0       	ldi	r24, 0x05	; 5
    3d4c:	60 e0       	ldi	r22, 0x00	; 0
    3d4e:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <user_Set_LED>
            }
        }
        
        ready |= MAIN_READY;
    3d52:	80 91 66 03 	lds	r24, 0x0366
    3d56:	90 91 67 03 	lds	r25, 0x0367
    3d5a:	81 60       	ori	r24, 0x01	; 1
    3d5c:	90 93 67 03 	sts	0x0367, r25
    3d60:	80 93 66 03 	sts	0x0366, r24
    }
    
    ///Barometer
    if (baroEnabled && timer_Job_Ready2(baroJob, false))
    3d64:	80 91 69 03 	lds	r24, 0x0369
    3d68:	88 23       	and	r24, r24
    3d6a:	09 f4       	brne	.+2      	; 0x3d6e <sensor_Read+0x272>
    3d6c:	5d c0       	rjmp	.+186    	; 0x3e28 <sensor_Read+0x32c>
    3d6e:	40 91 43 03 	lds	r20, 0x0343
    3d72:	50 91 44 03 	lds	r21, 0x0344
    3d76:	81 e4       	ldi	r24, 0x41	; 65
    3d78:	93 e0       	ldi	r25, 0x03	; 3
    3d7a:	25 e4       	ldi	r18, 0x45	; 69
    3d7c:	33 e0       	ldi	r19, 0x03	; 3
    3d7e:	ba 01       	movw	r22, r20
    3d80:	a9 01       	movw	r20, r18
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <timer_Job_Ready4>
    3d88:	88 23       	and	r24, r24
    3d8a:	09 f4       	brne	.+2      	; 0x3d8e <sensor_Read+0x292>
    3d8c:	4d c0       	rjmp	.+154    	; 0x3e28 <sensor_Read+0x32c>
    {
        baroState = (baroState + 1) % 3;
    3d8e:	80 91 47 01 	lds	r24, 0x0147
    3d92:	88 2f       	mov	r24, r24
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	01 96       	adiw	r24, 0x01	; 1
    3d98:	23 e0       	ldi	r18, 0x03	; 3
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	b9 01       	movw	r22, r18
    3d9e:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <__divmodhi4>
    3da2:	80 93 47 01 	sts	0x0147, r24
        
        switch (baroState)
    3da6:	80 91 47 01 	lds	r24, 0x0147
    3daa:	88 2f       	mov	r24, r24
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	81 30       	cpi	r24, 0x01	; 1
    3db0:	91 05       	cpc	r25, r1
    3db2:	89 f0       	breq	.+34     	; 0x3dd6 <sensor_Read+0x2da>
    3db4:	82 30       	cpi	r24, 0x02	; 2
    3db6:	91 05       	cpc	r25, r1
    3db8:	11 f1       	breq	.+68     	; 0x3dfe <sensor_Read+0x302>
    3dba:	00 97       	sbiw	r24, 0x00	; 0
    3dbc:	a9 f5       	brne	.+106    	; 0x3e28 <sensor_Read+0x32c>
        {
            case 0:
                    bmp_Request_Temperature();
    3dbe:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <bmp_Request_Temperature>
                    baroJob.timer = baroJob.trigger - 6;
    3dc2:	80 91 43 03 	lds	r24, 0x0343
    3dc6:	90 91 44 03 	lds	r25, 0x0344
    3dca:	06 97       	sbiw	r24, 0x06	; 6
    3dcc:	90 93 42 03 	sts	0x0342, r25
    3dd0:	80 93 41 03 	sts	0x0341, r24
                    break;
    3dd4:	29 c0       	rjmp	.+82     	; 0x3e28 <sensor_Read+0x32c>
            case 1:
                (*data).temperature = bmp_Read_Temperature();
    3dd6:	0e 94 0e 05 	call	0xa1c	; 0xa1c <bmp_Read_Temperature>
    3dda:	9c 01       	movw	r18, r24
    3ddc:	89 85       	ldd	r24, Y+9	; 0x09
    3dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de0:	fc 01       	movw	r30, r24
    3de2:	37 87       	std	Z+15, r19	; 0x0f
    3de4:	26 87       	std	Z+14, r18	; 0x0e
                bmp_Request_Pressure();
    3de6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <bmp_Request_Pressure>
                baroJob.timer = baroJob.trigger - 6;
    3dea:	80 91 43 03 	lds	r24, 0x0343
    3dee:	90 91 44 03 	lds	r25, 0x0344
    3df2:	06 97       	sbiw	r24, 0x06	; 6
    3df4:	90 93 42 03 	sts	0x0342, r25
    3df8:	80 93 41 03 	sts	0x0341, r24
                break;
    3dfc:	15 c0       	rjmp	.+42     	; 0x3e28 <sensor_Read+0x32c>
            case 2:
                (*data).pressure = bmp_Read_Pressure();
    3dfe:	0e 94 d6 05 	call	0xbac	; 0xbac <bmp_Read_Pressure>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	29 85       	ldd	r18, Y+9	; 0x09
    3e08:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e0a:	f9 01       	movw	r30, r18
    3e0c:	82 87       	std	Z+10, r24	; 0x0a
    3e0e:	93 87       	std	Z+11, r25	; 0x0b
    3e10:	a4 87       	std	Z+12, r26	; 0x0c
    3e12:	b5 87       	std	Z+13, r27	; 0x0d
                
                ready |= BARO_READY;
    3e14:	80 91 66 03 	lds	r24, 0x0366
    3e18:	90 91 67 03 	lds	r25, 0x0367
    3e1c:	82 60       	ori	r24, 0x02	; 2
    3e1e:	90 93 67 03 	sts	0x0367, r25
    3e22:	80 93 66 03 	sts	0x0366, r24
                
                break;
    3e26:	00 00       	nop
        }
    }
    
    ///BTA1
    if (timer_Job_Ready2(bta1Job, false))
    3e28:	40 91 49 03 	lds	r20, 0x0349
    3e2c:	50 91 4a 03 	lds	r21, 0x034A
    3e30:	87 e4       	ldi	r24, 0x47	; 71
    3e32:	93 e0       	ldi	r25, 0x03	; 3
    3e34:	2b e4       	ldi	r18, 0x4B	; 75
    3e36:	33 e0       	ldi	r19, 0x03	; 3
    3e38:	ba 01       	movw	r22, r20
    3e3a:	a9 01       	movw	r20, r18
    3e3c:	20 e0       	ldi	r18, 0x00	; 0
    3e3e:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <timer_Job_Ready4>
    3e42:	88 23       	and	r24, r24
    3e44:	09 f4       	brne	.+2      	; 0x3e48 <sensor_Read+0x34c>
    3e46:	3c c0       	rjmp	.+120    	; 0x3ec0 <sensor_Read+0x3c4>
    {
        if (extNum == 1)
    3e48:	80 91 63 03 	lds	r24, 0x0363
    3e4c:	81 30       	cpi	r24, 0x01	; 1
    3e4e:	f1 f4       	brne	.+60     	; 0x3e8c <sensor_Read+0x390>
        {
            (*data).bitpack.data.bta1 = extInts / 2;
    3e50:	80 91 64 03 	lds	r24, 0x0364
    3e54:	90 91 65 03 	lds	r25, 0x0365
    3e58:	96 95       	lsr	r25
    3e5a:	87 95       	ror	r24
    3e5c:	9c 01       	movw	r18, r24
    3e5e:	33 70       	andi	r19, 0x03	; 3
    3e60:	89 85       	ldd	r24, Y+9	; 0x09
    3e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e64:	fc 01       	movw	r30, r24
    3e66:	21 8f       	std	Z+25, r18	; 0x19
    3e68:	23 2f       	mov	r18, r19
    3e6a:	23 70       	andi	r18, 0x03	; 3
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	32 8d       	ldd	r19, Z+26	; 0x1a
    3e70:	3c 7f       	andi	r19, 0xFC	; 252
    3e72:	23 2b       	or	r18, r19
    3e74:	fc 01       	movw	r30, r24
    3e76:	22 8f       	std	Z+26, r18	; 0x1a
            ready |= BTA_1_READY;
    3e78:	80 91 66 03 	lds	r24, 0x0366
    3e7c:	90 91 67 03 	lds	r25, 0x0367
    3e80:	84 60       	ori	r24, 0x04	; 4
    3e82:	90 93 67 03 	sts	0x0367, r25
    3e86:	80 93 66 03 	sts	0x0366, r24
    3e8a:	1a c0       	rjmp	.+52     	; 0x3ec0 <sensor_Read+0x3c4>
        }
        else
        {
            (*data).bitpack.data.bta1 = adc_Read(BTA_1_PIN);
    3e8c:	83 e0       	ldi	r24, 0x03	; 3
    3e8e:	0e 94 2b 01 	call	0x256	; 0x256 <adc_Read>
    3e92:	9c 01       	movw	r18, r24
    3e94:	33 70       	andi	r19, 0x03	; 3
    3e96:	89 85       	ldd	r24, Y+9	; 0x09
    3e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	21 8f       	std	Z+25, r18	; 0x19
    3e9e:	23 2f       	mov	r18, r19
    3ea0:	23 70       	andi	r18, 0x03	; 3
    3ea2:	fc 01       	movw	r30, r24
    3ea4:	32 8d       	ldd	r19, Z+26	; 0x1a
    3ea6:	3c 7f       	andi	r19, 0xFC	; 252
    3ea8:	23 2b       	or	r18, r19
    3eaa:	fc 01       	movw	r30, r24
    3eac:	22 8f       	std	Z+26, r18	; 0x1a
            
            ready |= BTA_1_READY;
    3eae:	80 91 66 03 	lds	r24, 0x0366
    3eb2:	90 91 67 03 	lds	r25, 0x0367
    3eb6:	84 60       	ori	r24, 0x04	; 4
    3eb8:	90 93 67 03 	sts	0x0367, r25
    3ebc:	80 93 66 03 	sts	0x0366, r24
        }
    }

    ///BTA2
    if (timer_Job_Ready2(bta2Job, false))
    3ec0:	40 91 4f 03 	lds	r20, 0x034F
    3ec4:	50 91 50 03 	lds	r21, 0x0350
    3ec8:	8d e4       	ldi	r24, 0x4D	; 77
    3eca:	93 e0       	ldi	r25, 0x03	; 3
    3ecc:	21 e5       	ldi	r18, 0x51	; 81
    3ece:	33 e0       	ldi	r19, 0x03	; 3
    3ed0:	ba 01       	movw	r22, r20
    3ed2:	a9 01       	movw	r20, r18
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <timer_Job_Ready4>
    3eda:	88 23       	and	r24, r24
    3edc:	09 f4       	brne	.+2      	; 0x3ee0 <sensor_Read+0x3e4>
    3ede:	68 c0       	rjmp	.+208    	; 0x3fb0 <sensor_Read+0x4b4>
    {
        if (extNum == 2)
    3ee0:	80 91 63 03 	lds	r24, 0x0363
    3ee4:	82 30       	cpi	r24, 0x02	; 2
    3ee6:	a1 f5       	brne	.+104    	; 0x3f50 <sensor_Read+0x454>
        {
            (*data).bitpack.data.bta2 = extInts / 2;
    3ee8:	80 91 64 03 	lds	r24, 0x0364
    3eec:	90 91 65 03 	lds	r25, 0x0365
    3ef0:	96 95       	lsr	r25
    3ef2:	87 95       	ror	r24
    3ef4:	9c 01       	movw	r18, r24
    3ef6:	33 70       	andi	r19, 0x03	; 3
    3ef8:	89 85       	ldd	r24, Y+9	; 0x09
    3efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3efc:	42 2f       	mov	r20, r18
    3efe:	4f 73       	andi	r20, 0x3F	; 63
    3f00:	44 0f       	add	r20, r20
    3f02:	44 0f       	add	r20, r20
    3f04:	fc 01       	movw	r30, r24
    3f06:	52 8d       	ldd	r21, Z+26	; 0x1a
    3f08:	53 70       	andi	r21, 0x03	; 3
    3f0a:	45 2b       	or	r20, r21
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	42 8f       	std	Z+26, r20	; 0x1a
    3f10:	42 2f       	mov	r20, r18
    3f12:	42 95       	swap	r20
    3f14:	46 95       	lsr	r20
    3f16:	46 95       	lsr	r20
    3f18:	43 70       	andi	r20, 0x03	; 3
    3f1a:	43 70       	andi	r20, 0x03	; 3
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	53 8d       	ldd	r21, Z+27	; 0x1b
    3f20:	5c 7f       	andi	r21, 0xFC	; 252
    3f22:	45 2b       	or	r20, r21
    3f24:	fc 01       	movw	r30, r24
    3f26:	43 8f       	std	Z+27, r20	; 0x1b
    3f28:	23 2f       	mov	r18, r19
    3f2a:	23 70       	andi	r18, 0x03	; 3
    3f2c:	22 0f       	add	r18, r18
    3f2e:	22 0f       	add	r18, r18
    3f30:	fc 01       	movw	r30, r24
    3f32:	33 8d       	ldd	r19, Z+27	; 0x1b
    3f34:	33 7f       	andi	r19, 0xF3	; 243
    3f36:	23 2b       	or	r18, r19
    3f38:	fc 01       	movw	r30, r24
    3f3a:	23 8f       	std	Z+27, r18	; 0x1b
            ready |= BTA_2_READY;
    3f3c:	80 91 66 03 	lds	r24, 0x0366
    3f40:	90 91 67 03 	lds	r25, 0x0367
    3f44:	88 60       	ori	r24, 0x08	; 8
    3f46:	90 93 67 03 	sts	0x0367, r25
    3f4a:	80 93 66 03 	sts	0x0366, r24
    3f4e:	30 c0       	rjmp	.+96     	; 0x3fb0 <sensor_Read+0x4b4>
        }
        else
        {
            (*data).bitpack.data.bta2 = adc_Read(BTA_2_PIN);
    3f50:	84 e0       	ldi	r24, 0x04	; 4
    3f52:	0e 94 2b 01 	call	0x256	; 0x256 <adc_Read>
    3f56:	9c 01       	movw	r18, r24
    3f58:	33 70       	andi	r19, 0x03	; 3
    3f5a:	89 85       	ldd	r24, Y+9	; 0x09
    3f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f5e:	42 2f       	mov	r20, r18
    3f60:	4f 73       	andi	r20, 0x3F	; 63
    3f62:	44 0f       	add	r20, r20
    3f64:	44 0f       	add	r20, r20
    3f66:	fc 01       	movw	r30, r24
    3f68:	52 8d       	ldd	r21, Z+26	; 0x1a
    3f6a:	53 70       	andi	r21, 0x03	; 3
    3f6c:	45 2b       	or	r20, r21
    3f6e:	fc 01       	movw	r30, r24
    3f70:	42 8f       	std	Z+26, r20	; 0x1a
    3f72:	42 2f       	mov	r20, r18
    3f74:	42 95       	swap	r20
    3f76:	46 95       	lsr	r20
    3f78:	46 95       	lsr	r20
    3f7a:	43 70       	andi	r20, 0x03	; 3
    3f7c:	43 70       	andi	r20, 0x03	; 3
    3f7e:	fc 01       	movw	r30, r24
    3f80:	53 8d       	ldd	r21, Z+27	; 0x1b
    3f82:	5c 7f       	andi	r21, 0xFC	; 252
    3f84:	45 2b       	or	r20, r21
    3f86:	fc 01       	movw	r30, r24
    3f88:	43 8f       	std	Z+27, r20	; 0x1b
    3f8a:	23 2f       	mov	r18, r19
    3f8c:	23 70       	andi	r18, 0x03	; 3
    3f8e:	22 0f       	add	r18, r18
    3f90:	22 0f       	add	r18, r18
    3f92:	fc 01       	movw	r30, r24
    3f94:	33 8d       	ldd	r19, Z+27	; 0x1b
    3f96:	33 7f       	andi	r19, 0xF3	; 243
    3f98:	23 2b       	or	r18, r19
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	23 8f       	std	Z+27, r18	; 0x1b
            
            ready |= BTA_2_READY;
    3f9e:	80 91 66 03 	lds	r24, 0x0366
    3fa2:	90 91 67 03 	lds	r25, 0x0367
    3fa6:	88 60       	ori	r24, 0x08	; 8
    3fa8:	90 93 67 03 	sts	0x0367, r25
    3fac:	80 93 66 03 	sts	0x0366, r24
        }
    }


    ///Mini1
    if (timer_Job_Ready2(mini1Job, false))
    3fb0:	40 91 55 03 	lds	r20, 0x0355
    3fb4:	50 91 56 03 	lds	r21, 0x0356
    3fb8:	83 e5       	ldi	r24, 0x53	; 83
    3fba:	93 e0       	ldi	r25, 0x03	; 3
    3fbc:	27 e5       	ldi	r18, 0x57	; 87
    3fbe:	33 e0       	ldi	r19, 0x03	; 3
    3fc0:	ba 01       	movw	r22, r20
    3fc2:	a9 01       	movw	r20, r18
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <timer_Job_Ready4>
    3fca:	88 23       	and	r24, r24
    3fcc:	09 f4       	brne	.+2      	; 0x3fd0 <sensor_Read+0x4d4>
    3fce:	64 c0       	rjmp	.+200    	; 0x4098 <sensor_Read+0x59c>
    {
        if (extNum == 3)
    3fd0:	80 91 63 03 	lds	r24, 0x0363
    3fd4:	83 30       	cpi	r24, 0x03	; 3
    3fd6:	91 f5       	brne	.+100    	; 0x403c <sensor_Read+0x540>
        {
            (*data).bitpack.data.mini1 = extInts / 2;
    3fd8:	80 91 64 03 	lds	r24, 0x0364
    3fdc:	90 91 65 03 	lds	r25, 0x0365
    3fe0:	96 95       	lsr	r25
    3fe2:	87 95       	ror	r24
    3fe4:	9c 01       	movw	r18, r24
    3fe6:	33 70       	andi	r19, 0x03	; 3
    3fe8:	89 85       	ldd	r24, Y+9	; 0x09
    3fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fec:	42 2f       	mov	r20, r18
    3fee:	4f 70       	andi	r20, 0x0F	; 15
    3ff0:	42 95       	swap	r20
    3ff2:	40 7f       	andi	r20, 0xF0	; 240
    3ff4:	fc 01       	movw	r30, r24
    3ff6:	56 89       	ldd	r21, Z+22	; 0x16
    3ff8:	5f 70       	andi	r21, 0x0F	; 15
    3ffa:	45 2b       	or	r20, r21
    3ffc:	fc 01       	movw	r30, r24
    3ffe:	46 8b       	std	Z+22, r20	; 0x16
    4000:	42 2f       	mov	r20, r18
    4002:	42 95       	swap	r20
    4004:	4f 70       	andi	r20, 0x0F	; 15
    4006:	4f 70       	andi	r20, 0x0F	; 15
    4008:	fc 01       	movw	r30, r24
    400a:	57 89       	ldd	r21, Z+23	; 0x17
    400c:	50 7f       	andi	r21, 0xF0	; 240
    400e:	45 2b       	or	r20, r21
    4010:	fc 01       	movw	r30, r24
    4012:	47 8b       	std	Z+23, r20	; 0x17
    4014:	23 2f       	mov	r18, r19
    4016:	23 70       	andi	r18, 0x03	; 3
    4018:	22 95       	swap	r18
    401a:	20 7f       	andi	r18, 0xF0	; 240
    401c:	fc 01       	movw	r30, r24
    401e:	37 89       	ldd	r19, Z+23	; 0x17
    4020:	3f 7c       	andi	r19, 0xCF	; 207
    4022:	23 2b       	or	r18, r19
    4024:	fc 01       	movw	r30, r24
    4026:	27 8b       	std	Z+23, r18	; 0x17
            ready |= MINI_1_READY;
    4028:	80 91 66 03 	lds	r24, 0x0366
    402c:	90 91 67 03 	lds	r25, 0x0367
    4030:	80 61       	ori	r24, 0x10	; 16
    4032:	90 93 67 03 	sts	0x0367, r25
    4036:	80 93 66 03 	sts	0x0366, r24
    403a:	2e c0       	rjmp	.+92     	; 0x4098 <sensor_Read+0x59c>
        }
        else
        {
            (*data).bitpack.data.mini1 = adc_Read(MINIJACK_1_PIN);
    403c:	85 e0       	ldi	r24, 0x05	; 5
    403e:	0e 94 2b 01 	call	0x256	; 0x256 <adc_Read>
    4042:	9c 01       	movw	r18, r24
    4044:	33 70       	andi	r19, 0x03	; 3
    4046:	89 85       	ldd	r24, Y+9	; 0x09
    4048:	9a 85       	ldd	r25, Y+10	; 0x0a
    404a:	42 2f       	mov	r20, r18
    404c:	4f 70       	andi	r20, 0x0F	; 15
    404e:	42 95       	swap	r20
    4050:	40 7f       	andi	r20, 0xF0	; 240
    4052:	fc 01       	movw	r30, r24
    4054:	56 89       	ldd	r21, Z+22	; 0x16
    4056:	5f 70       	andi	r21, 0x0F	; 15
    4058:	45 2b       	or	r20, r21
    405a:	fc 01       	movw	r30, r24
    405c:	46 8b       	std	Z+22, r20	; 0x16
    405e:	42 2f       	mov	r20, r18
    4060:	42 95       	swap	r20
    4062:	4f 70       	andi	r20, 0x0F	; 15
    4064:	4f 70       	andi	r20, 0x0F	; 15
    4066:	fc 01       	movw	r30, r24
    4068:	57 89       	ldd	r21, Z+23	; 0x17
    406a:	50 7f       	andi	r21, 0xF0	; 240
    406c:	45 2b       	or	r20, r21
    406e:	fc 01       	movw	r30, r24
    4070:	47 8b       	std	Z+23, r20	; 0x17
    4072:	23 2f       	mov	r18, r19
    4074:	23 70       	andi	r18, 0x03	; 3
    4076:	22 95       	swap	r18
    4078:	20 7f       	andi	r18, 0xF0	; 240
    407a:	fc 01       	movw	r30, r24
    407c:	37 89       	ldd	r19, Z+23	; 0x17
    407e:	3f 7c       	andi	r19, 0xCF	; 207
    4080:	23 2b       	or	r18, r19
    4082:	fc 01       	movw	r30, r24
    4084:	27 8b       	std	Z+23, r18	; 0x17
            
            ready |= MINI_1_READY;
    4086:	80 91 66 03 	lds	r24, 0x0366
    408a:	90 91 67 03 	lds	r25, 0x0367
    408e:	80 61       	ori	r24, 0x10	; 16
    4090:	90 93 67 03 	sts	0x0367, r25
    4094:	80 93 66 03 	sts	0x0366, r24
        }
    }


    ///Mini1
    if (timer_Job_Ready2(mini2Job, false))
    4098:	40 91 5b 03 	lds	r20, 0x035B
    409c:	50 91 5c 03 	lds	r21, 0x035C
    40a0:	89 e5       	ldi	r24, 0x59	; 89
    40a2:	93 e0       	ldi	r25, 0x03	; 3
    40a4:	2d e5       	ldi	r18, 0x5D	; 93
    40a6:	33 e0       	ldi	r19, 0x03	; 3
    40a8:	ba 01       	movw	r22, r20
    40aa:	a9 01       	movw	r20, r18
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <timer_Job_Ready4>
    40b2:	88 23       	and	r24, r24
    40b4:	09 f4       	brne	.+2      	; 0x40b8 <sensor_Read+0x5bc>
    40b6:	6a c0       	rjmp	.+212    	; 0x418c <sensor_Read+0x690>
    {
        if (extNum == 4)
    40b8:	80 91 63 03 	lds	r24, 0x0363
    40bc:	84 30       	cpi	r24, 0x04	; 4
    40be:	a9 f5       	brne	.+106    	; 0x412a <sensor_Read+0x62e>
        {
            (*data).bitpack.data.mini2 = extInts / 2;
    40c0:	80 91 64 03 	lds	r24, 0x0364
    40c4:	90 91 65 03 	lds	r25, 0x0365
    40c8:	96 95       	lsr	r25
    40ca:	87 95       	ror	r24
    40cc:	9c 01       	movw	r18, r24
    40ce:	33 70       	andi	r19, 0x03	; 3
    40d0:	89 85       	ldd	r24, Y+9	; 0x09
    40d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    40d4:	42 2f       	mov	r20, r18
    40d6:	43 70       	andi	r20, 0x03	; 3
    40d8:	42 95       	swap	r20
    40da:	44 0f       	add	r20, r20
    40dc:	44 0f       	add	r20, r20
    40de:	40 7c       	andi	r20, 0xC0	; 192
    40e0:	fc 01       	movw	r30, r24
    40e2:	57 89       	ldd	r21, Z+23	; 0x17
    40e4:	5f 73       	andi	r21, 0x3F	; 63
    40e6:	45 2b       	or	r20, r21
    40e8:	fc 01       	movw	r30, r24
    40ea:	47 8b       	std	Z+23, r20	; 0x17
    40ec:	42 2f       	mov	r20, r18
    40ee:	46 95       	lsr	r20
    40f0:	46 95       	lsr	r20
    40f2:	4f 73       	andi	r20, 0x3F	; 63
    40f4:	fc 01       	movw	r30, r24
    40f6:	50 8d       	ldd	r21, Z+24	; 0x18
    40f8:	50 7c       	andi	r21, 0xC0	; 192
    40fa:	45 2b       	or	r20, r21
    40fc:	fc 01       	movw	r30, r24
    40fe:	40 8f       	std	Z+24, r20	; 0x18
    4100:	23 2f       	mov	r18, r19
    4102:	22 95       	swap	r18
    4104:	22 0f       	add	r18, r18
    4106:	22 0f       	add	r18, r18
    4108:	20 7c       	andi	r18, 0xC0	; 192
    410a:	fc 01       	movw	r30, r24
    410c:	30 8d       	ldd	r19, Z+24	; 0x18
    410e:	3f 73       	andi	r19, 0x3F	; 63
    4110:	23 2b       	or	r18, r19
    4112:	fc 01       	movw	r30, r24
    4114:	20 8f       	std	Z+24, r18	; 0x18
            ready |= MINI_2_READY;
    4116:	80 91 66 03 	lds	r24, 0x0366
    411a:	90 91 67 03 	lds	r25, 0x0367
    411e:	80 62       	ori	r24, 0x20	; 32
    4120:	90 93 67 03 	sts	0x0367, r25
    4124:	80 93 66 03 	sts	0x0366, r24
    4128:	31 c0       	rjmp	.+98     	; 0x418c <sensor_Read+0x690>
        }
        else
        {
            (*data).bitpack.data.mini2 = adc_Read(MINIJACK_2_PIN);
    412a:	86 e0       	ldi	r24, 0x06	; 6
    412c:	0e 94 2b 01 	call	0x256	; 0x256 <adc_Read>
    4130:	9c 01       	movw	r18, r24
    4132:	33 70       	andi	r19, 0x03	; 3
    4134:	89 85       	ldd	r24, Y+9	; 0x09
    4136:	9a 85       	ldd	r25, Y+10	; 0x0a
    4138:	42 2f       	mov	r20, r18
    413a:	43 70       	andi	r20, 0x03	; 3
    413c:	42 95       	swap	r20
    413e:	44 0f       	add	r20, r20
    4140:	44 0f       	add	r20, r20
    4142:	40 7c       	andi	r20, 0xC0	; 192
    4144:	fc 01       	movw	r30, r24
    4146:	57 89       	ldd	r21, Z+23	; 0x17
    4148:	5f 73       	andi	r21, 0x3F	; 63
    414a:	45 2b       	or	r20, r21
    414c:	fc 01       	movw	r30, r24
    414e:	47 8b       	std	Z+23, r20	; 0x17
    4150:	42 2f       	mov	r20, r18
    4152:	46 95       	lsr	r20
    4154:	46 95       	lsr	r20
    4156:	4f 73       	andi	r20, 0x3F	; 63
    4158:	fc 01       	movw	r30, r24
    415a:	50 8d       	ldd	r21, Z+24	; 0x18
    415c:	50 7c       	andi	r21, 0xC0	; 192
    415e:	45 2b       	or	r20, r21
    4160:	fc 01       	movw	r30, r24
    4162:	40 8f       	std	Z+24, r20	; 0x18
    4164:	23 2f       	mov	r18, r19
    4166:	22 95       	swap	r18
    4168:	22 0f       	add	r18, r18
    416a:	22 0f       	add	r18, r18
    416c:	20 7c       	andi	r18, 0xC0	; 192
    416e:	fc 01       	movw	r30, r24
    4170:	30 8d       	ldd	r19, Z+24	; 0x18
    4172:	3f 73       	andi	r19, 0x3F	; 63
    4174:	23 2b       	or	r18, r19
    4176:	fc 01       	movw	r30, r24
    4178:	20 8f       	std	Z+24, r18	; 0x18
            
            ready |= MINI_2_READY;
    417a:	80 91 66 03 	lds	r24, 0x0366
    417e:	90 91 67 03 	lds	r25, 0x0367
    4182:	80 62       	ori	r24, 0x20	; 32
    4184:	90 93 67 03 	sts	0x0367, r25
    4188:	80 93 66 03 	sts	0x0366, r24
        }
    }

    ///GPS Poll
    if (gpsEnabled && timer_Job_Ready2(gpsPollJob, false))
    418c:	80 91 68 03 	lds	r24, 0x0368
    4190:	88 23       	and	r24, r24
    4192:	89 f0       	breq	.+34     	; 0x41b6 <sensor_Read+0x6ba>
    4194:	40 91 37 01 	lds	r20, 0x0137
    4198:	50 91 38 01 	lds	r21, 0x0138
    419c:	85 e3       	ldi	r24, 0x35	; 53
    419e:	91 e0       	ldi	r25, 0x01	; 1
    41a0:	29 e3       	ldi	r18, 0x39	; 57
    41a2:	31 e0       	ldi	r19, 0x01	; 1
    41a4:	ba 01       	movw	r22, r20
    41a6:	a9 01       	movw	r20, r18
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <timer_Job_Ready4>
    41ae:	88 23       	and	r24, r24
    41b0:	11 f0       	breq	.+4      	; 0x41b6 <sensor_Read+0x6ba>
    {
        gps_Poll();
    41b2:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <gps_Poll>
    }

    ///Low Power
    if (timer_Job_Ready2(powerJob, false))
    41b6:	40 91 3d 01 	lds	r20, 0x013D
    41ba:	50 91 3e 01 	lds	r21, 0x013E
    41be:	8b e3       	ldi	r24, 0x3B	; 59
    41c0:	91 e0       	ldi	r25, 0x01	; 1
    41c2:	2f e3       	ldi	r18, 0x3F	; 63
    41c4:	31 e0       	ldi	r19, 0x01	; 1
    41c6:	ba 01       	movw	r22, r20
    41c8:	a9 01       	movw	r20, r18
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <timer_Job_Ready4>
    41d0:	88 23       	and	r24, r24
    41d2:	e9 f0       	breq	.+58     	; 0x420e <sensor_Read+0x712>
    {
        if (adc_Read(POWER_PIN) <= LOW_POWER && adc_Read(POWER_PIN) > BAD_POWER)
    41d4:	80 e0       	ldi	r24, 0x00	; 0
    41d6:	0e 94 2b 01 	call	0x256	; 0x256 <adc_Read>
    41da:	f2 e0       	ldi	r31, 0x02	; 2
    41dc:	8f 32       	cpi	r24, 0x2F	; 47
    41de:	9f 07       	cpc	r25, r31
    41e0:	58 f4       	brcc	.+22     	; 0x41f8 <sensor_Read+0x6fc>
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	0e 94 2b 01 	call	0x256	; 0x256 <adc_Read>
    41e8:	22 e0       	ldi	r18, 0x02	; 2
    41ea:	80 31       	cpi	r24, 0x10	; 16
    41ec:	92 07       	cpc	r25, r18
    41ee:	20 f0       	brcs	.+8      	; 0x41f8 <sensor_Read+0x6fc>
        {
            user_Toggle_LED(LED_POWER);
    41f0:	84 e0       	ldi	r24, 0x04	; 4
    41f2:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <user_Toggle_LED>
    41f6:	0b c0       	rjmp	.+22     	; 0x420e <sensor_Read+0x712>
        }
        else if (adc_Read(POWER_PIN) > LOW_POWER)
    41f8:	80 e0       	ldi	r24, 0x00	; 0
    41fa:	0e 94 2b 01 	call	0x256	; 0x256 <adc_Read>
    41fe:	e2 e0       	ldi	r30, 0x02	; 2
    4200:	8f 32       	cpi	r24, 0x2F	; 47
    4202:	9e 07       	cpc	r25, r30
    4204:	20 f0       	brcs	.+8      	; 0x420e <sensor_Read+0x712>
        {
            user_Set_LED(LED_POWER, ON);
    4206:	84 e0       	ldi	r24, 0x04	; 4
    4208:	61 e0       	ldi	r22, 0x01	; 1
    420a:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <user_Set_LED>
        }
    }

    ///Critical Power
    if (timer_Job_Ready2(badPowerJob, false))
    420e:	40 91 43 01 	lds	r20, 0x0143
    4212:	50 91 44 01 	lds	r21, 0x0144
    4216:	81 e4       	ldi	r24, 0x41	; 65
    4218:	91 e0       	ldi	r25, 0x01	; 1
    421a:	25 e4       	ldi	r18, 0x45	; 69
    421c:	31 e0       	ldi	r19, 0x01	; 1
    421e:	ba 01       	movw	r22, r20
    4220:	a9 01       	movw	r20, r18
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <timer_Job_Ready4>
    4228:	88 23       	and	r24, r24
    422a:	51 f0       	breq	.+20     	; 0x4240 <sensor_Read+0x744>
    {
        if (adc_Read(POWER_PIN) <= BAD_POWER)
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	0e 94 2b 01 	call	0x256	; 0x256 <adc_Read>
    4232:	f2 e0       	ldi	r31, 0x02	; 2
    4234:	80 31       	cpi	r24, 0x10	; 16
    4236:	9f 07       	cpc	r25, r31
    4238:	18 f4       	brcc	.+6      	; 0x4240 <sensor_Read+0x744>
        {
            user_Toggle_LED(LED_POWER);
    423a:	84 e0       	ldi	r24, 0x04	; 4
    423c:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <user_Toggle_LED>
        }
    }

    return ready == ALL_READY;
    4240:	80 91 66 03 	lds	r24, 0x0366
    4244:	90 91 67 03 	lds	r25, 0x0367
    4248:	21 e0       	ldi	r18, 0x01	; 1
    424a:	8f 33       	cpi	r24, 0x3F	; 63
    424c:	91 05       	cpc	r25, r1
    424e:	09 f0       	breq	.+2      	; 0x4252 <sensor_Read+0x756>
    4250:	20 e0       	ldi	r18, 0x00	; 0
    4252:	82 2f       	mov	r24, r18
}
    4254:	2a 96       	adiw	r28, 0x0a	; 10
    4256:	0f b6       	in	r0, 0x3f	; 63
    4258:	f8 94       	cli
    425a:	de bf       	out	0x3e, r29	; 62
    425c:	0f be       	out	0x3f, r0	; 63
    425e:	cd bf       	out	0x3d, r28	; 61
    4260:	cf 91       	pop	r28
    4262:	df 91       	pop	r29
    4264:	08 95       	ret

00004266 <sensor_Reset>:
 * counters controlling data collection.
 *
 * @param data The DataPoint to reset.
 */
void sensor_Reset(DataPoint *data)
{
    4266:	df 93       	push	r29
    4268:	cf 93       	push	r28
    426a:	00 d0       	rcall	.+0      	; 0x426c <sensor_Reset+0x6>
    426c:	00 d0       	rcall	.+0      	; 0x426e <sensor_Reset+0x8>
    426e:	cd b7       	in	r28, 0x3d	; 61
    4270:	de b7       	in	r29, 0x3e	; 62
    4272:	9c 83       	std	Y+4, r25	; 0x04
    4274:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int time = timer_Clock_Read_MS();
    4276:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <timer_Clock_Read_MS>
    427a:	9a 83       	std	Y+2, r25	; 0x02
    427c:	89 83       	std	Y+1, r24	; 0x01

    ready = 0;
    427e:	10 92 67 03 	sts	0x0367, r1
    4282:	10 92 66 03 	sts	0x0366, r1

    mainJob.timer = 0;
    4286:	10 92 3c 03 	sts	0x033C, r1
    428a:	10 92 3b 03 	sts	0x033B, r1
    mainJob.last = time;
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	9a 81       	ldd	r25, Y+2	; 0x02
    4292:	90 93 40 03 	sts	0x0340, r25
    4296:	80 93 3f 03 	sts	0x033F, r24
    
    baroJob.timer = 0;
    429a:	10 92 42 03 	sts	0x0342, r1
    429e:	10 92 41 03 	sts	0x0341, r1
    baroJob.last = time;
    42a2:	89 81       	ldd	r24, Y+1	; 0x01
    42a4:	9a 81       	ldd	r25, Y+2	; 0x02
    42a6:	90 93 46 03 	sts	0x0346, r25
    42aa:	80 93 45 03 	sts	0x0345, r24
    baroState = 2;
    42ae:	82 e0       	ldi	r24, 0x02	; 2
    42b0:	80 93 47 01 	sts	0x0147, r24

    bta1Job.timer = 0;
    42b4:	10 92 48 03 	sts	0x0348, r1
    42b8:	10 92 47 03 	sts	0x0347, r1
    bta1Job.last = time;
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
    42be:	9a 81       	ldd	r25, Y+2	; 0x02
    42c0:	90 93 4c 03 	sts	0x034C, r25
    42c4:	80 93 4b 03 	sts	0x034B, r24

    bta2Job.timer = 0;
    42c8:	10 92 4e 03 	sts	0x034E, r1
    42cc:	10 92 4d 03 	sts	0x034D, r1
    bta2Job.last = time;
    42d0:	89 81       	ldd	r24, Y+1	; 0x01
    42d2:	9a 81       	ldd	r25, Y+2	; 0x02
    42d4:	90 93 52 03 	sts	0x0352, r25
    42d8:	80 93 51 03 	sts	0x0351, r24

    mini1Job.timer = 0;
    42dc:	10 92 54 03 	sts	0x0354, r1
    42e0:	10 92 53 03 	sts	0x0353, r1
    mini1Job.last = time;
    42e4:	89 81       	ldd	r24, Y+1	; 0x01
    42e6:	9a 81       	ldd	r25, Y+2	; 0x02
    42e8:	90 93 58 03 	sts	0x0358, r25
    42ec:	80 93 57 03 	sts	0x0357, r24

    mini2Job.timer = 0;
    42f0:	10 92 5a 03 	sts	0x035A, r1
    42f4:	10 92 59 03 	sts	0x0359, r1
    mini2Job.last = time;
    42f8:	89 81       	ldd	r24, Y+1	; 0x01
    42fa:	9a 81       	ldd	r25, Y+2	; 0x02
    42fc:	90 93 5e 03 	sts	0x035E, r25
    4300:	80 93 5d 03 	sts	0x035D, r24

    if (!baroEnabled)
    4304:	90 91 69 03 	lds	r25, 0x0369
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	89 27       	eor	r24, r25
    430c:	88 23       	and	r24, r24
    430e:	a9 f0       	breq	.+42     	; 0x433a <sensor_Reset+0xd4>
    {
        data->temperature = 0;
    4310:	8b 81       	ldd	r24, Y+3	; 0x03
    4312:	9c 81       	ldd	r25, Y+4	; 0x04
    4314:	fc 01       	movw	r30, r24
    4316:	17 86       	std	Z+15, r1	; 0x0f
    4318:	16 86       	std	Z+14, r1	; 0x0e
        data->pressure = 0;
    431a:	8b 81       	ldd	r24, Y+3	; 0x03
    431c:	9c 81       	ldd	r25, Y+4	; 0x04
    431e:	fc 01       	movw	r30, r24
    4320:	12 86       	std	Z+10, r1	; 0x0a
    4322:	13 86       	std	Z+11, r1	; 0x0b
    4324:	14 86       	std	Z+12, r1	; 0x0c
    4326:	15 86       	std	Z+13, r1	; 0x0d
        ready |= BARO_READY;
    4328:	80 91 66 03 	lds	r24, 0x0366
    432c:	90 91 67 03 	lds	r25, 0x0367
    4330:	82 60       	ori	r24, 0x02	; 2
    4332:	90 93 67 03 	sts	0x0367, r25
    4336:	80 93 66 03 	sts	0x0366, r24
    }
    
    if (!gpsEnabled)
    433a:	90 91 68 03 	lds	r25, 0x0368
    433e:	81 e0       	ldi	r24, 0x01	; 1
    4340:	89 27       	eor	r24, r25
    4342:	88 23       	and	r24, r24
    4344:	f9 f0       	breq	.+62     	; 0x4384 <sensor_Reset+0x11e>
    {
       data->latHigh = 20000;
    4346:	8b 81       	ldd	r24, Y+3	; 0x03
    4348:	9c 81       	ldd	r25, Y+4	; 0x04
    434a:	20 e2       	ldi	r18, 0x20	; 32
    434c:	3e e4       	ldi	r19, 0x4E	; 78
    434e:	fc 01       	movw	r30, r24
    4350:	31 83       	std	Z+1, r19	; 0x01
    4352:	20 83       	st	Z, r18
       data->latLow = 0;
    4354:	8b 81       	ldd	r24, Y+3	; 0x03
    4356:	9c 81       	ldd	r25, Y+4	; 0x04
    4358:	fc 01       	movw	r30, r24
    435a:	13 82       	std	Z+3, r1	; 0x03
    435c:	12 82       	std	Z+2, r1	; 0x02
       data->lonHigh = 20000;
    435e:	8b 81       	ldd	r24, Y+3	; 0x03
    4360:	9c 81       	ldd	r25, Y+4	; 0x04
    4362:	20 e2       	ldi	r18, 0x20	; 32
    4364:	3e e4       	ldi	r19, 0x4E	; 78
    4366:	fc 01       	movw	r30, r24
    4368:	35 83       	std	Z+5, r19	; 0x05
    436a:	24 83       	std	Z+4, r18	; 0x04
       data->lonLow = 0;
    436c:	8b 81       	ldd	r24, Y+3	; 0x03
    436e:	9c 81       	ldd	r25, Y+4	; 0x04
    4370:	fc 01       	movw	r30, r24
    4372:	17 82       	std	Z+7, r1	; 0x07
    4374:	16 82       	std	Z+6, r1	; 0x06
       data->altitude = 60000;
    4376:	8b 81       	ldd	r24, Y+3	; 0x03
    4378:	9c 81       	ldd	r25, Y+4	; 0x04
    437a:	20 e6       	ldi	r18, 0x60	; 96
    437c:	3a ee       	ldi	r19, 0xEA	; 234
    437e:	fc 01       	movw	r30, r24
    4380:	31 87       	std	Z+9, r19	; 0x09
    4382:	20 87       	std	Z+8, r18	; 0x08
    }
}
    4384:	0f 90       	pop	r0
    4386:	0f 90       	pop	r0
    4388:	0f 90       	pop	r0
    438a:	0f 90       	pop	r0
    438c:	cf 91       	pop	r28
    438e:	df 91       	pop	r29
    4390:	08 95       	ret

00004392 <spi_MasterInit>:

/**
 * Initializes SPI pins and clears the SPI registers.
 */
void spi_MasterInit(void)
{
    4392:	df 93       	push	r29
    4394:	cf 93       	push	r28
    4396:	0f 92       	push	r0
    4398:	cd b7       	in	r28, 0x3d	; 61
    439a:	de b7       	in	r29, 0x3e	; 62
    unsigned char clr;

    spi_End_Command();
    439c:	85 e2       	ldi	r24, 0x25	; 37
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	25 e2       	ldi	r18, 0x25	; 37
    43a2:	30 e0       	ldi	r19, 0x00	; 0
    43a4:	f9 01       	movw	r30, r18
    43a6:	20 81       	ld	r18, Z
    43a8:	20 61       	ori	r18, 0x10	; 16
    43aa:	fc 01       	movw	r30, r24
    43ac:	20 83       	st	Z, r18
    /* Set MOSI, CS and SCK output, all others input */
    SPI_DDR = (1<<MOSI_PIN)|(1<<SCK_PIN)|(1<<CS_PIN);
    43ae:	84 e2       	ldi	r24, 0x24	; 36
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	20 eb       	ldi	r18, 0xB0	; 176
    43b4:	fc 01       	movw	r30, r24
    43b6:	20 83       	st	Z, r18
    /* Enable SPI, Master, set clock rate fck/16 */
    SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0) | (1 << CPOL) | (1 << CPHA);
    43b8:	8c e4       	ldi	r24, 0x4C	; 76
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	2d e5       	ldi	r18, 0x5D	; 93
    43be:	fc 01       	movw	r30, r24
    43c0:	20 83       	st	Z, r18
    /* Clear registers */
    clr = SPSR;
    43c2:	8d e4       	ldi	r24, 0x4D	; 77
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	fc 01       	movw	r30, r24
    43c8:	80 81       	ld	r24, Z
    43ca:	89 83       	std	Y+1, r24	; 0x01
    clr = SPDR;
    43cc:	8e e4       	ldi	r24, 0x4E	; 78
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	fc 01       	movw	r30, r24
    43d2:	80 81       	ld	r24, Z
    43d4:	89 83       	std	Y+1, r24	; 0x01

    sst_Write_Protect_Disable();
    43d6:	0e 94 03 24 	call	0x4806	; 0x4806 <sst_Write_Protect_Disable>
}
    43da:	0f 90       	pop	r0
    43dc:	cf 91       	pop	r28
    43de:	df 91       	pop	r29
    43e0:	08 95       	ret

000043e2 <spi_Transfer>:
 * @param data The byte to send.
 *
 * @return Returns the byte received.
 */
unsigned char spi_Transfer (unsigned char data)
{
    43e2:	df 93       	push	r29
    43e4:	cf 93       	push	r28
    43e6:	0f 92       	push	r0
    43e8:	cd b7       	in	r28, 0x3d	; 61
    43ea:	de b7       	in	r29, 0x3e	; 62
    43ec:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
    43ee:	8e e4       	ldi	r24, 0x4E	; 78
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	29 81       	ldd	r18, Y+1	; 0x01
    43f4:	fc 01       	movw	r30, r24
    43f6:	20 83       	st	Z, r18
    while (!(SPSR & (1<<SPIF)));
    43f8:	00 00       	nop
    43fa:	8d e4       	ldi	r24, 0x4D	; 77
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	fc 01       	movw	r30, r24
    4400:	80 81       	ld	r24, Z
    4402:	88 23       	and	r24, r24
    4404:	d4 f7       	brge	.-12     	; 0x43fa <spi_Transfer+0x18>
    return SPDR;
    4406:	8e e4       	ldi	r24, 0x4E	; 78
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	fc 01       	movw	r30, r24
    440c:	80 81       	ld	r24, Z
}
    440e:	0f 90       	pop	r0
    4410:	cf 91       	pop	r28
    4412:	df 91       	pop	r29
    4414:	08 95       	ret

00004416 <sst_Status>:
 * Requests the status byte from the sst.
 *
 * @return Returns the status byte.
 */
unsigned char sst_Status(void)
{
    4416:	df 93       	push	r29
    4418:	cf 93       	push	r28
    441a:	0f 92       	push	r0
    441c:	cd b7       	in	r28, 0x3d	; 61
    441e:	de b7       	in	r29, 0x3e	; 62
    unsigned char data;

    spi_Start_Command();
    4420:	85 e2       	ldi	r24, 0x25	; 37
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	25 e2       	ldi	r18, 0x25	; 37
    4426:	30 e0       	ldi	r19, 0x00	; 0
    4428:	f9 01       	movw	r30, r18
    442a:	20 81       	ld	r18, Z
    442c:	2f 7e       	andi	r18, 0xEF	; 239
    442e:	fc 01       	movw	r30, r24
    4430:	20 83       	st	Z, r18
    spi_Transfer(SST_STATUS);
    4432:	85 e0       	ldi	r24, 0x05	; 5
    4434:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    data = spi_Transfer(SST_UNUSED_BYTE);
    4438:	82 e1       	ldi	r24, 0x12	; 18
    443a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    443e:	89 83       	std	Y+1, r24	; 0x01
    spi_End_Command();
    4440:	85 e2       	ldi	r24, 0x25	; 37
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	25 e2       	ldi	r18, 0x25	; 37
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	f9 01       	movw	r30, r18
    444a:	20 81       	ld	r18, Z
    444c:	20 61       	ori	r18, 0x10	; 16
    444e:	fc 01       	movw	r30, r24
    4450:	20 83       	st	Z, r18

    return data;
    4452:	89 81       	ldd	r24, Y+1	; 0x01
}
    4454:	0f 90       	pop	r0
    4456:	cf 91       	pop	r28
    4458:	df 91       	pop	r29
    445a:	08 95       	ret

0000445c <sst_Finalize>:
/**
 * Waits for the sst to indicate it is ready to accept a
 * new command.
 */
void sst_Finalize(void)
{
    445c:	df 93       	push	r29
    445e:	cf 93       	push	r28
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
    while ((sst_Status() & STATUS_READY_BIT));
    4464:	00 00       	nop
    4466:	0e 94 0b 22 	call	0x4416	; 0x4416 <sst_Status>
    446a:	88 2f       	mov	r24, r24
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	81 70       	andi	r24, 0x01	; 1
    4470:	90 70       	andi	r25, 0x00	; 0
    4472:	88 23       	and	r24, r24
    4474:	c1 f7       	brne	.-16     	; 0x4466 <sst_Finalize+0xa>
}
    4476:	cf 91       	pop	r28
    4478:	df 91       	pop	r29
    447a:	08 95       	ret

0000447c <sst_AAI_Write>:
 * @param size size of the data. Must be a multiple of two.
 *
 * @return Returns OK if succesfull, ERROR if given size was invalid.
 */
status sst_AAI_Write(char* addr, char* data, int size)
{
    447c:	df 93       	push	r29
    447e:	cf 93       	push	r28
    4480:	cd b7       	in	r28, 0x3d	; 61
    4482:	de b7       	in	r29, 0x3e	; 62
    4484:	28 97       	sbiw	r28, 0x08	; 8
    4486:	0f b6       	in	r0, 0x3f	; 63
    4488:	f8 94       	cli
    448a:	de bf       	out	0x3e, r29	; 62
    448c:	0f be       	out	0x3f, r0	; 63
    448e:	cd bf       	out	0x3d, r28	; 61
    4490:	9c 83       	std	Y+4, r25	; 0x04
    4492:	8b 83       	std	Y+3, r24	; 0x03
    4494:	7e 83       	std	Y+6, r23	; 0x06
    4496:	6d 83       	std	Y+5, r22	; 0x05
    4498:	58 87       	std	Y+8, r21	; 0x08
    449a:	4f 83       	std	Y+7, r20	; 0x07
    //Ensure size is even
    if (size % 2 != 0)
    449c:	8f 81       	ldd	r24, Y+7	; 0x07
    449e:	98 85       	ldd	r25, Y+8	; 0x08
    44a0:	81 70       	andi	r24, 0x01	; 1
    44a2:	90 70       	andi	r25, 0x00	; 0
    44a4:	88 23       	and	r24, r24
    44a6:	11 f0       	breq	.+4      	; 0x44ac <sst_AAI_Write+0x30>
    {
        return ERROR;
    44a8:	80 e0       	ldi	r24, 0x00	; 0
    44aa:	c0 c0       	rjmp	.+384    	; 0x462c <sst_AAI_Write+0x1b0>
    }

    if (size <= 0)
    44ac:	8f 81       	ldd	r24, Y+7	; 0x07
    44ae:	98 85       	ldd	r25, Y+8	; 0x08
    44b0:	18 16       	cp	r1, r24
    44b2:	19 06       	cpc	r1, r25
    44b4:	14 f0       	brlt	.+4      	; 0x44ba <sst_AAI_Write+0x3e>
    {
        return ERROR;
    44b6:	80 e0       	ldi	r24, 0x00	; 0
    44b8:	b9 c0       	rjmp	.+370    	; 0x462c <sst_AAI_Write+0x1b0>
    }

    int i = 0;
    44ba:	1a 82       	std	Y+2, r1	; 0x02
    44bc:	19 82       	std	Y+1, r1	; 0x01

    spi_Start_Command();
    44be:	85 e2       	ldi	r24, 0x25	; 37
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	25 e2       	ldi	r18, 0x25	; 37
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	f9 01       	movw	r30, r18
    44c8:	20 81       	ld	r18, Z
    44ca:	2f 7e       	andi	r18, 0xEF	; 239
    44cc:	fc 01       	movw	r30, r24
    44ce:	20 83       	st	Z, r18
    spi_Transfer(SST_WRITE_ENABLE);
    44d0:	86 e0       	ldi	r24, 0x06	; 6
    44d2:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_End_Command();
    44d6:	85 e2       	ldi	r24, 0x25	; 37
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	25 e2       	ldi	r18, 0x25	; 37
    44dc:	30 e0       	ldi	r19, 0x00	; 0
    44de:	f9 01       	movw	r30, r18
    44e0:	20 81       	ld	r18, Z
    44e2:	20 61       	ori	r18, 0x10	; 16
    44e4:	fc 01       	movw	r30, r24
    44e6:	20 83       	st	Z, r18

    spi_Start_Command();
    44e8:	85 e2       	ldi	r24, 0x25	; 37
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	25 e2       	ldi	r18, 0x25	; 37
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	f9 01       	movw	r30, r18
    44f2:	20 81       	ld	r18, Z
    44f4:	2f 7e       	andi	r18, 0xEF	; 239
    44f6:	fc 01       	movw	r30, r24
    44f8:	20 83       	st	Z, r18
    spi_Transfer(SST_AAI_WRITE);
    44fa:	8d ea       	ldi	r24, 0xAD	; 173
    44fc:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(addr[2]);
    4500:	8b 81       	ldd	r24, Y+3	; 0x03
    4502:	9c 81       	ldd	r25, Y+4	; 0x04
    4504:	02 96       	adiw	r24, 0x02	; 2
    4506:	fc 01       	movw	r30, r24
    4508:	80 81       	ld	r24, Z
    450a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(addr[1]);
    450e:	8b 81       	ldd	r24, Y+3	; 0x03
    4510:	9c 81       	ldd	r25, Y+4	; 0x04
    4512:	01 96       	adiw	r24, 0x01	; 1
    4514:	fc 01       	movw	r30, r24
    4516:	80 81       	ld	r24, Z
    4518:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(addr[0]);
    451c:	8b 81       	ldd	r24, Y+3	; 0x03
    451e:	9c 81       	ldd	r25, Y+4	; 0x04
    4520:	fc 01       	movw	r30, r24
    4522:	80 81       	ld	r24, Z
    4524:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(data[i++]);
    4528:	89 81       	ldd	r24, Y+1	; 0x01
    452a:	9a 81       	ldd	r25, Y+2	; 0x02
    452c:	2d 81       	ldd	r18, Y+5	; 0x05
    452e:	3e 81       	ldd	r19, Y+6	; 0x06
    4530:	82 0f       	add	r24, r18
    4532:	93 1f       	adc	r25, r19
    4534:	fc 01       	movw	r30, r24
    4536:	20 81       	ld	r18, Z
    4538:	89 81       	ldd	r24, Y+1	; 0x01
    453a:	9a 81       	ldd	r25, Y+2	; 0x02
    453c:	01 96       	adiw	r24, 0x01	; 1
    453e:	9a 83       	std	Y+2, r25	; 0x02
    4540:	89 83       	std	Y+1, r24	; 0x01
    4542:	82 2f       	mov	r24, r18
    4544:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(data[i++]);
    4548:	89 81       	ldd	r24, Y+1	; 0x01
    454a:	9a 81       	ldd	r25, Y+2	; 0x02
    454c:	2d 81       	ldd	r18, Y+5	; 0x05
    454e:	3e 81       	ldd	r19, Y+6	; 0x06
    4550:	82 0f       	add	r24, r18
    4552:	93 1f       	adc	r25, r19
    4554:	fc 01       	movw	r30, r24
    4556:	20 81       	ld	r18, Z
    4558:	89 81       	ldd	r24, Y+1	; 0x01
    455a:	9a 81       	ldd	r25, Y+2	; 0x02
    455c:	01 96       	adiw	r24, 0x01	; 1
    455e:	9a 83       	std	Y+2, r25	; 0x02
    4560:	89 83       	std	Y+1, r24	; 0x01
    4562:	82 2f       	mov	r24, r18
    4564:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>

    while (i < size)
    4568:	37 c0       	rjmp	.+110    	; 0x45d8 <sst_AAI_Write+0x15c>
    {
        spi_End_Command();
    456a:	85 e2       	ldi	r24, 0x25	; 37
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	25 e2       	ldi	r18, 0x25	; 37
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	f9 01       	movw	r30, r18
    4574:	20 81       	ld	r18, Z
    4576:	20 61       	ori	r18, 0x10	; 16
    4578:	fc 01       	movw	r30, r24
    457a:	20 83       	st	Z, r18
        sst_Finalize();
    457c:	0e 94 2e 22 	call	0x445c	; 0x445c <sst_Finalize>
        spi_Start_Command();
    4580:	85 e2       	ldi	r24, 0x25	; 37
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	25 e2       	ldi	r18, 0x25	; 37
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	f9 01       	movw	r30, r18
    458a:	20 81       	ld	r18, Z
    458c:	2f 7e       	andi	r18, 0xEF	; 239
    458e:	fc 01       	movw	r30, r24
    4590:	20 83       	st	Z, r18

        spi_Transfer(SST_AAI_WRITE);
    4592:	8d ea       	ldi	r24, 0xAD	; 173
    4594:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
        spi_Transfer(data[i++]);
    4598:	89 81       	ldd	r24, Y+1	; 0x01
    459a:	9a 81       	ldd	r25, Y+2	; 0x02
    459c:	2d 81       	ldd	r18, Y+5	; 0x05
    459e:	3e 81       	ldd	r19, Y+6	; 0x06
    45a0:	82 0f       	add	r24, r18
    45a2:	93 1f       	adc	r25, r19
    45a4:	fc 01       	movw	r30, r24
    45a6:	20 81       	ld	r18, Z
    45a8:	89 81       	ldd	r24, Y+1	; 0x01
    45aa:	9a 81       	ldd	r25, Y+2	; 0x02
    45ac:	01 96       	adiw	r24, 0x01	; 1
    45ae:	9a 83       	std	Y+2, r25	; 0x02
    45b0:	89 83       	std	Y+1, r24	; 0x01
    45b2:	82 2f       	mov	r24, r18
    45b4:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
        spi_Transfer(data[i++]);
    45b8:	89 81       	ldd	r24, Y+1	; 0x01
    45ba:	9a 81       	ldd	r25, Y+2	; 0x02
    45bc:	2d 81       	ldd	r18, Y+5	; 0x05
    45be:	3e 81       	ldd	r19, Y+6	; 0x06
    45c0:	82 0f       	add	r24, r18
    45c2:	93 1f       	adc	r25, r19
    45c4:	fc 01       	movw	r30, r24
    45c6:	20 81       	ld	r18, Z
    45c8:	89 81       	ldd	r24, Y+1	; 0x01
    45ca:	9a 81       	ldd	r25, Y+2	; 0x02
    45cc:	01 96       	adiw	r24, 0x01	; 1
    45ce:	9a 83       	std	Y+2, r25	; 0x02
    45d0:	89 83       	std	Y+1, r24	; 0x01
    45d2:	82 2f       	mov	r24, r18
    45d4:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(addr[1]);
    spi_Transfer(addr[0]);
    spi_Transfer(data[i++]);
    spi_Transfer(data[i++]);

    while (i < size)
    45d8:	29 81       	ldd	r18, Y+1	; 0x01
    45da:	3a 81       	ldd	r19, Y+2	; 0x02
    45dc:	8f 81       	ldd	r24, Y+7	; 0x07
    45de:	98 85       	ldd	r25, Y+8	; 0x08
    45e0:	28 17       	cp	r18, r24
    45e2:	39 07       	cpc	r19, r25
    45e4:	14 f2       	brlt	.-124    	; 0x456a <sst_AAI_Write+0xee>
        spi_Transfer(SST_AAI_WRITE);
        spi_Transfer(data[i++]);
        spi_Transfer(data[i++]);
    }

    spi_End_Command();
    45e6:	85 e2       	ldi	r24, 0x25	; 37
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	25 e2       	ldi	r18, 0x25	; 37
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	f9 01       	movw	r30, r18
    45f0:	20 81       	ld	r18, Z
    45f2:	20 61       	ori	r18, 0x10	; 16
    45f4:	fc 01       	movw	r30, r24
    45f6:	20 83       	st	Z, r18
    sst_Finalize();
    45f8:	0e 94 2e 22 	call	0x445c	; 0x445c <sst_Finalize>

    spi_Start_Command();
    45fc:	85 e2       	ldi	r24, 0x25	; 37
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	25 e2       	ldi	r18, 0x25	; 37
    4602:	30 e0       	ldi	r19, 0x00	; 0
    4604:	f9 01       	movw	r30, r18
    4606:	20 81       	ld	r18, Z
    4608:	2f 7e       	andi	r18, 0xEF	; 239
    460a:	fc 01       	movw	r30, r24
    460c:	20 83       	st	Z, r18
    spi_Transfer(SST_WRITE_DISABLE);
    460e:	84 e0       	ldi	r24, 0x04	; 4
    4610:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_End_Command();
    4614:	85 e2       	ldi	r24, 0x25	; 37
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	25 e2       	ldi	r18, 0x25	; 37
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	f9 01       	movw	r30, r18
    461e:	20 81       	ld	r18, Z
    4620:	20 61       	ori	r18, 0x10	; 16
    4622:	fc 01       	movw	r30, r24
    4624:	20 83       	st	Z, r18

    sst_Finalize();
    4626:	0e 94 2e 22 	call	0x445c	; 0x445c <sst_Finalize>

    return OK;
    462a:	81 e0       	ldi	r24, 0x01	; 1
}
    462c:	28 96       	adiw	r28, 0x08	; 8
    462e:	0f b6       	in	r0, 0x3f	; 63
    4630:	f8 94       	cli
    4632:	de bf       	out	0x3e, r29	; 62
    4634:	0f be       	out	0x3f, r0	; 63
    4636:	cd bf       	out	0x3d, r28	; 61
    4638:	cf 91       	pop	r28
    463a:	df 91       	pop	r29
    463c:	08 95       	ret

0000463e <sst_Read>:
 * @param size Number of bytes to read.
 *
 * @return Returns ERROR if an invalid size is given, otherwise OK.
 */
status sst_Read(char* addr, char* data, int size)
{
    463e:	0f 93       	push	r16
    4640:	1f 93       	push	r17
    4642:	df 93       	push	r29
    4644:	cf 93       	push	r28
    4646:	cd b7       	in	r28, 0x3d	; 61
    4648:	de b7       	in	r29, 0x3e	; 62
    464a:	28 97       	sbiw	r28, 0x08	; 8
    464c:	0f b6       	in	r0, 0x3f	; 63
    464e:	f8 94       	cli
    4650:	de bf       	out	0x3e, r29	; 62
    4652:	0f be       	out	0x3f, r0	; 63
    4654:	cd bf       	out	0x3d, r28	; 61
    4656:	9c 83       	std	Y+4, r25	; 0x04
    4658:	8b 83       	std	Y+3, r24	; 0x03
    465a:	7e 83       	std	Y+6, r23	; 0x06
    465c:	6d 83       	std	Y+5, r22	; 0x05
    465e:	58 87       	std	Y+8, r21	; 0x08
    4660:	4f 83       	std	Y+7, r20	; 0x07
    if (size <= 0)
    4662:	8f 81       	ldd	r24, Y+7	; 0x07
    4664:	98 85       	ldd	r25, Y+8	; 0x08
    4666:	18 16       	cp	r1, r24
    4668:	19 06       	cpc	r1, r25
    466a:	14 f0       	brlt	.+4      	; 0x4670 <sst_Read+0x32>
    {
        return ERROR;
    466c:	80 e0       	ldi	r24, 0x00	; 0
    466e:	45 c0       	rjmp	.+138    	; 0x46fa <sst_Read+0xbc>
    }

    int i = 0;
    4670:	1a 82       	std	Y+2, r1	; 0x02
    4672:	19 82       	std	Y+1, r1	; 0x01

    spi_Start_Command();
    4674:	85 e2       	ldi	r24, 0x25	; 37
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	25 e2       	ldi	r18, 0x25	; 37
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	f9 01       	movw	r30, r18
    467e:	20 81       	ld	r18, Z
    4680:	2f 7e       	andi	r18, 0xEF	; 239
    4682:	fc 01       	movw	r30, r24
    4684:	20 83       	st	Z, r18
    spi_Transfer(SST_READ);
    4686:	83 e0       	ldi	r24, 0x03	; 3
    4688:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(addr[2]);
    468c:	8b 81       	ldd	r24, Y+3	; 0x03
    468e:	9c 81       	ldd	r25, Y+4	; 0x04
    4690:	02 96       	adiw	r24, 0x02	; 2
    4692:	fc 01       	movw	r30, r24
    4694:	80 81       	ld	r24, Z
    4696:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(addr[1]);
    469a:	8b 81       	ldd	r24, Y+3	; 0x03
    469c:	9c 81       	ldd	r25, Y+4	; 0x04
    469e:	01 96       	adiw	r24, 0x01	; 1
    46a0:	fc 01       	movw	r30, r24
    46a2:	80 81       	ld	r24, Z
    46a4:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(addr[0]);
    46a8:	8b 81       	ldd	r24, Y+3	; 0x03
    46aa:	9c 81       	ldd	r25, Y+4	; 0x04
    46ac:	fc 01       	movw	r30, r24
    46ae:	80 81       	ld	r24, Z
    46b0:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>

    while (i < size)
    46b4:	11 c0       	rjmp	.+34     	; 0x46d8 <sst_Read+0x9a>
    {
        data[i++] = spi_Transfer(SST_UNUSED_BYTE);
    46b6:	89 81       	ldd	r24, Y+1	; 0x01
    46b8:	9a 81       	ldd	r25, Y+2	; 0x02
    46ba:	2d 81       	ldd	r18, Y+5	; 0x05
    46bc:	3e 81       	ldd	r19, Y+6	; 0x06
    46be:	89 01       	movw	r16, r18
    46c0:	08 0f       	add	r16, r24
    46c2:	19 1f       	adc	r17, r25
    46c4:	82 e1       	ldi	r24, 0x12	; 18
    46c6:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    46ca:	f8 01       	movw	r30, r16
    46cc:	80 83       	st	Z, r24
    46ce:	89 81       	ldd	r24, Y+1	; 0x01
    46d0:	9a 81       	ldd	r25, Y+2	; 0x02
    46d2:	01 96       	adiw	r24, 0x01	; 1
    46d4:	9a 83       	std	Y+2, r25	; 0x02
    46d6:	89 83       	std	Y+1, r24	; 0x01
    spi_Transfer(SST_READ);
    spi_Transfer(addr[2]);
    spi_Transfer(addr[1]);
    spi_Transfer(addr[0]);

    while (i < size)
    46d8:	29 81       	ldd	r18, Y+1	; 0x01
    46da:	3a 81       	ldd	r19, Y+2	; 0x02
    46dc:	8f 81       	ldd	r24, Y+7	; 0x07
    46de:	98 85       	ldd	r25, Y+8	; 0x08
    46e0:	28 17       	cp	r18, r24
    46e2:	39 07       	cpc	r19, r25
    46e4:	44 f3       	brlt	.-48     	; 0x46b6 <sst_Read+0x78>
    {
        data[i++] = spi_Transfer(SST_UNUSED_BYTE);
    }

    spi_End_Command();
    46e6:	85 e2       	ldi	r24, 0x25	; 37
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	25 e2       	ldi	r18, 0x25	; 37
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	f9 01       	movw	r30, r18
    46f0:	20 81       	ld	r18, Z
    46f2:	20 61       	ori	r18, 0x10	; 16
    46f4:	fc 01       	movw	r30, r24
    46f6:	20 83       	st	Z, r18

    return OK;
    46f8:	81 e0       	ldi	r24, 0x01	; 1
}
    46fa:	28 96       	adiw	r28, 0x08	; 8
    46fc:	0f b6       	in	r0, 0x3f	; 63
    46fe:	f8 94       	cli
    4700:	de bf       	out	0x3e, r29	; 62
    4702:	0f be       	out	0x3f, r0	; 63
    4704:	cd bf       	out	0x3d, r28	; 61
    4706:	cf 91       	pop	r28
    4708:	df 91       	pop	r29
    470a:	1f 91       	pop	r17
    470c:	0f 91       	pop	r16
    470e:	08 95       	ret

00004710 <sst_Read_To_Coms>:
 * @param chksum Address to store additive 8-bit checksum at.
 *
 * @return Returns ERROR if an invalid size is given, otherwise OK.
 */
status sst_Read_To_Coms(char* addr, uint32_t size)
{
    4710:	df 93       	push	r29
    4712:	cf 93       	push	r28
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
    4718:	2c 97       	sbiw	r28, 0x0c	; 12
    471a:	0f b6       	in	r0, 0x3f	; 63
    471c:	f8 94       	cli
    471e:	de bf       	out	0x3e, r29	; 62
    4720:	0f be       	out	0x3f, r0	; 63
    4722:	cd bf       	out	0x3d, r28	; 61
    4724:	98 87       	std	Y+8, r25	; 0x08
    4726:	8f 83       	std	Y+7, r24	; 0x07
    4728:	49 87       	std	Y+9, r20	; 0x09
    472a:	5a 87       	std	Y+10, r21	; 0x0a
    472c:	6b 87       	std	Y+11, r22	; 0x0b
    472e:	7c 87       	std	Y+12, r23	; 0x0c
    if (size <= 0)
    4730:	89 85       	ldd	r24, Y+9	; 0x09
    4732:	9a 85       	ldd	r25, Y+10	; 0x0a
    4734:	ab 85       	ldd	r26, Y+11	; 0x0b
    4736:	bc 85       	ldd	r27, Y+12	; 0x0c
    4738:	00 97       	sbiw	r24, 0x00	; 0
    473a:	a1 05       	cpc	r26, r1
    473c:	b1 05       	cpc	r27, r1
    473e:	11 f4       	brne	.+4      	; 0x4744 <sst_Read_To_Coms+0x34>
    {
        return ERROR;
    4740:	80 e0       	ldi	r24, 0x00	; 0
    4742:	58 c0       	rjmp	.+176    	; 0x47f4 <sst_Read_To_Coms+0xe4>
    }

    uint32_t i = 0;
    4744:	19 82       	std	Y+1, r1	; 0x01
    4746:	1a 82       	std	Y+2, r1	; 0x02
    4748:	1b 82       	std	Y+3, r1	; 0x03
    474a:	1c 82       	std	Y+4, r1	; 0x04
    char data;
    char chksum = 0;
    474c:	1d 82       	std	Y+5, r1	; 0x05

    spi_Start_Command();
    474e:	85 e2       	ldi	r24, 0x25	; 37
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	25 e2       	ldi	r18, 0x25	; 37
    4754:	30 e0       	ldi	r19, 0x00	; 0
    4756:	f9 01       	movw	r30, r18
    4758:	20 81       	ld	r18, Z
    475a:	2f 7e       	andi	r18, 0xEF	; 239
    475c:	fc 01       	movw	r30, r24
    475e:	20 83       	st	Z, r18
    spi_Transfer(SST_READ);
    4760:	83 e0       	ldi	r24, 0x03	; 3
    4762:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(addr[2]);
    4766:	8f 81       	ldd	r24, Y+7	; 0x07
    4768:	98 85       	ldd	r25, Y+8	; 0x08
    476a:	02 96       	adiw	r24, 0x02	; 2
    476c:	fc 01       	movw	r30, r24
    476e:	80 81       	ld	r24, Z
    4770:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(addr[1]);
    4774:	8f 81       	ldd	r24, Y+7	; 0x07
    4776:	98 85       	ldd	r25, Y+8	; 0x08
    4778:	01 96       	adiw	r24, 0x01	; 1
    477a:	fc 01       	movw	r30, r24
    477c:	80 81       	ld	r24, Z
    477e:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(addr[0]);
    4782:	8f 81       	ldd	r24, Y+7	; 0x07
    4784:	98 85       	ldd	r25, Y+8	; 0x08
    4786:	fc 01       	movw	r30, r24
    4788:	80 81       	ld	r24, Z
    478a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>

    while (i < size)
    478e:	17 c0       	rjmp	.+46     	; 0x47be <sst_Read_To_Coms+0xae>
    {
        data = spi_Transfer(SST_UNUSED_BYTE);
    4790:	82 e1       	ldi	r24, 0x12	; 18
    4792:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    4796:	8e 83       	std	Y+6, r24	; 0x06
        chksum = ((uint16_t)(chksum) + data) & 0xFF;
    4798:	9d 81       	ldd	r25, Y+5	; 0x05
    479a:	8e 81       	ldd	r24, Y+6	; 0x06
    479c:	89 0f       	add	r24, r25
    479e:	8d 83       	std	Y+5, r24	; 0x05
        usart_Write(SERIAL, data);
    47a0:	81 e0       	ldi	r24, 0x01	; 1
    47a2:	6e 81       	ldd	r22, Y+6	; 0x06
    47a4:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
        i++;
    47a8:	89 81       	ldd	r24, Y+1	; 0x01
    47aa:	9a 81       	ldd	r25, Y+2	; 0x02
    47ac:	ab 81       	ldd	r26, Y+3	; 0x03
    47ae:	bc 81       	ldd	r27, Y+4	; 0x04
    47b0:	01 96       	adiw	r24, 0x01	; 1
    47b2:	a1 1d       	adc	r26, r1
    47b4:	b1 1d       	adc	r27, r1
    47b6:	89 83       	std	Y+1, r24	; 0x01
    47b8:	9a 83       	std	Y+2, r25	; 0x02
    47ba:	ab 83       	std	Y+3, r26	; 0x03
    47bc:	bc 83       	std	Y+4, r27	; 0x04
    spi_Transfer(SST_READ);
    spi_Transfer(addr[2]);
    spi_Transfer(addr[1]);
    spi_Transfer(addr[0]);

    while (i < size)
    47be:	29 81       	ldd	r18, Y+1	; 0x01
    47c0:	3a 81       	ldd	r19, Y+2	; 0x02
    47c2:	4b 81       	ldd	r20, Y+3	; 0x03
    47c4:	5c 81       	ldd	r21, Y+4	; 0x04
    47c6:	89 85       	ldd	r24, Y+9	; 0x09
    47c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    47cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    47ce:	28 17       	cp	r18, r24
    47d0:	39 07       	cpc	r19, r25
    47d2:	4a 07       	cpc	r20, r26
    47d4:	5b 07       	cpc	r21, r27
    47d6:	e0 f2       	brcs	.-72     	; 0x4790 <sst_Read_To_Coms+0x80>
        chksum = ((uint16_t)(chksum) + data) & 0xFF;
        usart_Write(SERIAL, data);
        i++;
    }

    spi_End_Command();
    47d8:	85 e2       	ldi	r24, 0x25	; 37
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	25 e2       	ldi	r18, 0x25	; 37
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	f9 01       	movw	r30, r18
    47e2:	20 81       	ld	r18, Z
    47e4:	20 61       	ori	r18, 0x10	; 16
    47e6:	fc 01       	movw	r30, r24
    47e8:	20 83       	st	Z, r18

    usart_Write(SERIAL, chksum);
    47ea:	81 e0       	ldi	r24, 0x01	; 1
    47ec:	6d 81       	ldd	r22, Y+5	; 0x05
    47ee:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>

    return OK;
    47f2:	81 e0       	ldi	r24, 0x01	; 1
}
    47f4:	2c 96       	adiw	r28, 0x0c	; 12
    47f6:	0f b6       	in	r0, 0x3f	; 63
    47f8:	f8 94       	cli
    47fa:	de bf       	out	0x3e, r29	; 62
    47fc:	0f be       	out	0x3f, r0	; 63
    47fe:	cd bf       	out	0x3d, r28	; 61
    4800:	cf 91       	pop	r28
    4802:	df 91       	pop	r29
    4804:	08 95       	ret

00004806 <sst_Write_Protect_Disable>:
 * Turns off write protect mode.
 *
 * @return Returns OK.
 */
status sst_Write_Protect_Disable(void)
{
    4806:	df 93       	push	r29
    4808:	cf 93       	push	r28
    480a:	cd b7       	in	r28, 0x3d	; 61
    480c:	de b7       	in	r29, 0x3e	; 62
    spi_Start_Command();
    480e:	85 e2       	ldi	r24, 0x25	; 37
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	25 e2       	ldi	r18, 0x25	; 37
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	f9 01       	movw	r30, r18
    4818:	20 81       	ld	r18, Z
    481a:	2f 7e       	andi	r18, 0xEF	; 239
    481c:	fc 01       	movw	r30, r24
    481e:	20 83       	st	Z, r18
    spi_Transfer(SST_STATUS_WRITE_ENABLE);
    4820:	80 e5       	ldi	r24, 0x50	; 80
    4822:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_End_Command();
    4826:	85 e2       	ldi	r24, 0x25	; 37
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	25 e2       	ldi	r18, 0x25	; 37
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	f9 01       	movw	r30, r18
    4830:	20 81       	ld	r18, Z
    4832:	20 61       	ori	r18, 0x10	; 16
    4834:	fc 01       	movw	r30, r24
    4836:	20 83       	st	Z, r18

    spi_Start_Command();
    4838:	85 e2       	ldi	r24, 0x25	; 37
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	25 e2       	ldi	r18, 0x25	; 37
    483e:	30 e0       	ldi	r19, 0x00	; 0
    4840:	f9 01       	movw	r30, r18
    4842:	20 81       	ld	r18, Z
    4844:	2f 7e       	andi	r18, 0xEF	; 239
    4846:	fc 01       	movw	r30, r24
    4848:	20 83       	st	Z, r18
    spi_Transfer(SST_STATUS_WRITE);
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_Transfer(SST_WRITE_PROTECT_DISABLE_BITS);
    4850:	80 e0       	ldi	r24, 0x00	; 0
    4852:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_End_Command();
    4856:	85 e2       	ldi	r24, 0x25	; 37
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	25 e2       	ldi	r18, 0x25	; 37
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	f9 01       	movw	r30, r18
    4860:	20 81       	ld	r18, Z
    4862:	20 61       	ori	r18, 0x10	; 16
    4864:	fc 01       	movw	r30, r24
    4866:	20 83       	st	Z, r18

    spi_Start_Command();
    4868:	85 e2       	ldi	r24, 0x25	; 37
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	25 e2       	ldi	r18, 0x25	; 37
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	f9 01       	movw	r30, r18
    4872:	20 81       	ld	r18, Z
    4874:	2f 7e       	andi	r18, 0xEF	; 239
    4876:	fc 01       	movw	r30, r24
    4878:	20 83       	st	Z, r18
    spi_Transfer(SST_WRITE_DISABLE);
    487a:	84 e0       	ldi	r24, 0x04	; 4
    487c:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_End_Command();
    4880:	85 e2       	ldi	r24, 0x25	; 37
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	25 e2       	ldi	r18, 0x25	; 37
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	f9 01       	movw	r30, r18
    488a:	20 81       	ld	r18, Z
    488c:	20 61       	ori	r18, 0x10	; 16
    488e:	fc 01       	movw	r30, r24
    4890:	20 83       	st	Z, r18

    return OK;
    4892:	81 e0       	ldi	r24, 0x01	; 1
}
    4894:	cf 91       	pop	r28
    4896:	df 91       	pop	r29
    4898:	08 95       	ret

0000489a <sst_Chip_Erase>:
 * Erases the entire memory.
 *
 * @return Returns OK.
 */
status sst_Chip_Erase(void)
{
    489a:	df 93       	push	r29
    489c:	cf 93       	push	r28
    489e:	cd b7       	in	r28, 0x3d	; 61
    48a0:	de b7       	in	r29, 0x3e	; 62
    spi_Start_Command();
    48a2:	85 e2       	ldi	r24, 0x25	; 37
    48a4:	90 e0       	ldi	r25, 0x00	; 0
    48a6:	25 e2       	ldi	r18, 0x25	; 37
    48a8:	30 e0       	ldi	r19, 0x00	; 0
    48aa:	f9 01       	movw	r30, r18
    48ac:	20 81       	ld	r18, Z
    48ae:	2f 7e       	andi	r18, 0xEF	; 239
    48b0:	fc 01       	movw	r30, r24
    48b2:	20 83       	st	Z, r18
    spi_Transfer(SST_WRITE_ENABLE);
    48b4:	86 e0       	ldi	r24, 0x06	; 6
    48b6:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_End_Command();
    48ba:	85 e2       	ldi	r24, 0x25	; 37
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	25 e2       	ldi	r18, 0x25	; 37
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	f9 01       	movw	r30, r18
    48c4:	20 81       	ld	r18, Z
    48c6:	20 61       	ori	r18, 0x10	; 16
    48c8:	fc 01       	movw	r30, r24
    48ca:	20 83       	st	Z, r18

    spi_Start_Command();
    48cc:	85 e2       	ldi	r24, 0x25	; 37
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	25 e2       	ldi	r18, 0x25	; 37
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	f9 01       	movw	r30, r18
    48d6:	20 81       	ld	r18, Z
    48d8:	2f 7e       	andi	r18, 0xEF	; 239
    48da:	fc 01       	movw	r30, r24
    48dc:	20 83       	st	Z, r18
    spi_Transfer(SST_CHIP_ERASE);
    48de:	80 e6       	ldi	r24, 0x60	; 96
    48e0:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_End_Command();
    48e4:	85 e2       	ldi	r24, 0x25	; 37
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	25 e2       	ldi	r18, 0x25	; 37
    48ea:	30 e0       	ldi	r19, 0x00	; 0
    48ec:	f9 01       	movw	r30, r18
    48ee:	20 81       	ld	r18, Z
    48f0:	20 61       	ori	r18, 0x10	; 16
    48f2:	fc 01       	movw	r30, r24
    48f4:	20 83       	st	Z, r18

    spi_Start_Command();
    48f6:	85 e2       	ldi	r24, 0x25	; 37
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	25 e2       	ldi	r18, 0x25	; 37
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	f9 01       	movw	r30, r18
    4900:	20 81       	ld	r18, Z
    4902:	2f 7e       	andi	r18, 0xEF	; 239
    4904:	fc 01       	movw	r30, r24
    4906:	20 83       	st	Z, r18
    spi_Transfer(SST_WRITE_DISABLE);
    4908:	84 e0       	ldi	r24, 0x04	; 4
    490a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <spi_Transfer>
    spi_End_Command();
    490e:	85 e2       	ldi	r24, 0x25	; 37
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	25 e2       	ldi	r18, 0x25	; 37
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	f9 01       	movw	r30, r18
    4918:	20 81       	ld	r18, Z
    491a:	20 61       	ori	r18, 0x10	; 16
    491c:	fc 01       	movw	r30, r24
    491e:	20 83       	st	Z, r18

    sst_Finalize();
    4920:	0e 94 2e 22 	call	0x445c	; 0x445c <sst_Finalize>

    return OK;
    4924:	81 e0       	ldi	r24, 0x01	; 1
    4926:	cf 91       	pop	r28
    4928:	df 91       	pop	r29
    492a:	08 95       	ret

0000492c <__vector_13>:

/**
 * Increments the clock.
 */
ISR(TIMER1_COMPA_vect)
{
    492c:	1f 92       	push	r1
    492e:	0f 92       	push	r0
    4930:	0f b6       	in	r0, 0x3f	; 63
    4932:	0f 92       	push	r0
    4934:	11 24       	eor	r1, r1
    4936:	2f 93       	push	r18
    4938:	3f 93       	push	r19
    493a:	5f 93       	push	r21
    493c:	6f 93       	push	r22
    493e:	7f 93       	push	r23
    4940:	8f 93       	push	r24
    4942:	9f 93       	push	r25
    4944:	af 93       	push	r26
    4946:	bf 93       	push	r27
    4948:	ef 93       	push	r30
    494a:	ff 93       	push	r31
    494c:	df 93       	push	r29
    494e:	cf 93       	push	r28
    4950:	cd b7       	in	r28, 0x3d	; 61
    4952:	de b7       	in	r29, 0x3e	; 62
    clockMilisecondsPassed += 1;
    4954:	80 91 6c 03 	lds	r24, 0x036C
    4958:	90 91 6d 03 	lds	r25, 0x036D
    495c:	01 96       	adiw	r24, 0x01	; 1
    495e:	90 93 6d 03 	sts	0x036D, r25
    4962:	80 93 6c 03 	sts	0x036C, r24
    TCNT1 = 1;
    4966:	84 e8       	ldi	r24, 0x84	; 132
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	21 e0       	ldi	r18, 0x01	; 1
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	fc 01       	movw	r30, r24
    4970:	31 83       	std	Z+1, r19	; 0x01
    4972:	20 83       	st	Z, r18
    clockSecondsPassed += clockMilisecondsPassed / MILISECONDS_PER_SECOND;
    4974:	80 91 6c 03 	lds	r24, 0x036C
    4978:	90 91 6d 03 	lds	r25, 0x036D
    497c:	28 ee       	ldi	r18, 0xE8	; 232
    497e:	33 e0       	ldi	r19, 0x03	; 3
    4980:	b9 01       	movw	r22, r18
    4982:	0e 94 0e 3f 	call	0x7e1c	; 0x7e1c <__udivmodhi4>
    4986:	9b 01       	movw	r18, r22
    4988:	80 91 6a 03 	lds	r24, 0x036A
    498c:	90 91 6b 03 	lds	r25, 0x036B
    4990:	82 0f       	add	r24, r18
    4992:	93 1f       	adc	r25, r19
    4994:	90 93 6b 03 	sts	0x036B, r25
    4998:	80 93 6a 03 	sts	0x036A, r24
    clockMilisecondsPassed %= MILISECONDS_PER_SECOND;
    499c:	80 91 6c 03 	lds	r24, 0x036C
    49a0:	90 91 6d 03 	lds	r25, 0x036D
    49a4:	28 ee       	ldi	r18, 0xE8	; 232
    49a6:	33 e0       	ldi	r19, 0x03	; 3
    49a8:	b9 01       	movw	r22, r18
    49aa:	0e 94 0e 3f 	call	0x7e1c	; 0x7e1c <__udivmodhi4>
    49ae:	90 93 6d 03 	sts	0x036D, r25
    49b2:	80 93 6c 03 	sts	0x036C, r24
    
    if (clockSleepCount > 0)
    49b6:	80 91 6e 03 	lds	r24, 0x036E
    49ba:	90 91 6f 03 	lds	r25, 0x036F
    49be:	18 16       	cp	r1, r24
    49c0:	19 06       	cpc	r1, r25
    49c2:	8c f4       	brge	.+34     	; 0x49e6 <__vector_13+0xba>
    {
        if (--clockSleepCount == 0)
    49c4:	80 91 6e 03 	lds	r24, 0x036E
    49c8:	90 91 6f 03 	lds	r25, 0x036F
    49cc:	01 97       	sbiw	r24, 0x01	; 1
    49ce:	90 93 6f 03 	sts	0x036F, r25
    49d2:	80 93 6e 03 	sts	0x036E, r24
    49d6:	80 91 6e 03 	lds	r24, 0x036E
    49da:	90 91 6f 03 	lds	r25, 0x036F
    49de:	00 97       	sbiw	r24, 0x00	; 0
    49e0:	11 f4       	brne	.+4      	; 0x49e6 <__vector_13+0xba>
        {
            timerSleep = 0;
    49e2:	10 92 70 03 	sts	0x0370, r1
        }
    }
}
    49e6:	cf 91       	pop	r28
    49e8:	df 91       	pop	r29
    49ea:	ff 91       	pop	r31
    49ec:	ef 91       	pop	r30
    49ee:	bf 91       	pop	r27
    49f0:	af 91       	pop	r26
    49f2:	9f 91       	pop	r25
    49f4:	8f 91       	pop	r24
    49f6:	7f 91       	pop	r23
    49f8:	6f 91       	pop	r22
    49fa:	5f 91       	pop	r21
    49fc:	3f 91       	pop	r19
    49fe:	2f 91       	pop	r18
    4a00:	0f 90       	pop	r0
    4a02:	0f be       	out	0x3f, r0	; 63
    4a04:	0f 90       	pop	r0
    4a06:	1f 90       	pop	r1
    4a08:	18 95       	reti

00004a0a <timer_Init>:

/**
 * Initialzes timer 1 to run off the CPU clock with a prescaler of 1024.
 */
void timer_Init(void)
{
    4a0a:	df 93       	push	r29
    4a0c:	cf 93       	push	r28
    4a0e:	cd b7       	in	r28, 0x3d	; 61
    4a10:	de b7       	in	r29, 0x3e	; 62
    clear_bit(PRR, PRTIM1);
    4a12:	84 e6       	ldi	r24, 0x64	; 100
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	24 e6       	ldi	r18, 0x64	; 100
    4a18:	30 e0       	ldi	r19, 0x00	; 0
    4a1a:	f9 01       	movw	r30, r18
    4a1c:	20 81       	ld	r18, Z
    4a1e:	27 7f       	andi	r18, 0xF7	; 247
    4a20:	fc 01       	movw	r30, r24
    4a22:	20 83       	st	Z, r18

    clear_bit(TCCR1A, WGM10);
    4a24:	80 e8       	ldi	r24, 0x80	; 128
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	20 e8       	ldi	r18, 0x80	; 128
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	f9 01       	movw	r30, r18
    4a2e:	20 81       	ld	r18, Z
    4a30:	2e 7f       	andi	r18, 0xFE	; 254
    4a32:	fc 01       	movw	r30, r24
    4a34:	20 83       	st	Z, r18
    clear_bit(TCCR1A, WGM11);
    4a36:	80 e8       	ldi	r24, 0x80	; 128
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	20 e8       	ldi	r18, 0x80	; 128
    4a3c:	30 e0       	ldi	r19, 0x00	; 0
    4a3e:	f9 01       	movw	r30, r18
    4a40:	20 81       	ld	r18, Z
    4a42:	2d 7f       	andi	r18, 0xFD	; 253
    4a44:	fc 01       	movw	r30, r24
    4a46:	20 83       	st	Z, r18
    set_bit(TCCR1B, WGM12);
    4a48:	81 e8       	ldi	r24, 0x81	; 129
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	21 e8       	ldi	r18, 0x81	; 129
    4a4e:	30 e0       	ldi	r19, 0x00	; 0
    4a50:	f9 01       	movw	r30, r18
    4a52:	20 81       	ld	r18, Z
    4a54:	28 60       	ori	r18, 0x08	; 8
    4a56:	fc 01       	movw	r30, r24
    4a58:	20 83       	st	Z, r18
    clear_bit(TCCR1B, WGM13);
    4a5a:	81 e8       	ldi	r24, 0x81	; 129
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	21 e8       	ldi	r18, 0x81	; 129
    4a60:	30 e0       	ldi	r19, 0x00	; 0
    4a62:	f9 01       	movw	r30, r18
    4a64:	20 81       	ld	r18, Z
    4a66:	2f 7e       	andi	r18, 0xEF	; 239
    4a68:	fc 01       	movw	r30, r24
    4a6a:	20 83       	st	Z, r18

    set_bit(TCCR1B, CS12);
    4a6c:	81 e8       	ldi	r24, 0x81	; 129
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	21 e8       	ldi	r18, 0x81	; 129
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	f9 01       	movw	r30, r18
    4a76:	20 81       	ld	r18, Z
    4a78:	24 60       	ori	r18, 0x04	; 4
    4a7a:	fc 01       	movw	r30, r24
    4a7c:	20 83       	st	Z, r18
    clear_bit(TCCR1B, CS11);
    4a7e:	81 e8       	ldi	r24, 0x81	; 129
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	21 e8       	ldi	r18, 0x81	; 129
    4a84:	30 e0       	ldi	r19, 0x00	; 0
    4a86:	f9 01       	movw	r30, r18
    4a88:	20 81       	ld	r18, Z
    4a8a:	2d 7f       	andi	r18, 0xFD	; 253
    4a8c:	fc 01       	movw	r30, r24
    4a8e:	20 83       	st	Z, r18
    set_bit(TCCR1B, CS10);
    4a90:	81 e8       	ldi	r24, 0x81	; 129
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	21 e8       	ldi	r18, 0x81	; 129
    4a96:	30 e0       	ldi	r19, 0x00	; 0
    4a98:	f9 01       	movw	r30, r18
    4a9a:	20 81       	ld	r18, Z
    4a9c:	21 60       	ori	r18, 0x01	; 1
    4a9e:	fc 01       	movw	r30, r24
    4aa0:	20 83       	st	Z, r18

    set_bit(TIMSK1, OCIE1A);
    4aa2:	8f e6       	ldi	r24, 0x6F	; 111
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	2f e6       	ldi	r18, 0x6F	; 111
    4aa8:	30 e0       	ldi	r19, 0x00	; 0
    4aaa:	f9 01       	movw	r30, r18
    4aac:	20 81       	ld	r18, Z
    4aae:	22 60       	ori	r18, 0x02	; 2
    4ab0:	fc 01       	movw	r30, r24
    4ab2:	20 83       	st	Z, r18

    OCR1A = CLOCKS_PER_MILISECOND;
    4ab4:	88 e8       	ldi	r24, 0x88	; 136
    4ab6:	90 e0       	ldi	r25, 0x00	; 0
    4ab8:	29 e0       	ldi	r18, 0x09	; 9
    4aba:	30 e0       	ldi	r19, 0x00	; 0
    4abc:	fc 01       	movw	r30, r24
    4abe:	31 83       	std	Z+1, r19	; 0x01
    4ac0:	20 83       	st	Z, r18
}
    4ac2:	cf 91       	pop	r28
    4ac4:	df 91       	pop	r29
    4ac6:	08 95       	ret

00004ac8 <timer_Sleep>:
 * and by 10 ms before the next event as collected by timer_job_ready. If
 * There is an event within the next IDLE_LEAD_TIME ms then no time is
 * spent idling.
 */
void timer_Sleep(void)
{
    4ac8:	df 93       	push	r29
    4aca:	cf 93       	push	r28
    4acc:	cd b7       	in	r28, 0x3d	; 61
    4ace:	de b7       	in	r29, 0x3e	; 62
    clockSleepCount = timerNextEvent * CLOCKS_PER_MILISECOND - CLOCKS_PER_MILISECOND * IDLE_LEAD_TIME;
    4ad0:	80 91 48 01 	lds	r24, 0x0148
    4ad4:	90 91 49 01 	lds	r25, 0x0149
    4ad8:	9c 01       	movw	r18, r24
    4ada:	22 0f       	add	r18, r18
    4adc:	33 1f       	adc	r19, r19
    4ade:	22 0f       	add	r18, r18
    4ae0:	33 1f       	adc	r19, r19
    4ae2:	22 0f       	add	r18, r18
    4ae4:	33 1f       	adc	r19, r19
    4ae6:	82 0f       	add	r24, r18
    4ae8:	93 1f       	adc	r25, r19
    4aea:	8d 97       	sbiw	r24, 0x2d	; 45
    4aec:	90 93 6f 03 	sts	0x036F, r25
    4af0:	80 93 6e 03 	sts	0x036E, r24
    clockSleepCount = clockSleepCount < MAX_IDLE_CLOCKS ? clockSleepCount : MAX_IDLE_CLOCKS;
    4af4:	80 91 6e 03 	lds	r24, 0x036E
    4af8:	90 91 6f 03 	lds	r25, 0x036F
    4afc:	8b 35       	cpi	r24, 0x5B	; 91
    4afe:	91 05       	cpc	r25, r1
    4b00:	14 f0       	brlt	.+4      	; 0x4b06 <timer_Sleep+0x3e>
    4b02:	8a e5       	ldi	r24, 0x5A	; 90
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	90 93 6f 03 	sts	0x036F, r25
    4b0a:	80 93 6e 03 	sts	0x036E, r24
    clockSleepCount = clockSleepCount > 0 ? clockSleepCount : 0;
    4b0e:	80 91 6e 03 	lds	r24, 0x036E
    4b12:	90 91 6f 03 	lds	r25, 0x036F
    4b16:	99 23       	and	r25, r25
    4b18:	14 f4       	brge	.+4      	; 0x4b1e <timer_Sleep+0x56>
    4b1a:	80 e0       	ldi	r24, 0x00	; 0
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	90 93 6f 03 	sts	0x036F, r25
    4b22:	80 93 6e 03 	sts	0x036E, r24
    
    cli();
    4b26:	f8 94       	cli
    
    if (clockSleepCount > 0)
    4b28:	80 91 6e 03 	lds	r24, 0x036E
    4b2c:	90 91 6f 03 	lds	r25, 0x036F
    4b30:	18 16       	cp	r1, r24
    4b32:	19 06       	cpc	r1, r25
    4b34:	44 f5       	brge	.+80     	; 0x4b86 <timer_Sleep+0xbe>
    {
        timerSleep = 1;
    4b36:	81 e0       	ldi	r24, 0x01	; 1
    4b38:	80 93 70 03 	sts	0x0370, r24
        
        set_sleep_mode(SLEEP_MODE_IDLE);
    4b3c:	83 e5       	ldi	r24, 0x53	; 83
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	23 e5       	ldi	r18, 0x53	; 83
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	f9 01       	movw	r30, r18
    4b46:	20 81       	ld	r18, Z
    4b48:	21 7f       	andi	r18, 0xF1	; 241
    4b4a:	fc 01       	movw	r30, r24
    4b4c:	20 83       	st	Z, r18
        sleep_enable();
    4b4e:	83 e5       	ldi	r24, 0x53	; 83
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	23 e5       	ldi	r18, 0x53	; 83
    4b54:	30 e0       	ldi	r19, 0x00	; 0
    4b56:	f9 01       	movw	r30, r18
    4b58:	20 81       	ld	r18, Z
    4b5a:	21 60       	ori	r18, 0x01	; 1
    4b5c:	fc 01       	movw	r30, r24
    4b5e:	20 83       	st	Z, r18
        sei();
    4b60:	78 94       	sei
        
        while (timerSleep > 0)
    4b62:	04 c0       	rjmp	.+8      	; 0x4b6c <timer_Sleep+0xa4>
        {
            timer_Wait_US(1);
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <timer_Wait_US>
            sleep_cpu();
    4b6a:	88 95       	sleep
        
        set_sleep_mode(SLEEP_MODE_IDLE);
        sleep_enable();
        sei();
        
        while (timerSleep > 0)
    4b6c:	80 91 70 03 	lds	r24, 0x0370
    4b70:	88 23       	and	r24, r24
    4b72:	c1 f7       	brne	.-16     	; 0x4b64 <timer_Sleep+0x9c>
        {
            timer_Wait_US(1);
            sleep_cpu();
        }
        
        sleep_disable();
    4b74:	83 e5       	ldi	r24, 0x53	; 83
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	23 e5       	ldi	r18, 0x53	; 83
    4b7a:	30 e0       	ldi	r19, 0x00	; 0
    4b7c:	f9 01       	movw	r30, r18
    4b7e:	20 81       	ld	r18, Z
    4b80:	2e 7f       	andi	r18, 0xFE	; 254
    4b82:	fc 01       	movw	r30, r24
    4b84:	20 83       	st	Z, r18
    }
    
    timerNextEvent = MAX_IDLE_CLOCKS / CLOCKS_PER_MILISECOND + CLOCKS_PER_MILISECOND * IDLE_LEAD_TIME;
    4b86:	87 e3       	ldi	r24, 0x37	; 55
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	90 93 49 01 	sts	0x0149, r25
    4b8e:	80 93 48 01 	sts	0x0148, r24
    
    sei();
    4b92:	78 94       	sei
}
    4b94:	cf 91       	pop	r28
    4b96:	df 91       	pop	r29
    4b98:	08 95       	ret

00004b9a <timer_Wake>:

/**
 * Signals that idle mode should end if it is enabled.
 */
void timer_Wake(void)
{
    4b9a:	df 93       	push	r29
    4b9c:	cf 93       	push	r28
    4b9e:	cd b7       	in	r28, 0x3d	; 61
    4ba0:	de b7       	in	r29, 0x3e	; 62
    timerSleep = 0;
    4ba2:	10 92 70 03 	sts	0x0370, r1
}
    4ba6:	cf 91       	pop	r28
    4ba8:	df 91       	pop	r29
    4baa:	08 95       	ret

00004bac <timer_Clock_Read_S>:

/**
 * @return Returns the number of seconds passed since the last clock reset.
 */
unsigned int timer_Clock_Read_S(void)
{
    4bac:	df 93       	push	r29
    4bae:	cf 93       	push	r28
    4bb0:	cd b7       	in	r28, 0x3d	; 61
    4bb2:	de b7       	in	r29, 0x3e	; 62
    return clockSecondsPassed;
    4bb4:	80 91 6a 03 	lds	r24, 0x036A
    4bb8:	90 91 6b 03 	lds	r25, 0x036B
}
    4bbc:	cf 91       	pop	r28
    4bbe:	df 91       	pop	r29
    4bc0:	08 95       	ret

00004bc2 <timer_Clock_Read_MS>:

/**
 * @return Returns the number of miliseconds passed since the last whole second.
 */
unsigned int timer_Clock_Read_MS(void)
{
    4bc2:	df 93       	push	r29
    4bc4:	cf 93       	push	r28
    4bc6:	cd b7       	in	r28, 0x3d	; 61
    4bc8:	de b7       	in	r29, 0x3e	; 62
    return clockMilisecondsPassed;
    4bca:	80 91 6c 03 	lds	r24, 0x036C
    4bce:	90 91 6d 03 	lds	r25, 0x036D
}
    4bd2:	cf 91       	pop	r28
    4bd4:	df 91       	pop	r29
    4bd6:	08 95       	ret

00004bd8 <timer_Clock_Reset>:

/**
 * Resets the clock.
 */
void timer_Clock_Reset(void)
{
    4bd8:	df 93       	push	r29
    4bda:	cf 93       	push	r28
    4bdc:	cd b7       	in	r28, 0x3d	; 61
    4bde:	de b7       	in	r29, 0x3e	; 62
    cli();
    4be0:	f8 94       	cli
    TCNT1 = 0;
    4be2:	84 e8       	ldi	r24, 0x84	; 132
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	fc 01       	movw	r30, r24
    4be8:	11 82       	std	Z+1, r1	; 0x01
    4bea:	10 82       	st	Z, r1
    sei();
    4bec:	78 94       	sei
    clockSecondsPassed = 0;
    4bee:	10 92 6b 03 	sts	0x036B, r1
    4bf2:	10 92 6a 03 	sts	0x036A, r1
    clockMilisecondsPassed = 0;
    4bf6:	10 92 6d 03 	sts	0x036D, r1
    4bfa:	10 92 6c 03 	sts	0x036C, r1
}
    4bfe:	cf 91       	pop	r28
    4c00:	df 91       	pop	r29
    4c02:	08 95       	ret

00004c04 <timer_Wait_MS>:
 * will still trigger.
 *
 * @param ms Number of miliseconds to wait.
 */
void timer_Wait_MS(unsigned int ms)
{
    4c04:	0f 93       	push	r16
    4c06:	1f 93       	push	r17
    4c08:	df 93       	push	r29
    4c0a:	cf 93       	push	r28
    4c0c:	00 d0       	rcall	.+0      	; 0x4c0e <timer_Wait_MS+0xa>
    4c0e:	00 d0       	rcall	.+0      	; 0x4c10 <timer_Wait_MS+0xc>
    4c10:	cd b7       	in	r28, 0x3d	; 61
    4c12:	de b7       	in	r29, 0x3e	; 62
    4c14:	9c 83       	std	Y+4, r25	; 0x04
    4c16:	8b 83       	std	Y+3, r24	; 0x03
#define FOSC               9216000L
#define LOOPS_PER_MILI     (FOSC / 4000)
#define MAX_MILIS_PER_LOOP (65355 / (FOSC / 4000))

    while (ms > 0)
    4c18:	2d c0       	rjmp	.+90     	; 0x4c74 <timer_Wait_MS+0x70>
    {
        _delay_loop_2((ms < MAX_MILIS_PER_LOOP ? ms : MAX_MILIS_PER_LOOP) * LOOPS_PER_MILI);
    4c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c1e:	8c 31       	cpi	r24, 0x1C	; 28
    4c20:	91 05       	cpc	r25, r1
    4c22:	60 f4       	brcc	.+24     	; 0x4c3c <timer_Wait_MS+0x38>
    4c24:	4b 81       	ldd	r20, Y+3	; 0x03
    4c26:	5c 81       	ldd	r21, Y+4	; 0x04
    4c28:	20 e0       	ldi	r18, 0x00	; 0
    4c2a:	39 e0       	ldi	r19, 0x09	; 9
    4c2c:	42 9f       	mul	r20, r18
    4c2e:	c0 01       	movw	r24, r0
    4c30:	43 9f       	mul	r20, r19
    4c32:	90 0d       	add	r25, r0
    4c34:	52 9f       	mul	r21, r18
    4c36:	90 0d       	add	r25, r0
    4c38:	11 24       	eor	r1, r1
    4c3a:	02 c0       	rjmp	.+4      	; 0x4c40 <timer_Wait_MS+0x3c>
    4c3c:	80 e0       	ldi	r24, 0x00	; 0
    4c3e:	9c ef       	ldi	r25, 0xFC	; 252
    4c40:	9a 83       	std	Y+2, r25	; 0x02
    4c42:	89 83       	std	Y+1, r24	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4c44:	89 81       	ldd	r24, Y+1	; 0x01
    4c46:	9a 81       	ldd	r25, Y+2	; 0x02
    4c48:	8c 01       	movw	r16, r24
    4c4a:	c8 01       	movw	r24, r16
    4c4c:	01 97       	sbiw	r24, 0x01	; 1
    4c4e:	f1 f7       	brne	.-4      	; 0x4c4c <timer_Wait_MS+0x48>
    4c50:	8c 01       	movw	r16, r24
    4c52:	1a 83       	std	Y+2, r17	; 0x02
    4c54:	09 83       	std	Y+1, r16	; 0x01
        ms -= ms < MAX_MILIS_PER_LOOP ? ms : MAX_MILIS_PER_LOOP;
    4c56:	8b 81       	ldd	r24, Y+3	; 0x03
    4c58:	9c 81       	ldd	r25, Y+4	; 0x04
    4c5a:	8d 31       	cpi	r24, 0x1D	; 29
    4c5c:	91 05       	cpc	r25, r1
    4c5e:	10 f0       	brcs	.+4      	; 0x4c64 <timer_Wait_MS+0x60>
    4c60:	8c e1       	ldi	r24, 0x1C	; 28
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	2b 81       	ldd	r18, Y+3	; 0x03
    4c66:	3c 81       	ldd	r19, Y+4	; 0x04
    4c68:	a9 01       	movw	r20, r18
    4c6a:	48 1b       	sub	r20, r24
    4c6c:	59 0b       	sbc	r21, r25
    4c6e:	ca 01       	movw	r24, r20
    4c70:	9c 83       	std	Y+4, r25	; 0x04
    4c72:	8b 83       	std	Y+3, r24	; 0x03
{
#define FOSC               9216000L
#define LOOPS_PER_MILI     (FOSC / 4000)
#define MAX_MILIS_PER_LOOP (65355 / (FOSC / 4000))

    while (ms > 0)
    4c74:	8b 81       	ldd	r24, Y+3	; 0x03
    4c76:	9c 81       	ldd	r25, Y+4	; 0x04
    4c78:	00 97       	sbiw	r24, 0x00	; 0
    4c7a:	79 f6       	brne	.-98     	; 0x4c1a <timer_Wait_MS+0x16>
    {
        _delay_loop_2((ms < MAX_MILIS_PER_LOOP ? ms : MAX_MILIS_PER_LOOP) * LOOPS_PER_MILI);
        ms -= ms < MAX_MILIS_PER_LOOP ? ms : MAX_MILIS_PER_LOOP;
    }
}
    4c7c:	0f 90       	pop	r0
    4c7e:	0f 90       	pop	r0
    4c80:	0f 90       	pop	r0
    4c82:	0f 90       	pop	r0
    4c84:	cf 91       	pop	r28
    4c86:	df 91       	pop	r29
    4c88:	1f 91       	pop	r17
    4c8a:	0f 91       	pop	r16
    4c8c:	08 95       	ret

00004c8e <timer_Wait_US>:
 * will still trigger.
 *
 * @param ms Number of microseconds to wait.
 */
void timer_Wait_US(unsigned char us)
{
    4c8e:	1f 93       	push	r17
    4c90:	df 93       	push	r29
    4c92:	cf 93       	push	r28
    4c94:	00 d0       	rcall	.+0      	; 0x4c96 <timer_Wait_US+0x8>
    4c96:	cd b7       	in	r28, 0x3d	; 61
    4c98:	de b7       	in	r29, 0x3e	; 62
    4c9a:	8a 83       	std	Y+2, r24	; 0x02
#define LOOPS_PER_MICRO     (FOSC / 3000000L)
#define MAX_MICROS_PER_LOOP (225 / (FOSC / 3000000L))

    while (us > 0)
    4c9c:	18 c0       	rjmp	.+48     	; 0x4cce <timer_Wait_US+0x40>
    {
        _delay_loop_1((us < MAX_MICROS_PER_LOOP ? us : MAX_MICROS_PER_LOOP) * LOOPS_PER_MICRO);
    4c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca0:	8b 34       	cpi	r24, 0x4B	; 75
    4ca2:	28 f4       	brcc	.+10     	; 0x4cae <timer_Wait_US+0x20>
    4ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca6:	98 2f       	mov	r25, r24
    4ca8:	99 0f       	add	r25, r25
    4caa:	89 0f       	add	r24, r25
    4cac:	01 c0       	rjmp	.+2      	; 0x4cb0 <timer_Wait_US+0x22>
    4cae:	81 ee       	ldi	r24, 0xE1	; 225
    4cb0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4cb2:	89 81       	ldd	r24, Y+1	; 0x01
    4cb4:	18 2f       	mov	r17, r24
    4cb6:	1a 95       	dec	r17
    4cb8:	f1 f7       	brne	.-4      	; 0x4cb6 <timer_Wait_US+0x28>
    4cba:	19 83       	std	Y+1, r17	; 0x01
        us -= us < MAX_MICROS_PER_LOOP ? us : MAX_MICROS_PER_LOOP;
    4cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    4cbe:	8c 34       	cpi	r24, 0x4C	; 76
    4cc0:	08 f0       	brcs	.+2      	; 0x4cc4 <timer_Wait_US+0x36>
    4cc2:	8b e4       	ldi	r24, 0x4B	; 75
    4cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc6:	29 2f       	mov	r18, r25
    4cc8:	28 1b       	sub	r18, r24
    4cca:	82 2f       	mov	r24, r18
    4ccc:	8a 83       	std	Y+2, r24	; 0x02
void timer_Wait_US(unsigned char us)
{
#define LOOPS_PER_MICRO     (FOSC / 3000000L)
#define MAX_MICROS_PER_LOOP (225 / (FOSC / 3000000L))

    while (us > 0)
    4cce:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd0:	88 23       	and	r24, r24
    4cd2:	29 f7       	brne	.-54     	; 0x4c9e <timer_Wait_US+0x10>
    {
        _delay_loop_1((us < MAX_MICROS_PER_LOOP ? us : MAX_MICROS_PER_LOOP) * LOOPS_PER_MICRO);
        us -= us < MAX_MICROS_PER_LOOP ? us : MAX_MICROS_PER_LOOP;
    }
}
    4cd4:	0f 90       	pop	r0
    4cd6:	0f 90       	pop	r0
    4cd8:	cf 91       	pop	r28
    4cda:	df 91       	pop	r29
    4cdc:	1f 91       	pop	r17
    4cde:	08 95       	ret

00004ce0 <timer_Job_Ready4>:
 * @param fullReset Should the timer be reset to 0?
 *
 * @return Returns true if the 'timer' has reached 'trigger'.
 */
bool timer_Job_Ready4(unsigned int *timer, unsigned int trigger, unsigned int *last, bool fullReset)
{
    4ce0:	df 93       	push	r29
    4ce2:	cf 93       	push	r28
    4ce4:	cd b7       	in	r28, 0x3d	; 61
    4ce6:	de b7       	in	r29, 0x3e	; 62
    4ce8:	29 97       	sbiw	r28, 0x09	; 9
    4cea:	0f b6       	in	r0, 0x3f	; 63
    4cec:	f8 94       	cli
    4cee:	de bf       	out	0x3e, r29	; 62
    4cf0:	0f be       	out	0x3f, r0	; 63
    4cf2:	cd bf       	out	0x3d, r28	; 61
    4cf4:	9c 83       	std	Y+4, r25	; 0x04
    4cf6:	8b 83       	std	Y+3, r24	; 0x03
    4cf8:	7e 83       	std	Y+6, r23	; 0x06
    4cfa:	6d 83       	std	Y+5, r22	; 0x05
    4cfc:	58 87       	std	Y+8, r21	; 0x08
    4cfe:	4f 83       	std	Y+7, r20	; 0x07
    4d00:	29 87       	std	Y+9, r18	; 0x09
    unsigned int time = clockMilisecondsPassed;
    4d02:	80 91 6c 03 	lds	r24, 0x036C
    4d06:	90 91 6d 03 	lds	r25, 0x036D
    4d0a:	9a 83       	std	Y+2, r25	; 0x02
    4d0c:	89 83       	std	Y+1, r24	; 0x01

    //Update timer
    if (time >= *last) 
    4d0e:	8f 81       	ldd	r24, Y+7	; 0x07
    4d10:	98 85       	ldd	r25, Y+8	; 0x08
    4d12:	fc 01       	movw	r30, r24
    4d14:	20 81       	ld	r18, Z
    4d16:	31 81       	ldd	r19, Z+1	; 0x01
    4d18:	89 81       	ldd	r24, Y+1	; 0x01
    4d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d1c:	82 17       	cp	r24, r18
    4d1e:	93 07       	cpc	r25, r19
    4d20:	c0 f0       	brcs	.+48     	; 0x4d52 <timer_Job_Ready4+0x72>
    {
        *timer += time - *last;
    4d22:	8b 81       	ldd	r24, Y+3	; 0x03
    4d24:	9c 81       	ldd	r25, Y+4	; 0x04
    4d26:	fc 01       	movw	r30, r24
    4d28:	20 81       	ld	r18, Z
    4d2a:	31 81       	ldd	r19, Z+1	; 0x01
    4d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    4d2e:	98 85       	ldd	r25, Y+8	; 0x08
    4d30:	fc 01       	movw	r30, r24
    4d32:	80 81       	ld	r24, Z
    4d34:	91 81       	ldd	r25, Z+1	; 0x01
    4d36:	49 81       	ldd	r20, Y+1	; 0x01
    4d38:	5a 81       	ldd	r21, Y+2	; 0x02
    4d3a:	ba 01       	movw	r22, r20
    4d3c:	68 1b       	sub	r22, r24
    4d3e:	79 0b       	sbc	r23, r25
    4d40:	cb 01       	movw	r24, r22
    4d42:	28 0f       	add	r18, r24
    4d44:	39 1f       	adc	r19, r25
    4d46:	8b 81       	ldd	r24, Y+3	; 0x03
    4d48:	9c 81       	ldd	r25, Y+4	; 0x04
    4d4a:	fc 01       	movw	r30, r24
    4d4c:	31 83       	std	Z+1, r19	; 0x01
    4d4e:	20 83       	st	Z, r18
    4d50:	1a c0       	rjmp	.+52     	; 0x4d86 <timer_Job_Ready4+0xa6>
    }
    else 
    {
        *timer += time + MILISECONDS_PER_SECOND - *last;
    4d52:	8b 81       	ldd	r24, Y+3	; 0x03
    4d54:	9c 81       	ldd	r25, Y+4	; 0x04
    4d56:	fc 01       	movw	r30, r24
    4d58:	20 81       	ld	r18, Z
    4d5a:	31 81       	ldd	r19, Z+1	; 0x01
    4d5c:	8f 81       	ldd	r24, Y+7	; 0x07
    4d5e:	98 85       	ldd	r25, Y+8	; 0x08
    4d60:	fc 01       	movw	r30, r24
    4d62:	80 81       	ld	r24, Z
    4d64:	91 81       	ldd	r25, Z+1	; 0x01
    4d66:	49 81       	ldd	r20, Y+1	; 0x01
    4d68:	5a 81       	ldd	r21, Y+2	; 0x02
    4d6a:	ba 01       	movw	r22, r20
    4d6c:	68 1b       	sub	r22, r24
    4d6e:	79 0b       	sbc	r23, r25
    4d70:	cb 01       	movw	r24, r22
    4d72:	82 0f       	add	r24, r18
    4d74:	93 1f       	adc	r25, r19
    4d76:	9c 01       	movw	r18, r24
    4d78:	28 51       	subi	r18, 0x18	; 24
    4d7a:	3c 4f       	sbci	r19, 0xFC	; 252
    4d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d80:	fc 01       	movw	r30, r24
    4d82:	31 83       	std	Z+1, r19	; 0x01
    4d84:	20 83       	st	Z, r18
    }
    *last = time;
    4d86:	8f 81       	ldd	r24, Y+7	; 0x07
    4d88:	98 85       	ldd	r25, Y+8	; 0x08
    4d8a:	29 81       	ldd	r18, Y+1	; 0x01
    4d8c:	3a 81       	ldd	r19, Y+2	; 0x02
    4d8e:	fc 01       	movw	r30, r24
    4d90:	31 83       	std	Z+1, r19	; 0x01
    4d92:	20 83       	st	Z, r18

    //Update idle timer
    if (time >= timerNextEventTime) 
    4d94:	80 91 4a 01 	lds	r24, 0x014A
    4d98:	90 91 4b 01 	lds	r25, 0x014B
    4d9c:	29 81       	ldd	r18, Y+1	; 0x01
    4d9e:	3a 81       	ldd	r19, Y+2	; 0x02
    4da0:	28 17       	cp	r18, r24
    4da2:	39 07       	cpc	r19, r25
    4da4:	f8 f0       	brcs	.+62     	; 0x4de4 <timer_Job_Ready4+0x104>
    {
        timerNextEvent -= min(time - timerNextEvent, timerNextEvent);
    4da6:	40 91 48 01 	lds	r20, 0x0148
    4daa:	50 91 49 01 	lds	r21, 0x0149
    4dae:	80 91 48 01 	lds	r24, 0x0148
    4db2:	90 91 49 01 	lds	r25, 0x0149
    4db6:	29 81       	ldd	r18, Y+1	; 0x01
    4db8:	3a 81       	ldd	r19, Y+2	; 0x02
    4dba:	b9 01       	movw	r22, r18
    4dbc:	68 1b       	sub	r22, r24
    4dbe:	79 0b       	sbc	r23, r25
    4dc0:	cb 01       	movw	r24, r22
    4dc2:	20 91 48 01 	lds	r18, 0x0148
    4dc6:	30 91 49 01 	lds	r19, 0x0149
    4dca:	28 17       	cp	r18, r24
    4dcc:	39 07       	cpc	r19, r25
    4dce:	08 f4       	brcc	.+2      	; 0x4dd2 <timer_Job_Ready4+0xf2>
    4dd0:	c9 01       	movw	r24, r18
    4dd2:	fa 01       	movw	r30, r20
    4dd4:	e8 1b       	sub	r30, r24
    4dd6:	f9 0b       	sbc	r31, r25
    4dd8:	cf 01       	movw	r24, r30
    4dda:	90 93 49 01 	sts	0x0149, r25
    4dde:	80 93 48 01 	sts	0x0148, r24
    4de2:	20 c0       	rjmp	.+64     	; 0x4e24 <timer_Job_Ready4+0x144>
    }
    else 
    {
        timerNextEvent -= min(time + MILISECONDS_PER_SECOND - timerNextEventTime, timerNextEvent);
    4de4:	40 91 48 01 	lds	r20, 0x0148
    4de8:	50 91 49 01 	lds	r21, 0x0149
    4dec:	80 91 4a 01 	lds	r24, 0x014A
    4df0:	90 91 4b 01 	lds	r25, 0x014B
    4df4:	29 81       	ldd	r18, Y+1	; 0x01
    4df6:	3a 81       	ldd	r19, Y+2	; 0x02
    4df8:	b9 01       	movw	r22, r18
    4dfa:	68 1b       	sub	r22, r24
    4dfc:	79 0b       	sbc	r23, r25
    4dfe:	cb 01       	movw	r24, r22
    4e00:	88 51       	subi	r24, 0x18	; 24
    4e02:	9c 4f       	sbci	r25, 0xFC	; 252
    4e04:	20 91 48 01 	lds	r18, 0x0148
    4e08:	30 91 49 01 	lds	r19, 0x0149
    4e0c:	28 17       	cp	r18, r24
    4e0e:	39 07       	cpc	r19, r25
    4e10:	08 f4       	brcc	.+2      	; 0x4e14 <timer_Job_Ready4+0x134>
    4e12:	c9 01       	movw	r24, r18
    4e14:	fa 01       	movw	r30, r20
    4e16:	e8 1b       	sub	r30, r24
    4e18:	f9 0b       	sbc	r31, r25
    4e1a:	cf 01       	movw	r24, r30
    4e1c:	90 93 49 01 	sts	0x0149, r25
    4e20:	80 93 48 01 	sts	0x0148, r24
    }
    timerNextEventTime = time;
    4e24:	89 81       	ldd	r24, Y+1	; 0x01
    4e26:	9a 81       	ldd	r25, Y+2	; 0x02
    4e28:	90 93 4b 01 	sts	0x014B, r25
    4e2c:	80 93 4a 01 	sts	0x014A, r24
    
    //Trigger?
    if (*timer >= trigger)
    4e30:	8b 81       	ldd	r24, Y+3	; 0x03
    4e32:	9c 81       	ldd	r25, Y+4	; 0x04
    4e34:	fc 01       	movw	r30, r24
    4e36:	20 81       	ld	r18, Z
    4e38:	31 81       	ldd	r19, Z+1	; 0x01
    4e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e3e:	28 17       	cp	r18, r24
    4e40:	39 07       	cpc	r19, r25
    4e42:	78 f1       	brcs	.+94     	; 0x4ea2 <timer_Job_Ready4+0x1c2>
    {
        *timer = fullReset ? 0 : *timer - trigger;
    4e44:	89 85       	ldd	r24, Y+9	; 0x09
    4e46:	88 23       	and	r24, r24
    4e48:	19 f0       	breq	.+6      	; 0x4e50 <timer_Job_Ready4+0x170>
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	0b c0       	rjmp	.+22     	; 0x4e66 <timer_Job_Ready4+0x186>
    4e50:	8b 81       	ldd	r24, Y+3	; 0x03
    4e52:	9c 81       	ldd	r25, Y+4	; 0x04
    4e54:	fc 01       	movw	r30, r24
    4e56:	20 81       	ld	r18, Z
    4e58:	31 81       	ldd	r19, Z+1	; 0x01
    4e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e5e:	a9 01       	movw	r20, r18
    4e60:	48 1b       	sub	r20, r24
    4e62:	59 0b       	sbc	r21, r25
    4e64:	ca 01       	movw	r24, r20
    4e66:	2b 81       	ldd	r18, Y+3	; 0x03
    4e68:	3c 81       	ldd	r19, Y+4	; 0x04
    4e6a:	f9 01       	movw	r30, r18
    4e6c:	91 83       	std	Z+1, r25	; 0x01
    4e6e:	80 83       	st	Z, r24
        
        timerNextEvent = min(timerNextEvent, trigger - *timer);
    4e70:	8b 81       	ldd	r24, Y+3	; 0x03
    4e72:	9c 81       	ldd	r25, Y+4	; 0x04
    4e74:	fc 01       	movw	r30, r24
    4e76:	80 81       	ld	r24, Z
    4e78:	91 81       	ldd	r25, Z+1	; 0x01
    4e7a:	2d 81       	ldd	r18, Y+5	; 0x05
    4e7c:	3e 81       	ldd	r19, Y+6	; 0x06
    4e7e:	a9 01       	movw	r20, r18
    4e80:	48 1b       	sub	r20, r24
    4e82:	59 0b       	sbc	r21, r25
    4e84:	ca 01       	movw	r24, r20
    4e86:	20 91 48 01 	lds	r18, 0x0148
    4e8a:	30 91 49 01 	lds	r19, 0x0149
    4e8e:	28 17       	cp	r18, r24
    4e90:	39 07       	cpc	r19, r25
    4e92:	08 f4       	brcc	.+2      	; 0x4e96 <timer_Job_Ready4+0x1b6>
    4e94:	c9 01       	movw	r24, r18
    4e96:	90 93 49 01 	sts	0x0149, r25
    4e9a:	80 93 48 01 	sts	0x0148, r24
        
        return true;
    4e9e:	81 e0       	ldi	r24, 0x01	; 1
    4ea0:	18 c0       	rjmp	.+48     	; 0x4ed2 <timer_Job_Ready4+0x1f2>
    }
    
    timerNextEvent = min(timerNextEvent, trigger - *timer);
    4ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ea6:	fc 01       	movw	r30, r24
    4ea8:	80 81       	ld	r24, Z
    4eaa:	91 81       	ldd	r25, Z+1	; 0x01
    4eac:	2d 81       	ldd	r18, Y+5	; 0x05
    4eae:	3e 81       	ldd	r19, Y+6	; 0x06
    4eb0:	a9 01       	movw	r20, r18
    4eb2:	48 1b       	sub	r20, r24
    4eb4:	59 0b       	sbc	r21, r25
    4eb6:	ca 01       	movw	r24, r20
    4eb8:	20 91 48 01 	lds	r18, 0x0148
    4ebc:	30 91 49 01 	lds	r19, 0x0149
    4ec0:	28 17       	cp	r18, r24
    4ec2:	39 07       	cpc	r19, r25
    4ec4:	08 f4       	brcc	.+2      	; 0x4ec8 <timer_Job_Ready4+0x1e8>
    4ec6:	c9 01       	movw	r24, r18
    4ec8:	90 93 49 01 	sts	0x0149, r25
    4ecc:	80 93 48 01 	sts	0x0148, r24

    return false;
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
}
    4ed2:	29 96       	adiw	r28, 0x09	; 9
    4ed4:	0f b6       	in	r0, 0x3f	; 63
    4ed6:	f8 94       	cli
    4ed8:	de bf       	out	0x3e, r29	; 62
    4eda:	0f be       	out	0x3f, r0	; 63
    4edc:	cd bf       	out	0x3d, r28	; 61
    4ede:	cf 91       	pop	r28
    4ee0:	df 91       	pop	r29
    4ee2:	08 95       	ret

00004ee4 <twi_Init>:
 * Initializes the TWI bus.
 *
 * @return Returns OK.
 */
status twi_Init(void)
{
    4ee4:	df 93       	push	r29
    4ee6:	cf 93       	push	r28
    4ee8:	cd b7       	in	r28, 0x3d	; 61
    4eea:	de b7       	in	r29, 0x3e	; 62
    TWSR = TW_PRESCALE;
    4eec:	89 eb       	ldi	r24, 0xB9	; 185
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	fc 01       	movw	r30, r24
    4ef2:	10 82       	st	Z, r1

    TWBR = TW_BITRATE;
    4ef4:	88 eb       	ldi	r24, 0xB8	; 184
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	20 e2       	ldi	r18, 0x20	; 32
    4efa:	fc 01       	movw	r30, r24
    4efc:	20 83       	st	Z, r18

    clear_bit(DDRC, 1);
    4efe:	87 e2       	ldi	r24, 0x27	; 39
    4f00:	90 e0       	ldi	r25, 0x00	; 0
    4f02:	27 e2       	ldi	r18, 0x27	; 39
    4f04:	30 e0       	ldi	r19, 0x00	; 0
    4f06:	f9 01       	movw	r30, r18
    4f08:	20 81       	ld	r18, Z
    4f0a:	2d 7f       	andi	r18, 0xFD	; 253
    4f0c:	fc 01       	movw	r30, r24
    4f0e:	20 83       	st	Z, r18
    clear_bit(PORTC, 1);
    4f10:	88 e2       	ldi	r24, 0x28	; 40
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	28 e2       	ldi	r18, 0x28	; 40
    4f16:	30 e0       	ldi	r19, 0x00	; 0
    4f18:	f9 01       	movw	r30, r18
    4f1a:	20 81       	ld	r18, Z
    4f1c:	2d 7f       	andi	r18, 0xFD	; 253
    4f1e:	fc 01       	movw	r30, r24
    4f20:	20 83       	st	Z, r18
    clear_bit(DDRC, 0);
    4f22:	87 e2       	ldi	r24, 0x27	; 39
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	27 e2       	ldi	r18, 0x27	; 39
    4f28:	30 e0       	ldi	r19, 0x00	; 0
    4f2a:	f9 01       	movw	r30, r18
    4f2c:	20 81       	ld	r18, Z
    4f2e:	2e 7f       	andi	r18, 0xFE	; 254
    4f30:	fc 01       	movw	r30, r24
    4f32:	20 83       	st	Z, r18
    clear_bit(PORTC, 0);
    4f34:	88 e2       	ldi	r24, 0x28	; 40
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	28 e2       	ldi	r18, 0x28	; 40
    4f3a:	30 e0       	ldi	r19, 0x00	; 0
    4f3c:	f9 01       	movw	r30, r18
    4f3e:	20 81       	ld	r18, Z
    4f40:	2e 7f       	andi	r18, 0xFE	; 254
    4f42:	fc 01       	movw	r30, r24
    4f44:	20 83       	st	Z, r18

    //DDRC &= ~((1 << 0) | (1 << 1));
    //PORTC &= ~((1 << 0) | (1 << 1));

    return OK;
    4f46:	81 e0       	ldi	r24, 0x01	; 1
}
    4f48:	cf 91       	pop	r28
    4f4a:	df 91       	pop	r29
    4f4c:	08 95       	ret

00004f4e <twi_Write>:
 * @param slave TWI address of slave device.
 * @param data Address of data to write.
 * @param size Number of bytes to write.
 */
void twi_Write(char slave, char* data, int size)
{
    4f4e:	df 93       	push	r29
    4f50:	cf 93       	push	r28
    4f52:	cd b7       	in	r28, 0x3d	; 61
    4f54:	de b7       	in	r29, 0x3e	; 62
    4f56:	27 97       	sbiw	r28, 0x07	; 7
    4f58:	0f b6       	in	r0, 0x3f	; 63
    4f5a:	f8 94       	cli
    4f5c:	de bf       	out	0x3e, r29	; 62
    4f5e:	0f be       	out	0x3f, r0	; 63
    4f60:	cd bf       	out	0x3d, r28	; 61
    4f62:	8b 83       	std	Y+3, r24	; 0x03
    4f64:	7d 83       	std	Y+5, r23	; 0x05
    4f66:	6c 83       	std	Y+4, r22	; 0x04
    4f68:	5f 83       	std	Y+7, r21	; 0x07
    4f6a:	4e 83       	std	Y+6, r20	; 0x06
    twi_Start();
    4f6c:	8c eb       	ldi	r24, 0xBC	; 188
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	24 ea       	ldi	r18, 0xA4	; 164
    4f72:	fc 01       	movw	r30, r24
    4f74:	20 83       	st	Z, r18
    twi_Wait();
    4f76:	8c eb       	ldi	r24, 0xBC	; 188
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	fc 01       	movw	r30, r24
    4f7c:	80 81       	ld	r24, Z
    4f7e:	88 23       	and	r24, r24
    4f80:	d4 f7       	brge	.-12     	; 0x4f76 <twi_Write+0x28>

    twi_WriteByte(slave | TW_WRITE);
    4f82:	8b eb       	ldi	r24, 0xBB	; 187
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	2b 81       	ldd	r18, Y+3	; 0x03
    4f88:	fc 01       	movw	r30, r24
    4f8a:	20 83       	st	Z, r18
    twi_Nack();
    4f8c:	8c eb       	ldi	r24, 0xBC	; 188
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	24 e8       	ldi	r18, 0x84	; 132
    4f92:	fc 01       	movw	r30, r24
    4f94:	20 83       	st	Z, r18
    twi_Wait();
    4f96:	8c eb       	ldi	r24, 0xBC	; 188
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	fc 01       	movw	r30, r24
    4f9c:	80 81       	ld	r24, Z
    4f9e:	88 23       	and	r24, r24
    4fa0:	d4 f7       	brge	.-12     	; 0x4f96 <twi_Write+0x48>

    int i = 0;
    4fa2:	1a 82       	std	Y+2, r1	; 0x02
    4fa4:	19 82       	std	Y+1, r1	; 0x01

    for (i = 0; i < size; i++)
    4fa6:	1a 82       	std	Y+2, r1	; 0x02
    4fa8:	19 82       	std	Y+1, r1	; 0x01
    4faa:	1c c0       	rjmp	.+56     	; 0x4fe4 <twi_Write+0x96>
    {
        twi_WriteByte(data[i]);
    4fac:	8b eb       	ldi	r24, 0xBB	; 187
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	29 81       	ldd	r18, Y+1	; 0x01
    4fb2:	3a 81       	ldd	r19, Y+2	; 0x02
    4fb4:	4c 81       	ldd	r20, Y+4	; 0x04
    4fb6:	5d 81       	ldd	r21, Y+5	; 0x05
    4fb8:	24 0f       	add	r18, r20
    4fba:	35 1f       	adc	r19, r21
    4fbc:	f9 01       	movw	r30, r18
    4fbe:	20 81       	ld	r18, Z
    4fc0:	fc 01       	movw	r30, r24
    4fc2:	20 83       	st	Z, r18
        twi_Nack();
    4fc4:	8c eb       	ldi	r24, 0xBC	; 188
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	24 e8       	ldi	r18, 0x84	; 132
    4fca:	fc 01       	movw	r30, r24
    4fcc:	20 83       	st	Z, r18
        twi_Wait();
    4fce:	8c eb       	ldi	r24, 0xBC	; 188
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	fc 01       	movw	r30, r24
    4fd4:	80 81       	ld	r24, Z
    4fd6:	88 23       	and	r24, r24
    4fd8:	d4 f7       	brge	.-12     	; 0x4fce <twi_Write+0x80>
    twi_Nack();
    twi_Wait();

    int i = 0;

    for (i = 0; i < size; i++)
    4fda:	89 81       	ldd	r24, Y+1	; 0x01
    4fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    4fde:	01 96       	adiw	r24, 0x01	; 1
    4fe0:	9a 83       	std	Y+2, r25	; 0x02
    4fe2:	89 83       	std	Y+1, r24	; 0x01
    4fe4:	29 81       	ldd	r18, Y+1	; 0x01
    4fe6:	3a 81       	ldd	r19, Y+2	; 0x02
    4fe8:	8e 81       	ldd	r24, Y+6	; 0x06
    4fea:	9f 81       	ldd	r25, Y+7	; 0x07
    4fec:	28 17       	cp	r18, r24
    4fee:	39 07       	cpc	r19, r25
    4ff0:	ec f2       	brlt	.-70     	; 0x4fac <twi_Write+0x5e>
        twi_WriteByte(data[i]);
        twi_Nack();
        twi_Wait();
    }

    twi_Stop();
    4ff2:	8c eb       	ldi	r24, 0xBC	; 188
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	24 e9       	ldi	r18, 0x94	; 148
    4ff8:	fc 01       	movw	r30, r24
    4ffa:	20 83       	st	Z, r18
}
    4ffc:	27 96       	adiw	r28, 0x07	; 7
    4ffe:	0f b6       	in	r0, 0x3f	; 63
    5000:	f8 94       	cli
    5002:	de bf       	out	0x3e, r29	; 62
    5004:	0f be       	out	0x3f, r0	; 63
    5006:	cd bf       	out	0x3d, r28	; 61
    5008:	cf 91       	pop	r28
    500a:	df 91       	pop	r29
    500c:	08 95       	ret

0000500e <twi_Read>:
 * @param slave TWI address of slave device.
 * @param data The address to write data to.
 * @param size Number of bytes to read.
 */
void twi_Read(char slave, char* data, int size)
{
    500e:	df 93       	push	r29
    5010:	cf 93       	push	r28
    5012:	cd b7       	in	r28, 0x3d	; 61
    5014:	de b7       	in	r29, 0x3e	; 62
    5016:	27 97       	sbiw	r28, 0x07	; 7
    5018:	0f b6       	in	r0, 0x3f	; 63
    501a:	f8 94       	cli
    501c:	de bf       	out	0x3e, r29	; 62
    501e:	0f be       	out	0x3f, r0	; 63
    5020:	cd bf       	out	0x3d, r28	; 61
    5022:	8b 83       	std	Y+3, r24	; 0x03
    5024:	7d 83       	std	Y+5, r23	; 0x05
    5026:	6c 83       	std	Y+4, r22	; 0x04
    5028:	5f 83       	std	Y+7, r21	; 0x07
    502a:	4e 83       	std	Y+6, r20	; 0x06
    twi_Start();
    502c:	8c eb       	ldi	r24, 0xBC	; 188
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	24 ea       	ldi	r18, 0xA4	; 164
    5032:	fc 01       	movw	r30, r24
    5034:	20 83       	st	Z, r18
    twi_Wait();
    5036:	8c eb       	ldi	r24, 0xBC	; 188
    5038:	90 e0       	ldi	r25, 0x00	; 0
    503a:	fc 01       	movw	r30, r24
    503c:	80 81       	ld	r24, Z
    503e:	88 23       	and	r24, r24
    5040:	d4 f7       	brge	.-12     	; 0x5036 <twi_Read+0x28>

    twi_WriteByte(slave | TW_READ);
    5042:	8b eb       	ldi	r24, 0xBB	; 187
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	2b 81       	ldd	r18, Y+3	; 0x03
    5048:	21 60       	ori	r18, 0x01	; 1
    504a:	fc 01       	movw	r30, r24
    504c:	20 83       	st	Z, r18
    twi_Nack();
    504e:	8c eb       	ldi	r24, 0xBC	; 188
    5050:	90 e0       	ldi	r25, 0x00	; 0
    5052:	24 e8       	ldi	r18, 0x84	; 132
    5054:	fc 01       	movw	r30, r24
    5056:	20 83       	st	Z, r18
    twi_Wait();
    5058:	8c eb       	ldi	r24, 0xBC	; 188
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	fc 01       	movw	r30, r24
    505e:	80 81       	ld	r24, Z
    5060:	88 23       	and	r24, r24
    5062:	d4 f7       	brge	.-12     	; 0x5058 <twi_Read+0x4a>

    int i = 0;
    5064:	1a 82       	std	Y+2, r1	; 0x02
    5066:	19 82       	std	Y+1, r1	; 0x01

    for (i = 0; i < size - 1; i++)
    5068:	1a 82       	std	Y+2, r1	; 0x02
    506a:	19 82       	std	Y+1, r1	; 0x01
    506c:	1c c0       	rjmp	.+56     	; 0x50a6 <twi_Read+0x98>
    {
        twi_Ack();
    506e:	8c eb       	ldi	r24, 0xBC	; 188
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	24 ec       	ldi	r18, 0xC4	; 196
    5074:	fc 01       	movw	r30, r24
    5076:	20 83       	st	Z, r18
        twi_Wait();
    5078:	8c eb       	ldi	r24, 0xBC	; 188
    507a:	90 e0       	ldi	r25, 0x00	; 0
    507c:	fc 01       	movw	r30, r24
    507e:	80 81       	ld	r24, Z
    5080:	88 23       	and	r24, r24
    5082:	d4 f7       	brge	.-12     	; 0x5078 <twi_Read+0x6a>
        twi_ReadByte(data[i]);
    5084:	89 81       	ldd	r24, Y+1	; 0x01
    5086:	9a 81       	ldd	r25, Y+2	; 0x02
    5088:	2c 81       	ldd	r18, Y+4	; 0x04
    508a:	3d 81       	ldd	r19, Y+5	; 0x05
    508c:	82 0f       	add	r24, r18
    508e:	93 1f       	adc	r25, r19
    5090:	2b eb       	ldi	r18, 0xBB	; 187
    5092:	30 e0       	ldi	r19, 0x00	; 0
    5094:	f9 01       	movw	r30, r18
    5096:	20 81       	ld	r18, Z
    5098:	fc 01       	movw	r30, r24
    509a:	20 83       	st	Z, r18
    twi_Nack();
    twi_Wait();

    int i = 0;

    for (i = 0; i < size - 1; i++)
    509c:	89 81       	ldd	r24, Y+1	; 0x01
    509e:	9a 81       	ldd	r25, Y+2	; 0x02
    50a0:	01 96       	adiw	r24, 0x01	; 1
    50a2:	9a 83       	std	Y+2, r25	; 0x02
    50a4:	89 83       	std	Y+1, r24	; 0x01
    50a6:	8e 81       	ldd	r24, Y+6	; 0x06
    50a8:	9f 81       	ldd	r25, Y+7	; 0x07
    50aa:	9c 01       	movw	r18, r24
    50ac:	21 50       	subi	r18, 0x01	; 1
    50ae:	30 40       	sbci	r19, 0x00	; 0
    50b0:	89 81       	ldd	r24, Y+1	; 0x01
    50b2:	9a 81       	ldd	r25, Y+2	; 0x02
    50b4:	82 17       	cp	r24, r18
    50b6:	93 07       	cpc	r25, r19
    50b8:	d4 f2       	brlt	.-76     	; 0x506e <twi_Read+0x60>
        twi_Ack();
        twi_Wait();
        twi_ReadByte(data[i]);
    }

    twi_Nack();
    50ba:	8c eb       	ldi	r24, 0xBC	; 188
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	24 e8       	ldi	r18, 0x84	; 132
    50c0:	fc 01       	movw	r30, r24
    50c2:	20 83       	st	Z, r18
    twi_Wait();
    50c4:	8c eb       	ldi	r24, 0xBC	; 188
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	fc 01       	movw	r30, r24
    50ca:	80 81       	ld	r24, Z
    50cc:	88 23       	and	r24, r24
    50ce:	d4 f7       	brge	.-12     	; 0x50c4 <twi_Read+0xb6>
    twi_ReadByte(data[i]);
    50d0:	89 81       	ldd	r24, Y+1	; 0x01
    50d2:	9a 81       	ldd	r25, Y+2	; 0x02
    50d4:	2c 81       	ldd	r18, Y+4	; 0x04
    50d6:	3d 81       	ldd	r19, Y+5	; 0x05
    50d8:	82 0f       	add	r24, r18
    50da:	93 1f       	adc	r25, r19
    50dc:	2b eb       	ldi	r18, 0xBB	; 187
    50de:	30 e0       	ldi	r19, 0x00	; 0
    50e0:	f9 01       	movw	r30, r18
    50e2:	20 81       	ld	r18, Z
    50e4:	fc 01       	movw	r30, r24
    50e6:	20 83       	st	Z, r18

    twi_Stop();
    50e8:	8c eb       	ldi	r24, 0xBC	; 188
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	24 e9       	ldi	r18, 0x94	; 148
    50ee:	fc 01       	movw	r30, r24
    50f0:	20 83       	st	Z, r18
}
    50f2:	27 96       	adiw	r28, 0x07	; 7
    50f4:	0f b6       	in	r0, 0x3f	; 63
    50f6:	f8 94       	cli
    50f8:	de bf       	out	0x3e, r29	; 62
    50fa:	0f be       	out	0x3f, r0	; 63
    50fc:	cd bf       	out	0x3d, r28	; 61
    50fe:	cf 91       	pop	r28
    5100:	df 91       	pop	r29
    5102:	08 95       	ret

00005104 <usart_Init>:
 *
 * @param port Descriptor of the port to initialize.
 * @param baud The baud rate.
 */
void usart_Init(usartPort port, unsigned long baud)
{
    5104:	df 93       	push	r29
    5106:	cf 93       	push	r28
    5108:	00 d0       	rcall	.+0      	; 0x510a <usart_Init+0x6>
    510a:	00 d0       	rcall	.+0      	; 0x510c <usart_Init+0x8>
    510c:	0f 92       	push	r0
    510e:	cd b7       	in	r28, 0x3d	; 61
    5110:	de b7       	in	r29, 0x3e	; 62
    5112:	89 83       	std	Y+1, r24	; 0x01
    5114:	4a 83       	std	Y+2, r20	; 0x02
    5116:	5b 83       	std	Y+3, r21	; 0x03
    5118:	6c 83       	std	Y+4, r22	; 0x04
    511a:	7d 83       	std	Y+5, r23	; 0x05
    if (port == SERIAL)
    511c:	89 81       	ldd	r24, Y+1	; 0x01
    511e:	81 30       	cpi	r24, 0x01	; 1
    5120:	b9 f4       	brne	.+46     	; 0x5150 <usart_Init+0x4c>
    {
        /* Set baud rate registers */
        UBRR0H = (unsigned char)(baud>>8);
    5122:	25 ec       	ldi	r18, 0xC5	; 197
    5124:	30 e0       	ldi	r19, 0x00	; 0
    5126:	8a 81       	ldd	r24, Y+2	; 0x02
    5128:	9b 81       	ldd	r25, Y+3	; 0x03
    512a:	ac 81       	ldd	r26, Y+4	; 0x04
    512c:	bd 81       	ldd	r27, Y+5	; 0x05
    512e:	89 2f       	mov	r24, r25
    5130:	9a 2f       	mov	r25, r26
    5132:	ab 2f       	mov	r26, r27
    5134:	bb 27       	eor	r27, r27
    5136:	f9 01       	movw	r30, r18
    5138:	80 83       	st	Z, r24
        UBRR0L = (unsigned char)baud;
    513a:	84 ec       	ldi	r24, 0xC4	; 196
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	2a 81       	ldd	r18, Y+2	; 0x02
    5140:	fc 01       	movw	r30, r24
    5142:	20 83       	st	Z, r18

        /* Set character size to 8-bit */
        UCSR0C = (3<<UCSZ00);
    5144:	82 ec       	ldi	r24, 0xC2	; 194
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	26 e0       	ldi	r18, 0x06	; 6
    514a:	fc 01       	movw	r30, r24
    514c:	20 83       	st	Z, r18
    514e:	16 c0       	rjmp	.+44     	; 0x517c <usart_Init+0x78>
    }
    else //if (port == GPS)
    {
        /* Set baud rate registers */
        UBRR1H = (unsigned char)(baud>>8);
    5150:	2d ec       	ldi	r18, 0xCD	; 205
    5152:	30 e0       	ldi	r19, 0x00	; 0
    5154:	8a 81       	ldd	r24, Y+2	; 0x02
    5156:	9b 81       	ldd	r25, Y+3	; 0x03
    5158:	ac 81       	ldd	r26, Y+4	; 0x04
    515a:	bd 81       	ldd	r27, Y+5	; 0x05
    515c:	89 2f       	mov	r24, r25
    515e:	9a 2f       	mov	r25, r26
    5160:	ab 2f       	mov	r26, r27
    5162:	bb 27       	eor	r27, r27
    5164:	f9 01       	movw	r30, r18
    5166:	80 83       	st	Z, r24
        UBRR1L = (unsigned char)baud;
    5168:	8c ec       	ldi	r24, 0xCC	; 204
    516a:	90 e0       	ldi	r25, 0x00	; 0
    516c:	2a 81       	ldd	r18, Y+2	; 0x02
    516e:	fc 01       	movw	r30, r24
    5170:	20 83       	st	Z, r18

        /* Set character size to 8-bit */
        UCSR1C = (3<<UCSZ10);
    5172:	8a ec       	ldi	r24, 0xCA	; 202
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	26 e0       	ldi	r18, 0x06	; 6
    5178:	fc 01       	movw	r30, r24
    517a:	20 83       	st	Z, r18
    }

    usart_RX(port, ENABLE);
    517c:	89 81       	ldd	r24, Y+1	; 0x01
    517e:	61 e0       	ldi	r22, 0x01	; 1
    5180:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <usart_RX>
    usart_TX(port, ENABLE);
    5184:	89 81       	ldd	r24, Y+1	; 0x01
    5186:	61 e0       	ldi	r22, 0x01	; 1
    5188:	0e 94 a6 2c 	call	0x594c	; 0x594c <usart_TX>
}
    518c:	0f 90       	pop	r0
    518e:	0f 90       	pop	r0
    5190:	0f 90       	pop	r0
    5192:	0f 90       	pop	r0
    5194:	0f 90       	pop	r0
    5196:	cf 91       	pop	r28
    5198:	df 91       	pop	r29
    519a:	08 95       	ret

0000519c <usart_Read>:
 * @param port Port to read.
 *
 * @return Returns the read byte.
 */
unsigned char usart_Read(usartPort port)
{
    519c:	df 93       	push	r29
    519e:	cf 93       	push	r28
    51a0:	0f 92       	push	r0
    51a2:	cd b7       	in	r28, 0x3d	; 61
    51a4:	de b7       	in	r29, 0x3e	; 62
    51a6:	89 83       	std	Y+1, r24	; 0x01
    if (port == SERIAL)
    51a8:	89 81       	ldd	r24, Y+1	; 0x01
    51aa:	81 30       	cpi	r24, 0x01	; 1
    51ac:	61 f4       	brne	.+24     	; 0x51c6 <usart_Read+0x2a>
    {
        while ( !(UCSR0A & (1<<RXC0)) );
    51ae:	00 00       	nop
    51b0:	80 ec       	ldi	r24, 0xC0	; 192
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	fc 01       	movw	r30, r24
    51b6:	80 81       	ld	r24, Z
    51b8:	88 23       	and	r24, r24
    51ba:	d4 f7       	brge	.-12     	; 0x51b0 <usart_Read+0x14>
        return UDR0;
    51bc:	86 ec       	ldi	r24, 0xC6	; 198
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	fc 01       	movw	r30, r24
    51c2:	80 81       	ld	r24, Z
    51c4:	0b c0       	rjmp	.+22     	; 0x51dc <usart_Read+0x40>
    }
    else //if (port == GPS)
    {
        while ( !(UCSR1A & (1<<RXC1)) );
    51c6:	00 00       	nop
    51c8:	88 ec       	ldi	r24, 0xC8	; 200
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	fc 01       	movw	r30, r24
    51ce:	80 81       	ld	r24, Z
    51d0:	88 23       	and	r24, r24
    51d2:	d4 f7       	brge	.-12     	; 0x51c8 <usart_Read+0x2c>
        return UDR1;
    51d4:	8e ec       	ldi	r24, 0xCE	; 206
    51d6:	90 e0       	ldi	r25, 0x00	; 0
    51d8:	fc 01       	movw	r30, r24
    51da:	80 81       	ld	r24, Z
    }
}
    51dc:	0f 90       	pop	r0
    51de:	cf 91       	pop	r28
    51e0:	df 91       	pop	r29
    51e2:	08 95       	ret

000051e4 <usart_Write>:
 *
 * @param port Port to write to.
 * @param data Data to write.
 */
void usart_Write(usartPort port, unsigned char data)
{
    51e4:	df 93       	push	r29
    51e6:	cf 93       	push	r28
    51e8:	00 d0       	rcall	.+0      	; 0x51ea <usart_Write+0x6>
    51ea:	cd b7       	in	r28, 0x3d	; 61
    51ec:	de b7       	in	r29, 0x3e	; 62
    51ee:	89 83       	std	Y+1, r24	; 0x01
    51f0:	6a 83       	std	Y+2, r22	; 0x02
    if (port == SERIAL)
    51f2:	89 81       	ldd	r24, Y+1	; 0x01
    51f4:	81 30       	cpi	r24, 0x01	; 1
    51f6:	d9 f4       	brne	.+54     	; 0x522e <usart_Write+0x4a>
    {
        while (!(test_bit(UCSR0A, UDRE0)));
    51f8:	00 00       	nop
    51fa:	80 ec       	ldi	r24, 0xC0	; 192
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	fc 01       	movw	r30, r24
    5200:	80 81       	ld	r24, Z
    5202:	88 2f       	mov	r24, r24
    5204:	90 e0       	ldi	r25, 0x00	; 0
    5206:	80 72       	andi	r24, 0x20	; 32
    5208:	90 70       	andi	r25, 0x00	; 0
    520a:	95 95       	asr	r25
    520c:	87 95       	ror	r24
    520e:	95 95       	asr	r25
    5210:	87 95       	ror	r24
    5212:	95 95       	asr	r25
    5214:	87 95       	ror	r24
    5216:	95 95       	asr	r25
    5218:	87 95       	ror	r24
    521a:	95 95       	asr	r25
    521c:	87 95       	ror	r24
    521e:	00 97       	sbiw	r24, 0x00	; 0
    5220:	61 f3       	breq	.-40     	; 0x51fa <usart_Write+0x16>
        UDR0 = data;
    5222:	86 ec       	ldi	r24, 0xC6	; 198
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	2a 81       	ldd	r18, Y+2	; 0x02
    5228:	fc 01       	movw	r30, r24
    522a:	20 83       	st	Z, r18
    522c:	1a c0       	rjmp	.+52     	; 0x5262 <usart_Write+0x7e>
    }
    else //if (port == GPS)
    {
        while (!(test_bit(UCSR1A, UDRE1)));
    522e:	00 00       	nop
    5230:	88 ec       	ldi	r24, 0xC8	; 200
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	fc 01       	movw	r30, r24
    5236:	80 81       	ld	r24, Z
    5238:	88 2f       	mov	r24, r24
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	80 72       	andi	r24, 0x20	; 32
    523e:	90 70       	andi	r25, 0x00	; 0
    5240:	95 95       	asr	r25
    5242:	87 95       	ror	r24
    5244:	95 95       	asr	r25
    5246:	87 95       	ror	r24
    5248:	95 95       	asr	r25
    524a:	87 95       	ror	r24
    524c:	95 95       	asr	r25
    524e:	87 95       	ror	r24
    5250:	95 95       	asr	r25
    5252:	87 95       	ror	r24
    5254:	00 97       	sbiw	r24, 0x00	; 0
    5256:	61 f3       	breq	.-40     	; 0x5230 <usart_Write+0x4c>
        UDR1 = data;
    5258:	8e ec       	ldi	r24, 0xCE	; 206
    525a:	90 e0       	ldi	r25, 0x00	; 0
    525c:	2a 81       	ldd	r18, Y+2	; 0x02
    525e:	fc 01       	movw	r30, r24
    5260:	20 83       	st	Z, r18
    }
}
    5262:	0f 90       	pop	r0
    5264:	0f 90       	pop	r0
    5266:	cf 91       	pop	r28
    5268:	df 91       	pop	r29
    526a:	08 95       	ret

0000526c <usart_String>:
 *
 * @param port Port to write to.
 * @param s String to write.
 */
void usart_String(usartPort port, char *s)
{
    526c:	df 93       	push	r29
    526e:	cf 93       	push	r28
    5270:	00 d0       	rcall	.+0      	; 0x5272 <usart_String+0x6>
    5272:	0f 92       	push	r0
    5274:	cd b7       	in	r28, 0x3d	; 61
    5276:	de b7       	in	r29, 0x3e	; 62
    5278:	89 83       	std	Y+1, r24	; 0x01
    527a:	7b 83       	std	Y+3, r23	; 0x03
    527c:	6a 83       	std	Y+2, r22	; 0x02
    while (s[0] != '\0')
    527e:	0d c0       	rjmp	.+26     	; 0x529a <usart_String+0x2e>
    {
        usart_Write(port, s[0]);
    5280:	8a 81       	ldd	r24, Y+2	; 0x02
    5282:	9b 81       	ldd	r25, Y+3	; 0x03
    5284:	fc 01       	movw	r30, r24
    5286:	90 81       	ld	r25, Z
    5288:	89 81       	ldd	r24, Y+1	; 0x01
    528a:	69 2f       	mov	r22, r25
    528c:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
        s++;
    5290:	8a 81       	ldd	r24, Y+2	; 0x02
    5292:	9b 81       	ldd	r25, Y+3	; 0x03
    5294:	01 96       	adiw	r24, 0x01	; 1
    5296:	9b 83       	std	Y+3, r25	; 0x03
    5298:	8a 83       	std	Y+2, r24	; 0x02
 * @param port Port to write to.
 * @param s String to write.
 */
void usart_String(usartPort port, char *s)
{
    while (s[0] != '\0')
    529a:	8a 81       	ldd	r24, Y+2	; 0x02
    529c:	9b 81       	ldd	r25, Y+3	; 0x03
    529e:	fc 01       	movw	r30, r24
    52a0:	80 81       	ld	r24, Z
    52a2:	88 23       	and	r24, r24
    52a4:	69 f7       	brne	.-38     	; 0x5280 <usart_String+0x14>
    {
        usart_Write(port, s[0]);
        s++;
    }
}
    52a6:	0f 90       	pop	r0
    52a8:	0f 90       	pop	r0
    52aa:	0f 90       	pop	r0
    52ac:	cf 91       	pop	r28
    52ae:	df 91       	pop	r29
    52b0:	08 95       	ret

000052b2 <usart_Text>:
 *
 * @param port Port to write to.
 * @param s String constant to write.
 */
void usart_Text(usartPort port, const char *s)
{
    52b2:	1f 93       	push	r17
    52b4:	df 93       	push	r29
    52b6:	cf 93       	push	r28
    52b8:	cd b7       	in	r28, 0x3d	; 61
    52ba:	de b7       	in	r29, 0x3e	; 62
    52bc:	29 97       	sbiw	r28, 0x09	; 9
    52be:	0f b6       	in	r0, 0x3f	; 63
    52c0:	f8 94       	cli
    52c2:	de bf       	out	0x3e, r29	; 62
    52c4:	0f be       	out	0x3f, r0	; 63
    52c6:	cd bf       	out	0x3d, r28	; 61
    52c8:	8f 83       	std	Y+7, r24	; 0x07
    52ca:	79 87       	std	Y+9, r23	; 0x09
    52cc:	68 87       	std	Y+8, r22	; 0x08
    while (pgm_read_byte(s) != 0x00)
    52ce:	13 c0       	rjmp	.+38     	; 0x52f6 <usart_Text+0x44>
    {
        usart_Write(port, pgm_read_byte(s));
    52d0:	88 85       	ldd	r24, Y+8	; 0x08
    52d2:	99 85       	ldd	r25, Y+9	; 0x09
    52d4:	9d 83       	std	Y+5, r25	; 0x05
    52d6:	8c 83       	std	Y+4, r24	; 0x04
    52d8:	8c 81       	ldd	r24, Y+4	; 0x04
    52da:	9d 81       	ldd	r25, Y+5	; 0x05
    52dc:	fc 01       	movw	r30, r24
    52de:	14 91       	lpm	r17, Z+
    52e0:	1e 83       	std	Y+6, r17	; 0x06
    52e2:	9e 81       	ldd	r25, Y+6	; 0x06
    52e4:	8f 81       	ldd	r24, Y+7	; 0x07
    52e6:	69 2f       	mov	r22, r25
    52e8:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
        s++;
    52ec:	88 85       	ldd	r24, Y+8	; 0x08
    52ee:	99 85       	ldd	r25, Y+9	; 0x09
    52f0:	01 96       	adiw	r24, 0x01	; 1
    52f2:	99 87       	std	Y+9, r25	; 0x09
    52f4:	88 87       	std	Y+8, r24	; 0x08
 * @param port Port to write to.
 * @param s String constant to write.
 */
void usart_Text(usartPort port, const char *s)
{
    while (pgm_read_byte(s) != 0x00)
    52f6:	88 85       	ldd	r24, Y+8	; 0x08
    52f8:	99 85       	ldd	r25, Y+9	; 0x09
    52fa:	9a 83       	std	Y+2, r25	; 0x02
    52fc:	89 83       	std	Y+1, r24	; 0x01
    52fe:	89 81       	ldd	r24, Y+1	; 0x01
    5300:	9a 81       	ldd	r25, Y+2	; 0x02
    5302:	fc 01       	movw	r30, r24
    5304:	14 91       	lpm	r17, Z+
    5306:	1b 83       	std	Y+3, r17	; 0x03
    5308:	8b 81       	ldd	r24, Y+3	; 0x03
    530a:	88 23       	and	r24, r24
    530c:	09 f7       	brne	.-62     	; 0x52d0 <usart_Text+0x1e>
    {
        usart_Write(port, pgm_read_byte(s));
        s++;
    }
}
    530e:	29 96       	adiw	r28, 0x09	; 9
    5310:	0f b6       	in	r0, 0x3f	; 63
    5312:	f8 94       	cli
    5314:	de bf       	out	0x3e, r29	; 62
    5316:	0f be       	out	0x3f, r0	; 63
    5318:	cd bf       	out	0x3d, r28	; 61
    531a:	cf 91       	pop	r28
    531c:	df 91       	pop	r29
    531e:	1f 91       	pop	r17
    5320:	08 95       	ret

00005322 <usart_Print_Num>:
 *
 * @param port Port to write to.
 * @param value Number to write.
 */
void usart_Print_Num(usartPort port, int64_t value)
{
    5322:	2f 92       	push	r2
    5324:	3f 92       	push	r3
    5326:	4f 92       	push	r4
    5328:	5f 92       	push	r5
    532a:	6f 92       	push	r6
    532c:	7f 92       	push	r7
    532e:	8f 92       	push	r8
    5330:	9f 92       	push	r9
    5332:	af 92       	push	r10
    5334:	bf 92       	push	r11
    5336:	cf 92       	push	r12
    5338:	df 92       	push	r13
    533a:	ef 92       	push	r14
    533c:	ff 92       	push	r15
    533e:	0f 93       	push	r16
    5340:	1f 93       	push	r17
    5342:	df 93       	push	r29
    5344:	cf 93       	push	r28
    5346:	cd b7       	in	r28, 0x3d	; 61
    5348:	de b7       	in	r29, 0x3e	; 62
    534a:	69 97       	sbiw	r28, 0x19	; 25
    534c:	0f b6       	in	r0, 0x3f	; 63
    534e:	f8 94       	cli
    5350:	de bf       	out	0x3e, r29	; 62
    5352:	0f be       	out	0x3f, r0	; 63
    5354:	cd bf       	out	0x3d, r28	; 61
    5356:	89 87       	std	Y+9, r24	; 0x09
    5358:	0a 87       	std	Y+10, r16	; 0x0a
    535a:	1b 87       	std	Y+11, r17	; 0x0b
    535c:	2c 87       	std	Y+12, r18	; 0x0c
    535e:	3d 87       	std	Y+13, r19	; 0x0d
    5360:	4e 87       	std	Y+14, r20	; 0x0e
    5362:	5f 87       	std	Y+15, r21	; 0x0f
    5364:	68 8b       	std	Y+16, r22	; 0x10
    5366:	79 8b       	std	Y+17, r23	; 0x11
    if (value < 0)
    5368:	89 89       	ldd	r24, Y+17	; 0x11
    536a:	88 23       	and	r24, r24
    536c:	cc f0       	brlt	.+50     	; 0x53a0 <usart_Print_Num+0x7e>
    536e:	89 89       	ldd	r24, Y+17	; 0x11
    5370:	88 23       	and	r24, r24
    5372:	09 f0       	breq	.+2      	; 0x5376 <usart_Print_Num+0x54>
    5374:	98 c0       	rjmp	.+304    	; 0x54a6 <usart_Print_Num+0x184>
    5376:	88 89       	ldd	r24, Y+16	; 0x10
    5378:	88 23       	and	r24, r24
    537a:	09 f0       	breq	.+2      	; 0x537e <usart_Print_Num+0x5c>
    537c:	94 c0       	rjmp	.+296    	; 0x54a6 <usart_Print_Num+0x184>
    537e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5380:	88 23       	and	r24, r24
    5382:	09 f0       	breq	.+2      	; 0x5386 <usart_Print_Num+0x64>
    5384:	90 c0       	rjmp	.+288    	; 0x54a6 <usart_Print_Num+0x184>
    5386:	8e 85       	ldd	r24, Y+14	; 0x0e
    5388:	88 23       	and	r24, r24
    538a:	09 f0       	breq	.+2      	; 0x538e <usart_Print_Num+0x6c>
    538c:	8c c0       	rjmp	.+280    	; 0x54a6 <usart_Print_Num+0x184>
    538e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5390:	88 23       	and	r24, r24
    5392:	09 f0       	breq	.+2      	; 0x5396 <usart_Print_Num+0x74>
    5394:	88 c0       	rjmp	.+272    	; 0x54a6 <usart_Print_Num+0x184>
    5396:	8c 85       	ldd	r24, Y+12	; 0x0c
    5398:	88 23       	and	r24, r24
    539a:	09 f0       	breq	.+2      	; 0x539e <usart_Print_Num+0x7c>
    539c:	84 c0       	rjmp	.+264    	; 0x54a6 <usart_Print_Num+0x184>
    539e:	83 c0       	rjmp	.+262    	; 0x54a6 <usart_Print_Num+0x184>
    {
        value = -value;
    53a0:	aa 24       	eor	r10, r10
    53a2:	bb 24       	eor	r11, r11
    53a4:	cc 24       	eor	r12, r12
    53a6:	dd 24       	eor	r13, r13
    53a8:	ee 24       	eor	r14, r14
    53aa:	ff 24       	eor	r15, r15
    53ac:	00 e0       	ldi	r16, 0x00	; 0
    53ae:	10 e0       	ldi	r17, 0x00	; 0
    53b0:	2a 84       	ldd	r2, Y+10	; 0x0a
    53b2:	3b 84       	ldd	r3, Y+11	; 0x0b
    53b4:	4c 84       	ldd	r4, Y+12	; 0x0c
    53b6:	5d 84       	ldd	r5, Y+13	; 0x0d
    53b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    53ba:	7f 84       	ldd	r7, Y+15	; 0x0f
    53bc:	88 88       	ldd	r8, Y+16	; 0x10
    53be:	99 88       	ldd	r9, Y+17	; 0x11
    53c0:	2a 2d       	mov	r18, r10
    53c2:	22 19       	sub	r18, r2
    53c4:	e1 e0       	ldi	r30, 0x01	; 1
    53c6:	a2 16       	cp	r10, r18
    53c8:	08 f0       	brcs	.+2      	; 0x53cc <usart_Print_Num+0xaa>
    53ca:	e0 e0       	ldi	r30, 0x00	; 0
    53cc:	3b 2d       	mov	r19, r11
    53ce:	33 19       	sub	r19, r3
    53d0:	f1 e0       	ldi	r31, 0x01	; 1
    53d2:	b3 16       	cp	r11, r19
    53d4:	08 f0       	brcs	.+2      	; 0x53d8 <usart_Print_Num+0xb6>
    53d6:	f0 e0       	ldi	r31, 0x00	; 0
    53d8:	a3 2f       	mov	r26, r19
    53da:	ae 1b       	sub	r26, r30
    53dc:	ea 2f       	mov	r30, r26
    53de:	a1 e0       	ldi	r26, 0x01	; 1
    53e0:	3e 17       	cp	r19, r30
    53e2:	08 f0       	brcs	.+2      	; 0x53e6 <usart_Print_Num+0xc4>
    53e4:	a0 e0       	ldi	r26, 0x00	; 0
    53e6:	fa 2b       	or	r31, r26
    53e8:	3e 2f       	mov	r19, r30
    53ea:	4c 2d       	mov	r20, r12
    53ec:	44 19       	sub	r20, r4
    53ee:	e1 e0       	ldi	r30, 0x01	; 1
    53f0:	c4 16       	cp	r12, r20
    53f2:	08 f0       	brcs	.+2      	; 0x53f6 <usart_Print_Num+0xd4>
    53f4:	e0 e0       	ldi	r30, 0x00	; 0
    53f6:	a4 2f       	mov	r26, r20
    53f8:	af 1b       	sub	r26, r31
    53fa:	fa 2f       	mov	r31, r26
    53fc:	a1 e0       	ldi	r26, 0x01	; 1
    53fe:	4f 17       	cp	r20, r31
    5400:	08 f0       	brcs	.+2      	; 0x5404 <usart_Print_Num+0xe2>
    5402:	a0 e0       	ldi	r26, 0x00	; 0
    5404:	ea 2b       	or	r30, r26
    5406:	4f 2f       	mov	r20, r31
    5408:	5d 2d       	mov	r21, r13
    540a:	55 19       	sub	r21, r5
    540c:	f1 e0       	ldi	r31, 0x01	; 1
    540e:	d5 16       	cp	r13, r21
    5410:	08 f0       	brcs	.+2      	; 0x5414 <usart_Print_Num+0xf2>
    5412:	f0 e0       	ldi	r31, 0x00	; 0
    5414:	a5 2f       	mov	r26, r21
    5416:	ae 1b       	sub	r26, r30
    5418:	ea 2f       	mov	r30, r26
    541a:	a1 e0       	ldi	r26, 0x01	; 1
    541c:	5e 17       	cp	r21, r30
    541e:	08 f0       	brcs	.+2      	; 0x5422 <usart_Print_Num+0x100>
    5420:	a0 e0       	ldi	r26, 0x00	; 0
    5422:	fa 2b       	or	r31, r26
    5424:	5e 2f       	mov	r21, r30
    5426:	6e 2d       	mov	r22, r14
    5428:	66 19       	sub	r22, r6
    542a:	e1 e0       	ldi	r30, 0x01	; 1
    542c:	e6 16       	cp	r14, r22
    542e:	08 f0       	brcs	.+2      	; 0x5432 <usart_Print_Num+0x110>
    5430:	e0 e0       	ldi	r30, 0x00	; 0
    5432:	a6 2f       	mov	r26, r22
    5434:	af 1b       	sub	r26, r31
    5436:	fa 2f       	mov	r31, r26
    5438:	a1 e0       	ldi	r26, 0x01	; 1
    543a:	6f 17       	cp	r22, r31
    543c:	08 f0       	brcs	.+2      	; 0x5440 <usart_Print_Num+0x11e>
    543e:	a0 e0       	ldi	r26, 0x00	; 0
    5440:	ea 2b       	or	r30, r26
    5442:	6f 2f       	mov	r22, r31
    5444:	7f 2d       	mov	r23, r15
    5446:	77 19       	sub	r23, r7
    5448:	f1 e0       	ldi	r31, 0x01	; 1
    544a:	f7 16       	cp	r15, r23
    544c:	08 f0       	brcs	.+2      	; 0x5450 <usart_Print_Num+0x12e>
    544e:	f0 e0       	ldi	r31, 0x00	; 0
    5450:	a7 2f       	mov	r26, r23
    5452:	ae 1b       	sub	r26, r30
    5454:	ea 2f       	mov	r30, r26
    5456:	a1 e0       	ldi	r26, 0x01	; 1
    5458:	7e 17       	cp	r23, r30
    545a:	08 f0       	brcs	.+2      	; 0x545e <usart_Print_Num+0x13c>
    545c:	a0 e0       	ldi	r26, 0x00	; 0
    545e:	fa 2b       	or	r31, r26
    5460:	7e 2f       	mov	r23, r30
    5462:	80 2f       	mov	r24, r16
    5464:	88 19       	sub	r24, r8
    5466:	e1 e0       	ldi	r30, 0x01	; 1
    5468:	08 17       	cp	r16, r24
    546a:	08 f0       	brcs	.+2      	; 0x546e <usart_Print_Num+0x14c>
    546c:	e0 e0       	ldi	r30, 0x00	; 0
    546e:	a8 2f       	mov	r26, r24
    5470:	af 1b       	sub	r26, r31
    5472:	fa 2f       	mov	r31, r26
    5474:	a1 e0       	ldi	r26, 0x01	; 1
    5476:	8f 17       	cp	r24, r31
    5478:	08 f0       	brcs	.+2      	; 0x547c <usart_Print_Num+0x15a>
    547a:	a0 e0       	ldi	r26, 0x00	; 0
    547c:	ea 2b       	or	r30, r26
    547e:	8f 2f       	mov	r24, r31
    5480:	91 2f       	mov	r25, r17
    5482:	99 19       	sub	r25, r9
    5484:	f9 2f       	mov	r31, r25
    5486:	fe 1b       	sub	r31, r30
    5488:	ef 2f       	mov	r30, r31
    548a:	9e 2f       	mov	r25, r30
    548c:	2a 87       	std	Y+10, r18	; 0x0a
    548e:	3b 87       	std	Y+11, r19	; 0x0b
    5490:	4c 87       	std	Y+12, r20	; 0x0c
    5492:	5d 87       	std	Y+13, r21	; 0x0d
    5494:	6e 87       	std	Y+14, r22	; 0x0e
    5496:	7f 87       	std	Y+15, r23	; 0x0f
    5498:	88 8b       	std	Y+16, r24	; 0x10
    549a:	99 8b       	std	Y+17, r25	; 0x11
        usart_Write(port, '-');
    549c:	89 85       	ldd	r24, Y+9	; 0x09
    549e:	6d e2       	ldi	r22, 0x2D	; 45
    54a0:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
    54a4:	04 c0       	rjmp	.+8      	; 0x54ae <usart_Print_Num+0x18c>
    }
    else
    {
        usart_Write(port, '+');
    54a6:	89 85       	ldd	r24, Y+9	; 0x09
    54a8:	6b e2       	ldi	r22, 0x2B	; 43
    54aa:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
    }

    int64_t base = 10;
    54ae:	8a e0       	ldi	r24, 0x0A	; 10
    54b0:	89 83       	std	Y+1, r24	; 0x01
    54b2:	1a 82       	std	Y+2, r1	; 0x02
    54b4:	1b 82       	std	Y+3, r1	; 0x03
    54b6:	1c 82       	std	Y+4, r1	; 0x04
    54b8:	1d 82       	std	Y+5, r1	; 0x05
    54ba:	1e 82       	std	Y+6, r1	; 0x06
    54bc:	1f 82       	std	Y+7, r1	; 0x07
    54be:	18 86       	std	Y+8, r1	; 0x08

    while (value / base != 0)
    54c0:	96 c0       	rjmp	.+300    	; 0x55ee <usart_Print_Num+0x2cc>
    {
        base *= 10;
    54c2:	29 81       	ldd	r18, Y+1	; 0x01
    54c4:	3a 81       	ldd	r19, Y+2	; 0x02
    54c6:	4b 81       	ldd	r20, Y+3	; 0x03
    54c8:	5c 81       	ldd	r21, Y+4	; 0x04
    54ca:	6d 81       	ldd	r22, Y+5	; 0x05
    54cc:	7e 81       	ldd	r23, Y+6	; 0x06
    54ce:	8f 81       	ldd	r24, Y+7	; 0x07
    54d0:	98 85       	ldd	r25, Y+8	; 0x08
    54d2:	a2 2e       	mov	r10, r18
    54d4:	b3 2e       	mov	r11, r19
    54d6:	c4 2e       	mov	r12, r20
    54d8:	d5 2e       	mov	r13, r21
    54da:	e6 2e       	mov	r14, r22
    54dc:	f7 2e       	mov	r15, r23
    54de:	08 2f       	mov	r16, r24
    54e0:	19 2f       	mov	r17, r25
    54e2:	2a 2d       	mov	r18, r10
    54e4:	3b 2d       	mov	r19, r11
    54e6:	4c 2d       	mov	r20, r12
    54e8:	5d 2d       	mov	r21, r13
    54ea:	6e 2d       	mov	r22, r14
    54ec:	7f 2d       	mov	r23, r15
    54ee:	80 2f       	mov	r24, r16
    54f0:	91 2f       	mov	r25, r17
    54f2:	01 e0       	ldi	r16, 0x01	; 1
    54f4:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__ashldi3>
    54f8:	82 2e       	mov	r8, r18
    54fa:	93 2e       	mov	r9, r19
    54fc:	a4 2e       	mov	r10, r20
    54fe:	b5 2e       	mov	r11, r21
    5500:	c6 2e       	mov	r12, r22
    5502:	d7 2e       	mov	r13, r23
    5504:	e8 2e       	mov	r14, r24
    5506:	f9 2e       	mov	r15, r25
    5508:	28 2d       	mov	r18, r8
    550a:	39 2d       	mov	r19, r9
    550c:	4a 2d       	mov	r20, r10
    550e:	5b 2d       	mov	r21, r11
    5510:	6c 2d       	mov	r22, r12
    5512:	7d 2d       	mov	r23, r13
    5514:	8e 2d       	mov	r24, r14
    5516:	9f 2d       	mov	r25, r15
    5518:	02 e0       	ldi	r16, 0x02	; 2
    551a:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__ashldi3>
    551e:	2a 8b       	std	Y+18, r18	; 0x12
    5520:	3b 8b       	std	Y+19, r19	; 0x13
    5522:	4c 8b       	std	Y+20, r20	; 0x14
    5524:	5d 8b       	std	Y+21, r21	; 0x15
    5526:	6e 8b       	std	Y+22, r22	; 0x16
    5528:	7f 8b       	std	Y+23, r23	; 0x17
    552a:	88 8f       	std	Y+24, r24	; 0x18
    552c:	99 8f       	std	Y+25, r25	; 0x19
    552e:	2a 89       	ldd	r18, Y+18	; 0x12
    5530:	28 0d       	add	r18, r8
    5532:	e1 e0       	ldi	r30, 0x01	; 1
    5534:	28 15       	cp	r18, r8
    5536:	08 f0       	brcs	.+2      	; 0x553a <usart_Print_Num+0x218>
    5538:	e0 e0       	ldi	r30, 0x00	; 0
    553a:	3b 89       	ldd	r19, Y+19	; 0x13
    553c:	39 0d       	add	r19, r9
    553e:	f1 e0       	ldi	r31, 0x01	; 1
    5540:	39 15       	cp	r19, r9
    5542:	08 f0       	brcs	.+2      	; 0x5546 <usart_Print_Num+0x224>
    5544:	f0 e0       	ldi	r31, 0x00	; 0
    5546:	e3 0f       	add	r30, r19
    5548:	a1 e0       	ldi	r26, 0x01	; 1
    554a:	e3 17       	cp	r30, r19
    554c:	08 f0       	brcs	.+2      	; 0x5550 <usart_Print_Num+0x22e>
    554e:	a0 e0       	ldi	r26, 0x00	; 0
    5550:	fa 2b       	or	r31, r26
    5552:	3e 2f       	mov	r19, r30
    5554:	4c 89       	ldd	r20, Y+20	; 0x14
    5556:	4a 0d       	add	r20, r10
    5558:	e1 e0       	ldi	r30, 0x01	; 1
    555a:	4a 15       	cp	r20, r10
    555c:	08 f0       	brcs	.+2      	; 0x5560 <usart_Print_Num+0x23e>
    555e:	e0 e0       	ldi	r30, 0x00	; 0
    5560:	f4 0f       	add	r31, r20
    5562:	a1 e0       	ldi	r26, 0x01	; 1
    5564:	f4 17       	cp	r31, r20
    5566:	08 f0       	brcs	.+2      	; 0x556a <usart_Print_Num+0x248>
    5568:	a0 e0       	ldi	r26, 0x00	; 0
    556a:	ea 2b       	or	r30, r26
    556c:	4f 2f       	mov	r20, r31
    556e:	5d 89       	ldd	r21, Y+21	; 0x15
    5570:	5b 0d       	add	r21, r11
    5572:	f1 e0       	ldi	r31, 0x01	; 1
    5574:	5b 15       	cp	r21, r11
    5576:	08 f0       	brcs	.+2      	; 0x557a <usart_Print_Num+0x258>
    5578:	f0 e0       	ldi	r31, 0x00	; 0
    557a:	e5 0f       	add	r30, r21
    557c:	a1 e0       	ldi	r26, 0x01	; 1
    557e:	e5 17       	cp	r30, r21
    5580:	08 f0       	brcs	.+2      	; 0x5584 <usart_Print_Num+0x262>
    5582:	a0 e0       	ldi	r26, 0x00	; 0
    5584:	fa 2b       	or	r31, r26
    5586:	5e 2f       	mov	r21, r30
    5588:	6e 89       	ldd	r22, Y+22	; 0x16
    558a:	6c 0d       	add	r22, r12
    558c:	e1 e0       	ldi	r30, 0x01	; 1
    558e:	6c 15       	cp	r22, r12
    5590:	08 f0       	brcs	.+2      	; 0x5594 <usart_Print_Num+0x272>
    5592:	e0 e0       	ldi	r30, 0x00	; 0
    5594:	f6 0f       	add	r31, r22
    5596:	a1 e0       	ldi	r26, 0x01	; 1
    5598:	f6 17       	cp	r31, r22
    559a:	08 f0       	brcs	.+2      	; 0x559e <usart_Print_Num+0x27c>
    559c:	a0 e0       	ldi	r26, 0x00	; 0
    559e:	ea 2b       	or	r30, r26
    55a0:	6f 2f       	mov	r22, r31
    55a2:	7f 89       	ldd	r23, Y+23	; 0x17
    55a4:	7d 0d       	add	r23, r13
    55a6:	f1 e0       	ldi	r31, 0x01	; 1
    55a8:	7d 15       	cp	r23, r13
    55aa:	08 f0       	brcs	.+2      	; 0x55ae <usart_Print_Num+0x28c>
    55ac:	f0 e0       	ldi	r31, 0x00	; 0
    55ae:	e7 0f       	add	r30, r23
    55b0:	a1 e0       	ldi	r26, 0x01	; 1
    55b2:	e7 17       	cp	r30, r23
    55b4:	08 f0       	brcs	.+2      	; 0x55b8 <usart_Print_Num+0x296>
    55b6:	a0 e0       	ldi	r26, 0x00	; 0
    55b8:	fa 2b       	or	r31, r26
    55ba:	7e 2f       	mov	r23, r30
    55bc:	88 8d       	ldd	r24, Y+24	; 0x18
    55be:	8e 0d       	add	r24, r14
    55c0:	e1 e0       	ldi	r30, 0x01	; 1
    55c2:	8e 15       	cp	r24, r14
    55c4:	08 f0       	brcs	.+2      	; 0x55c8 <usart_Print_Num+0x2a6>
    55c6:	e0 e0       	ldi	r30, 0x00	; 0
    55c8:	f8 0f       	add	r31, r24
    55ca:	a1 e0       	ldi	r26, 0x01	; 1
    55cc:	f8 17       	cp	r31, r24
    55ce:	08 f0       	brcs	.+2      	; 0x55d2 <usart_Print_Num+0x2b0>
    55d0:	a0 e0       	ldi	r26, 0x00	; 0
    55d2:	ea 2b       	or	r30, r26
    55d4:	8f 2f       	mov	r24, r31
    55d6:	99 8d       	ldd	r25, Y+25	; 0x19
    55d8:	9f 0d       	add	r25, r15
    55da:	e9 0f       	add	r30, r25
    55dc:	9e 2f       	mov	r25, r30
    55de:	29 83       	std	Y+1, r18	; 0x01
    55e0:	3a 83       	std	Y+2, r19	; 0x02
    55e2:	4b 83       	std	Y+3, r20	; 0x03
    55e4:	5c 83       	std	Y+4, r21	; 0x04
    55e6:	6d 83       	std	Y+5, r22	; 0x05
    55e8:	7e 83       	std	Y+6, r23	; 0x06
    55ea:	8f 83       	std	Y+7, r24	; 0x07
    55ec:	98 87       	std	Y+8, r25	; 0x08
        usart_Write(port, '+');
    }

    int64_t base = 10;

    while (value / base != 0)
    55ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    55f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    55f2:	4c 85       	ldd	r20, Y+12	; 0x0c
    55f4:	5d 85       	ldd	r21, Y+13	; 0x0d
    55f6:	6e 85       	ldd	r22, Y+14	; 0x0e
    55f8:	7f 85       	ldd	r23, Y+15	; 0x0f
    55fa:	88 89       	ldd	r24, Y+16	; 0x10
    55fc:	99 89       	ldd	r25, Y+17	; 0x11
    55fe:	a9 80       	ldd	r10, Y+1	; 0x01
    5600:	ba 80       	ldd	r11, Y+2	; 0x02
    5602:	cb 80       	ldd	r12, Y+3	; 0x03
    5604:	dc 80       	ldd	r13, Y+4	; 0x04
    5606:	ed 80       	ldd	r14, Y+5	; 0x05
    5608:	fe 80       	ldd	r15, Y+6	; 0x06
    560a:	0f 81       	ldd	r16, Y+7	; 0x07
    560c:	18 85       	ldd	r17, Y+8	; 0x08
    560e:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__divdi3>
    5612:	a2 2e       	mov	r10, r18
    5614:	b3 2e       	mov	r11, r19
    5616:	c4 2e       	mov	r12, r20
    5618:	d5 2e       	mov	r13, r21
    561a:	e6 2e       	mov	r14, r22
    561c:	f7 2e       	mov	r15, r23
    561e:	08 2f       	mov	r16, r24
    5620:	19 2f       	mov	r17, r25
    5622:	2a 2d       	mov	r18, r10
    5624:	3b 2d       	mov	r19, r11
    5626:	4c 2d       	mov	r20, r12
    5628:	5d 2d       	mov	r21, r13
    562a:	6e 2d       	mov	r22, r14
    562c:	7f 2d       	mov	r23, r15
    562e:	80 2f       	mov	r24, r16
    5630:	91 2f       	mov	r25, r17
    5632:	e2 2f       	mov	r30, r18
    5634:	e3 2b       	or	r30, r19
    5636:	e4 2b       	or	r30, r20
    5638:	e5 2b       	or	r30, r21
    563a:	e6 2b       	or	r30, r22
    563c:	e7 2b       	or	r30, r23
    563e:	e8 2b       	or	r30, r24
    5640:	e9 2b       	or	r30, r25
    5642:	ee 23       	and	r30, r30
    5644:	09 f0       	breq	.+2      	; 0x5648 <usart_Print_Num+0x326>
    5646:	3d cf       	rjmp	.-390    	; 0x54c2 <usart_Print_Num+0x1a0>
        base *= 10;
    }

    do
    {
        base /= 10;
    5648:	a9 80       	ldd	r10, Y+1	; 0x01
    564a:	ba 80       	ldd	r11, Y+2	; 0x02
    564c:	cb 80       	ldd	r12, Y+3	; 0x03
    564e:	dc 80       	ldd	r13, Y+4	; 0x04
    5650:	ed 80       	ldd	r14, Y+5	; 0x05
    5652:	fe 80       	ldd	r15, Y+6	; 0x06
    5654:	0f 81       	ldd	r16, Y+7	; 0x07
    5656:	18 85       	ldd	r17, Y+8	; 0x08
    5658:	2a 2d       	mov	r18, r10
    565a:	3b 2d       	mov	r19, r11
    565c:	4c 2d       	mov	r20, r12
    565e:	5d 2d       	mov	r21, r13
    5660:	6e 2d       	mov	r22, r14
    5662:	7f 2d       	mov	r23, r15
    5664:	80 2f       	mov	r24, r16
    5666:	91 2f       	mov	r25, r17
    5668:	0f 2e       	mov	r0, r31
    566a:	fa e0       	ldi	r31, 0x0A	; 10
    566c:	af 2e       	mov	r10, r31
    566e:	f0 2d       	mov	r31, r0
    5670:	bb 24       	eor	r11, r11
    5672:	cc 24       	eor	r12, r12
    5674:	dd 24       	eor	r13, r13
    5676:	ee 24       	eor	r14, r14
    5678:	ff 24       	eor	r15, r15
    567a:	00 e0       	ldi	r16, 0x00	; 0
    567c:	10 e0       	ldi	r17, 0x00	; 0
    567e:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__divdi3>
    5682:	a2 2e       	mov	r10, r18
    5684:	b3 2e       	mov	r11, r19
    5686:	c4 2e       	mov	r12, r20
    5688:	d5 2e       	mov	r13, r21
    568a:	e6 2e       	mov	r14, r22
    568c:	f7 2e       	mov	r15, r23
    568e:	08 2f       	mov	r16, r24
    5690:	19 2f       	mov	r17, r25
    5692:	a9 82       	std	Y+1, r10	; 0x01
    5694:	ba 82       	std	Y+2, r11	; 0x02
    5696:	cb 82       	std	Y+3, r12	; 0x03
    5698:	dc 82       	std	Y+4, r13	; 0x04
    569a:	ed 82       	std	Y+5, r14	; 0x05
    569c:	fe 82       	std	Y+6, r15	; 0x06
    569e:	0f 83       	std	Y+7, r16	; 0x07
    56a0:	18 87       	std	Y+8, r17	; 0x08
        usart_Write(port, (value / base) + '0');
    56a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    56a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    56a6:	4c 85       	ldd	r20, Y+12	; 0x0c
    56a8:	5d 85       	ldd	r21, Y+13	; 0x0d
    56aa:	6e 85       	ldd	r22, Y+14	; 0x0e
    56ac:	7f 85       	ldd	r23, Y+15	; 0x0f
    56ae:	88 89       	ldd	r24, Y+16	; 0x10
    56b0:	99 89       	ldd	r25, Y+17	; 0x11
    56b2:	a9 80       	ldd	r10, Y+1	; 0x01
    56b4:	ba 80       	ldd	r11, Y+2	; 0x02
    56b6:	cb 80       	ldd	r12, Y+3	; 0x03
    56b8:	dc 80       	ldd	r13, Y+4	; 0x04
    56ba:	ed 80       	ldd	r14, Y+5	; 0x05
    56bc:	fe 80       	ldd	r15, Y+6	; 0x06
    56be:	0f 81       	ldd	r16, Y+7	; 0x07
    56c0:	18 85       	ldd	r17, Y+8	; 0x08
    56c2:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <__divdi3>
    56c6:	a2 2e       	mov	r10, r18
    56c8:	b3 2e       	mov	r11, r19
    56ca:	c4 2e       	mov	r12, r20
    56cc:	d5 2e       	mov	r13, r21
    56ce:	e6 2e       	mov	r14, r22
    56d0:	f7 2e       	mov	r15, r23
    56d2:	08 2f       	mov	r16, r24
    56d4:	19 2f       	mov	r17, r25
    56d6:	2a 2d       	mov	r18, r10
    56d8:	3b 2d       	mov	r19, r11
    56da:	4c 2d       	mov	r20, r12
    56dc:	5d 2d       	mov	r21, r13
    56de:	6e 2d       	mov	r22, r14
    56e0:	7f 2d       	mov	r23, r15
    56e2:	80 2f       	mov	r24, r16
    56e4:	91 2f       	mov	r25, r17
    56e6:	82 2f       	mov	r24, r18
    56e8:	98 2f       	mov	r25, r24
    56ea:	90 5d       	subi	r25, 0xD0	; 208
    56ec:	89 85       	ldd	r24, Y+9	; 0x09
    56ee:	69 2f       	mov	r22, r25
    56f0:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <usart_Write>
        value = value % base;
    56f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    56f6:	bb 84       	ldd	r11, Y+11	; 0x0b
    56f8:	cc 84       	ldd	r12, Y+12	; 0x0c
    56fa:	dd 84       	ldd	r13, Y+13	; 0x0d
    56fc:	ee 84       	ldd	r14, Y+14	; 0x0e
    56fe:	ff 84       	ldd	r15, Y+15	; 0x0f
    5700:	08 89       	ldd	r16, Y+16	; 0x10
    5702:	19 89       	ldd	r17, Y+17	; 0x11
    5704:	2a 2d       	mov	r18, r10
    5706:	3b 2d       	mov	r19, r11
    5708:	4c 2d       	mov	r20, r12
    570a:	5d 2d       	mov	r21, r13
    570c:	6e 2d       	mov	r22, r14
    570e:	7f 2d       	mov	r23, r15
    5710:	80 2f       	mov	r24, r16
    5712:	91 2f       	mov	r25, r17
    5714:	a9 80       	ldd	r10, Y+1	; 0x01
    5716:	ba 80       	ldd	r11, Y+2	; 0x02
    5718:	cb 80       	ldd	r12, Y+3	; 0x03
    571a:	dc 80       	ldd	r13, Y+4	; 0x04
    571c:	ed 80       	ldd	r14, Y+5	; 0x05
    571e:	fe 80       	ldd	r15, Y+6	; 0x06
    5720:	0f 81       	ldd	r16, Y+7	; 0x07
    5722:	18 85       	ldd	r17, Y+8	; 0x08
    5724:	0e 94 06 37 	call	0x6e0c	; 0x6e0c <__moddi3>
    5728:	a2 2e       	mov	r10, r18
    572a:	b3 2e       	mov	r11, r19
    572c:	c4 2e       	mov	r12, r20
    572e:	d5 2e       	mov	r13, r21
    5730:	e6 2e       	mov	r14, r22
    5732:	f7 2e       	mov	r15, r23
    5734:	08 2f       	mov	r16, r24
    5736:	19 2f       	mov	r17, r25
    5738:	aa 86       	std	Y+10, r10	; 0x0a
    573a:	bb 86       	std	Y+11, r11	; 0x0b
    573c:	cc 86       	std	Y+12, r12	; 0x0c
    573e:	dd 86       	std	Y+13, r13	; 0x0d
    5740:	ee 86       	std	Y+14, r14	; 0x0e
    5742:	ff 86       	std	Y+15, r15	; 0x0f
    5744:	08 8b       	std	Y+16, r16	; 0x10
    5746:	19 8b       	std	Y+17, r17	; 0x11
    }
    while (base > 1);
    5748:	88 85       	ldd	r24, Y+8	; 0x08
    574a:	18 16       	cp	r1, r24
    574c:	0c f4       	brge	.+2      	; 0x5750 <usart_Print_Num+0x42e>
    574e:	7c cf       	rjmp	.-264    	; 0x5648 <usart_Print_Num+0x326>
    5750:	88 85       	ldd	r24, Y+8	; 0x08
    5752:	88 23       	and	r24, r24
    5754:	71 f5       	brne	.+92     	; 0x57b2 <usart_Print_Num+0x490>
    5756:	8f 81       	ldd	r24, Y+7	; 0x07
    5758:	88 23       	and	r24, r24
    575a:	09 f0       	breq	.+2      	; 0x575e <usart_Print_Num+0x43c>
    575c:	75 cf       	rjmp	.-278    	; 0x5648 <usart_Print_Num+0x326>
    575e:	8f 81       	ldd	r24, Y+7	; 0x07
    5760:	88 23       	and	r24, r24
    5762:	39 f5       	brne	.+78     	; 0x57b2 <usart_Print_Num+0x490>
    5764:	8e 81       	ldd	r24, Y+6	; 0x06
    5766:	88 23       	and	r24, r24
    5768:	09 f0       	breq	.+2      	; 0x576c <usart_Print_Num+0x44a>
    576a:	6e cf       	rjmp	.-292    	; 0x5648 <usart_Print_Num+0x326>
    576c:	8e 81       	ldd	r24, Y+6	; 0x06
    576e:	88 23       	and	r24, r24
    5770:	01 f5       	brne	.+64     	; 0x57b2 <usart_Print_Num+0x490>
    5772:	8d 81       	ldd	r24, Y+5	; 0x05
    5774:	88 23       	and	r24, r24
    5776:	09 f0       	breq	.+2      	; 0x577a <usart_Print_Num+0x458>
    5778:	67 cf       	rjmp	.-306    	; 0x5648 <usart_Print_Num+0x326>
    577a:	8d 81       	ldd	r24, Y+5	; 0x05
    577c:	88 23       	and	r24, r24
    577e:	c9 f4       	brne	.+50     	; 0x57b2 <usart_Print_Num+0x490>
    5780:	8c 81       	ldd	r24, Y+4	; 0x04
    5782:	88 23       	and	r24, r24
    5784:	09 f0       	breq	.+2      	; 0x5788 <usart_Print_Num+0x466>
    5786:	60 cf       	rjmp	.-320    	; 0x5648 <usart_Print_Num+0x326>
    5788:	8c 81       	ldd	r24, Y+4	; 0x04
    578a:	88 23       	and	r24, r24
    578c:	91 f4       	brne	.+36     	; 0x57b2 <usart_Print_Num+0x490>
    578e:	8b 81       	ldd	r24, Y+3	; 0x03
    5790:	88 23       	and	r24, r24
    5792:	09 f0       	breq	.+2      	; 0x5796 <usart_Print_Num+0x474>
    5794:	59 cf       	rjmp	.-334    	; 0x5648 <usart_Print_Num+0x326>
    5796:	8b 81       	ldd	r24, Y+3	; 0x03
    5798:	88 23       	and	r24, r24
    579a:	59 f4       	brne	.+22     	; 0x57b2 <usart_Print_Num+0x490>
    579c:	8a 81       	ldd	r24, Y+2	; 0x02
    579e:	88 23       	and	r24, r24
    57a0:	09 f0       	breq	.+2      	; 0x57a4 <usart_Print_Num+0x482>
    57a2:	52 cf       	rjmp	.-348    	; 0x5648 <usart_Print_Num+0x326>
    57a4:	8a 81       	ldd	r24, Y+2	; 0x02
    57a6:	88 23       	and	r24, r24
    57a8:	21 f4       	brne	.+8      	; 0x57b2 <usart_Print_Num+0x490>
    57aa:	89 81       	ldd	r24, Y+1	; 0x01
    57ac:	82 30       	cpi	r24, 0x02	; 2
    57ae:	08 f0       	brcs	.+2      	; 0x57b2 <usart_Print_Num+0x490>
    57b0:	4b cf       	rjmp	.-362    	; 0x5648 <usart_Print_Num+0x326>
}
    57b2:	69 96       	adiw	r28, 0x19	; 25
    57b4:	0f b6       	in	r0, 0x3f	; 63
    57b6:	f8 94       	cli
    57b8:	de bf       	out	0x3e, r29	; 62
    57ba:	0f be       	out	0x3f, r0	; 63
    57bc:	cd bf       	out	0x3d, r28	; 61
    57be:	cf 91       	pop	r28
    57c0:	df 91       	pop	r29
    57c2:	1f 91       	pop	r17
    57c4:	0f 91       	pop	r16
    57c6:	ff 90       	pop	r15
    57c8:	ef 90       	pop	r14
    57ca:	df 90       	pop	r13
    57cc:	cf 90       	pop	r12
    57ce:	bf 90       	pop	r11
    57d0:	af 90       	pop	r10
    57d2:	9f 90       	pop	r9
    57d4:	8f 90       	pop	r8
    57d6:	7f 90       	pop	r7
    57d8:	6f 90       	pop	r6
    57da:	5f 90       	pop	r5
    57dc:	4f 90       	pop	r4
    57de:	3f 90       	pop	r3
    57e0:	2f 90       	pop	r2
    57e2:	08 95       	ret

000057e4 <usart_Interrupt_RX>:
 *
 * @param port Port to configure.
 * @param value Value to set.
 */
void usart_Interrupt_RX(usartPort port, unsigned char value)
{
    57e4:	df 93       	push	r29
    57e6:	cf 93       	push	r28
    57e8:	00 d0       	rcall	.+0      	; 0x57ea <usart_Interrupt_RX+0x6>
    57ea:	cd b7       	in	r28, 0x3d	; 61
    57ec:	de b7       	in	r29, 0x3e	; 62
    57ee:	89 83       	std	Y+1, r24	; 0x01
    57f0:	6a 83       	std	Y+2, r22	; 0x02
    if (port == SERIAL)
    57f2:	89 81       	ldd	r24, Y+1	; 0x01
    57f4:	81 30       	cpi	r24, 0x01	; 1
    57f6:	b9 f4       	brne	.+46     	; 0x5826 <usart_Interrupt_RX+0x42>
    {
        if (value == ENABLE) set_bit(UCSR0B, RXCIE0);
    57f8:	8a 81       	ldd	r24, Y+2	; 0x02
    57fa:	81 30       	cpi	r24, 0x01	; 1
    57fc:	51 f4       	brne	.+20     	; 0x5812 <usart_Interrupt_RX+0x2e>
    57fe:	81 ec       	ldi	r24, 0xC1	; 193
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	21 ec       	ldi	r18, 0xC1	; 193
    5804:	30 e0       	ldi	r19, 0x00	; 0
    5806:	f9 01       	movw	r30, r18
    5808:	20 81       	ld	r18, Z
    580a:	20 68       	ori	r18, 0x80	; 128
    580c:	fc 01       	movw	r30, r24
    580e:	20 83       	st	Z, r18
    5810:	20 c0       	rjmp	.+64     	; 0x5852 <usart_Interrupt_RX+0x6e>
        else clear_bit(UCSR0B, RXCIE0);
    5812:	81 ec       	ldi	r24, 0xC1	; 193
    5814:	90 e0       	ldi	r25, 0x00	; 0
    5816:	21 ec       	ldi	r18, 0xC1	; 193
    5818:	30 e0       	ldi	r19, 0x00	; 0
    581a:	f9 01       	movw	r30, r18
    581c:	20 81       	ld	r18, Z
    581e:	2f 77       	andi	r18, 0x7F	; 127
    5820:	fc 01       	movw	r30, r24
    5822:	20 83       	st	Z, r18
    5824:	16 c0       	rjmp	.+44     	; 0x5852 <usart_Interrupt_RX+0x6e>
    }
    else //if (port == GPS)
    {
        if (value == ENABLE) set_bit(UCSR1B, RXCIE1);
    5826:	8a 81       	ldd	r24, Y+2	; 0x02
    5828:	81 30       	cpi	r24, 0x01	; 1
    582a:	51 f4       	brne	.+20     	; 0x5840 <usart_Interrupt_RX+0x5c>
    582c:	89 ec       	ldi	r24, 0xC9	; 201
    582e:	90 e0       	ldi	r25, 0x00	; 0
    5830:	29 ec       	ldi	r18, 0xC9	; 201
    5832:	30 e0       	ldi	r19, 0x00	; 0
    5834:	f9 01       	movw	r30, r18
    5836:	20 81       	ld	r18, Z
    5838:	20 68       	ori	r18, 0x80	; 128
    583a:	fc 01       	movw	r30, r24
    583c:	20 83       	st	Z, r18
    583e:	09 c0       	rjmp	.+18     	; 0x5852 <usart_Interrupt_RX+0x6e>
        else clear_bit(UCSR1B, RXCIE1);
    5840:	89 ec       	ldi	r24, 0xC9	; 201
    5842:	90 e0       	ldi	r25, 0x00	; 0
    5844:	29 ec       	ldi	r18, 0xC9	; 201
    5846:	30 e0       	ldi	r19, 0x00	; 0
    5848:	f9 01       	movw	r30, r18
    584a:	20 81       	ld	r18, Z
    584c:	2f 77       	andi	r18, 0x7F	; 127
    584e:	fc 01       	movw	r30, r24
    5850:	20 83       	st	Z, r18
    }
}
    5852:	0f 90       	pop	r0
    5854:	0f 90       	pop	r0
    5856:	cf 91       	pop	r28
    5858:	df 91       	pop	r29
    585a:	08 95       	ret

0000585c <usart_Interrupt_TX>:
 *
 * @param port Port to configure.
 * @param value Value to set.
 */
void usart_Interrupt_TX(usartPort port, unsigned char value)
{
    585c:	df 93       	push	r29
    585e:	cf 93       	push	r28
    5860:	00 d0       	rcall	.+0      	; 0x5862 <usart_Interrupt_TX+0x6>
    5862:	cd b7       	in	r28, 0x3d	; 61
    5864:	de b7       	in	r29, 0x3e	; 62
    5866:	89 83       	std	Y+1, r24	; 0x01
    5868:	6a 83       	std	Y+2, r22	; 0x02
    if (port == SERIAL)
    586a:	89 81       	ldd	r24, Y+1	; 0x01
    586c:	81 30       	cpi	r24, 0x01	; 1
    586e:	b9 f4       	brne	.+46     	; 0x589e <usart_Interrupt_TX+0x42>
    {
        if (value == ENABLE) set_bit(UCSR0B, TXCIE0);
    5870:	8a 81       	ldd	r24, Y+2	; 0x02
    5872:	81 30       	cpi	r24, 0x01	; 1
    5874:	51 f4       	brne	.+20     	; 0x588a <usart_Interrupt_TX+0x2e>
    5876:	81 ec       	ldi	r24, 0xC1	; 193
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	21 ec       	ldi	r18, 0xC1	; 193
    587c:	30 e0       	ldi	r19, 0x00	; 0
    587e:	f9 01       	movw	r30, r18
    5880:	20 81       	ld	r18, Z
    5882:	20 64       	ori	r18, 0x40	; 64
    5884:	fc 01       	movw	r30, r24
    5886:	20 83       	st	Z, r18
    5888:	20 c0       	rjmp	.+64     	; 0x58ca <usart_Interrupt_TX+0x6e>
        else clear_bit(UCSR0B, TXCIE0);
    588a:	81 ec       	ldi	r24, 0xC1	; 193
    588c:	90 e0       	ldi	r25, 0x00	; 0
    588e:	21 ec       	ldi	r18, 0xC1	; 193
    5890:	30 e0       	ldi	r19, 0x00	; 0
    5892:	f9 01       	movw	r30, r18
    5894:	20 81       	ld	r18, Z
    5896:	2f 7b       	andi	r18, 0xBF	; 191
    5898:	fc 01       	movw	r30, r24
    589a:	20 83       	st	Z, r18
    589c:	16 c0       	rjmp	.+44     	; 0x58ca <usart_Interrupt_TX+0x6e>
    }
    else //if (port == GPS)
    {
        if (value == ENABLE) set_bit(UCSR1B, TXCIE1);
    589e:	8a 81       	ldd	r24, Y+2	; 0x02
    58a0:	81 30       	cpi	r24, 0x01	; 1
    58a2:	51 f4       	brne	.+20     	; 0x58b8 <usart_Interrupt_TX+0x5c>
    58a4:	89 ec       	ldi	r24, 0xC9	; 201
    58a6:	90 e0       	ldi	r25, 0x00	; 0
    58a8:	29 ec       	ldi	r18, 0xC9	; 201
    58aa:	30 e0       	ldi	r19, 0x00	; 0
    58ac:	f9 01       	movw	r30, r18
    58ae:	20 81       	ld	r18, Z
    58b0:	20 64       	ori	r18, 0x40	; 64
    58b2:	fc 01       	movw	r30, r24
    58b4:	20 83       	st	Z, r18
    58b6:	09 c0       	rjmp	.+18     	; 0x58ca <usart_Interrupt_TX+0x6e>
        else clear_bit(UCSR1B, TXCIE1);
    58b8:	89 ec       	ldi	r24, 0xC9	; 201
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	29 ec       	ldi	r18, 0xC9	; 201
    58be:	30 e0       	ldi	r19, 0x00	; 0
    58c0:	f9 01       	movw	r30, r18
    58c2:	20 81       	ld	r18, Z
    58c4:	2f 7b       	andi	r18, 0xBF	; 191
    58c6:	fc 01       	movw	r30, r24
    58c8:	20 83       	st	Z, r18
    }
}
    58ca:	0f 90       	pop	r0
    58cc:	0f 90       	pop	r0
    58ce:	cf 91       	pop	r28
    58d0:	df 91       	pop	r29
    58d2:	08 95       	ret

000058d4 <usart_RX>:
 *
 * @param port Port to configure.
 * @param value Value to set.
 */
void usart_RX(usartPort port, unsigned char value)
{
    58d4:	df 93       	push	r29
    58d6:	cf 93       	push	r28
    58d8:	00 d0       	rcall	.+0      	; 0x58da <usart_RX+0x6>
    58da:	cd b7       	in	r28, 0x3d	; 61
    58dc:	de b7       	in	r29, 0x3e	; 62
    58de:	89 83       	std	Y+1, r24	; 0x01
    58e0:	6a 83       	std	Y+2, r22	; 0x02
    if (port == SERIAL)
    58e2:	89 81       	ldd	r24, Y+1	; 0x01
    58e4:	81 30       	cpi	r24, 0x01	; 1
    58e6:	b9 f4       	brne	.+46     	; 0x5916 <usart_RX+0x42>
    {
        if (value == ENABLE) set_bit(UCSR0B, RXEN0);
    58e8:	8a 81       	ldd	r24, Y+2	; 0x02
    58ea:	81 30       	cpi	r24, 0x01	; 1
    58ec:	51 f4       	brne	.+20     	; 0x5902 <usart_RX+0x2e>
    58ee:	81 ec       	ldi	r24, 0xC1	; 193
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	21 ec       	ldi	r18, 0xC1	; 193
    58f4:	30 e0       	ldi	r19, 0x00	; 0
    58f6:	f9 01       	movw	r30, r18
    58f8:	20 81       	ld	r18, Z
    58fa:	20 61       	ori	r18, 0x10	; 16
    58fc:	fc 01       	movw	r30, r24
    58fe:	20 83       	st	Z, r18
    5900:	20 c0       	rjmp	.+64     	; 0x5942 <usart_RX+0x6e>
        else clear_bit(UCSR0B, RXEN0);
    5902:	81 ec       	ldi	r24, 0xC1	; 193
    5904:	90 e0       	ldi	r25, 0x00	; 0
    5906:	21 ec       	ldi	r18, 0xC1	; 193
    5908:	30 e0       	ldi	r19, 0x00	; 0
    590a:	f9 01       	movw	r30, r18
    590c:	20 81       	ld	r18, Z
    590e:	2f 7e       	andi	r18, 0xEF	; 239
    5910:	fc 01       	movw	r30, r24
    5912:	20 83       	st	Z, r18
    5914:	16 c0       	rjmp	.+44     	; 0x5942 <usart_RX+0x6e>
    }
    else //if (port == GPS)
    {
        if (value == ENABLE) set_bit(UCSR1B, RXEN1);
    5916:	8a 81       	ldd	r24, Y+2	; 0x02
    5918:	81 30       	cpi	r24, 0x01	; 1
    591a:	51 f4       	brne	.+20     	; 0x5930 <usart_RX+0x5c>
    591c:	89 ec       	ldi	r24, 0xC9	; 201
    591e:	90 e0       	ldi	r25, 0x00	; 0
    5920:	29 ec       	ldi	r18, 0xC9	; 201
    5922:	30 e0       	ldi	r19, 0x00	; 0
    5924:	f9 01       	movw	r30, r18
    5926:	20 81       	ld	r18, Z
    5928:	20 61       	ori	r18, 0x10	; 16
    592a:	fc 01       	movw	r30, r24
    592c:	20 83       	st	Z, r18
    592e:	09 c0       	rjmp	.+18     	; 0x5942 <usart_RX+0x6e>
        else clear_bit(UCSR1B, RXEN1);
    5930:	89 ec       	ldi	r24, 0xC9	; 201
    5932:	90 e0       	ldi	r25, 0x00	; 0
    5934:	29 ec       	ldi	r18, 0xC9	; 201
    5936:	30 e0       	ldi	r19, 0x00	; 0
    5938:	f9 01       	movw	r30, r18
    593a:	20 81       	ld	r18, Z
    593c:	2f 7e       	andi	r18, 0xEF	; 239
    593e:	fc 01       	movw	r30, r24
    5940:	20 83       	st	Z, r18
    }
}
    5942:	0f 90       	pop	r0
    5944:	0f 90       	pop	r0
    5946:	cf 91       	pop	r28
    5948:	df 91       	pop	r29
    594a:	08 95       	ret

0000594c <usart_TX>:
 *
 * @param port Port to configure.
 * @param value Value to set.
 */
void usart_TX(usartPort port, unsigned char value)
{
    594c:	df 93       	push	r29
    594e:	cf 93       	push	r28
    5950:	00 d0       	rcall	.+0      	; 0x5952 <usart_TX+0x6>
    5952:	cd b7       	in	r28, 0x3d	; 61
    5954:	de b7       	in	r29, 0x3e	; 62
    5956:	89 83       	std	Y+1, r24	; 0x01
    5958:	6a 83       	std	Y+2, r22	; 0x02
    if (port == SERIAL)
    595a:	89 81       	ldd	r24, Y+1	; 0x01
    595c:	81 30       	cpi	r24, 0x01	; 1
    595e:	b9 f4       	brne	.+46     	; 0x598e <usart_TX+0x42>
    {
        if (value == ENABLE) set_bit(UCSR0B, TXEN0);
    5960:	8a 81       	ldd	r24, Y+2	; 0x02
    5962:	81 30       	cpi	r24, 0x01	; 1
    5964:	51 f4       	brne	.+20     	; 0x597a <usart_TX+0x2e>
    5966:	81 ec       	ldi	r24, 0xC1	; 193
    5968:	90 e0       	ldi	r25, 0x00	; 0
    596a:	21 ec       	ldi	r18, 0xC1	; 193
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	f9 01       	movw	r30, r18
    5970:	20 81       	ld	r18, Z
    5972:	28 60       	ori	r18, 0x08	; 8
    5974:	fc 01       	movw	r30, r24
    5976:	20 83       	st	Z, r18
    5978:	20 c0       	rjmp	.+64     	; 0x59ba <usart_TX+0x6e>
        else clear_bit(UCSR0B, TXEN0);
    597a:	81 ec       	ldi	r24, 0xC1	; 193
    597c:	90 e0       	ldi	r25, 0x00	; 0
    597e:	21 ec       	ldi	r18, 0xC1	; 193
    5980:	30 e0       	ldi	r19, 0x00	; 0
    5982:	f9 01       	movw	r30, r18
    5984:	20 81       	ld	r18, Z
    5986:	27 7f       	andi	r18, 0xF7	; 247
    5988:	fc 01       	movw	r30, r24
    598a:	20 83       	st	Z, r18
    598c:	16 c0       	rjmp	.+44     	; 0x59ba <usart_TX+0x6e>
    }
    else //if (port == GPS)
    {
        if (value == ENABLE) set_bit(UCSR1B, TXEN1);
    598e:	8a 81       	ldd	r24, Y+2	; 0x02
    5990:	81 30       	cpi	r24, 0x01	; 1
    5992:	51 f4       	brne	.+20     	; 0x59a8 <usart_TX+0x5c>
    5994:	89 ec       	ldi	r24, 0xC9	; 201
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	29 ec       	ldi	r18, 0xC9	; 201
    599a:	30 e0       	ldi	r19, 0x00	; 0
    599c:	f9 01       	movw	r30, r18
    599e:	20 81       	ld	r18, Z
    59a0:	28 60       	ori	r18, 0x08	; 8
    59a2:	fc 01       	movw	r30, r24
    59a4:	20 83       	st	Z, r18
    59a6:	09 c0       	rjmp	.+18     	; 0x59ba <usart_TX+0x6e>
        else clear_bit(UCSR1B, TXEN1);
    59a8:	89 ec       	ldi	r24, 0xC9	; 201
    59aa:	90 e0       	ldi	r25, 0x00	; 0
    59ac:	29 ec       	ldi	r18, 0xC9	; 201
    59ae:	30 e0       	ldi	r19, 0x00	; 0
    59b0:	f9 01       	movw	r30, r18
    59b2:	20 81       	ld	r18, Z
    59b4:	27 7f       	andi	r18, 0xF7	; 247
    59b6:	fc 01       	movw	r30, r24
    59b8:	20 83       	st	Z, r18
    }
}
    59ba:	0f 90       	pop	r0
    59bc:	0f 90       	pop	r0
    59be:	cf 91       	pop	r28
    59c0:	df 91       	pop	r29
    59c2:	08 95       	ret

000059c4 <user_Init>:

/**
 * Initializes the button and LED port settings.
 */
void user_Init(void)
{
    59c4:	df 93       	push	r29
    59c6:	cf 93       	push	r28
    59c8:	cd b7       	in	r28, 0x3d	; 61
    59ca:	de b7       	in	r29, 0x3e	; 62
    //LEDs
    setPinMode(MODE_LOW, LED_POWER_PORT, LED_POWER_PIN);
    59cc:	82 e0       	ldi	r24, 0x02	; 2
    59ce:	63 e0       	ldi	r22, 0x03	; 3
    59d0:	44 e0       	ldi	r20, 0x04	; 4
    59d2:	50 e0       	ldi	r21, 0x00	; 0
    59d4:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
    setPinMode(MODE_LOW, LED_GPS_PORT, LED_GPS_PIN);
    59d8:	82 e0       	ldi	r24, 0x02	; 2
    59da:	63 e0       	ldi	r22, 0x03	; 3
    59dc:	47 e0       	ldi	r20, 0x07	; 7
    59de:	50 e0       	ldi	r21, 0x00	; 0
    59e0:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
    setPinMode(MODE_LOW, LED_1_PORT, LED_1_PIN);
    59e4:	82 e0       	ldi	r24, 0x02	; 2
    59e6:	62 e0       	ldi	r22, 0x02	; 2
    59e8:	43 e0       	ldi	r20, 0x03	; 3
    59ea:	50 e0       	ldi	r21, 0x00	; 0
    59ec:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
    setPinMode(MODE_LOW, LED_2_PORT, LED_2_PIN);
    59f0:	82 e0       	ldi	r24, 0x02	; 2
    59f2:	63 e0       	ldi	r22, 0x03	; 3
    59f4:	46 e0       	ldi	r20, 0x06	; 6
    59f6:	50 e0       	ldi	r21, 0x00	; 0
    59f8:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
    setPinMode(MODE_LOW, LED_3_PORT, LED_3_PIN);
    59fc:	82 e0       	ldi	r24, 0x02	; 2
    59fe:	63 e0       	ldi	r22, 0x03	; 3
    5a00:	45 e0       	ldi	r20, 0x05	; 5
    5a02:	50 e0       	ldi	r21, 0x00	; 0
    5a04:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>

    //Buttons
    setPinMode(MODE_INPUT_SRC, BUTTON_PORT, BUTTON_1_PIN);
    5a08:	81 e0       	ldi	r24, 0x01	; 1
    5a0a:	61 e0       	ldi	r22, 0x01	; 1
    5a0c:	42 e0       	ldi	r20, 0x02	; 2
    5a0e:	50 e0       	ldi	r21, 0x00	; 0
    5a10:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
    setPinMode(MODE_INPUT_SRC, BUTTON_PORT, BUTTON_2_PIN);
    5a14:	81 e0       	ldi	r24, 0x01	; 1
    5a16:	61 e0       	ldi	r22, 0x01	; 1
    5a18:	41 e0       	ldi	r20, 0x01	; 1
    5a1a:	50 e0       	ldi	r21, 0x00	; 0
    5a1c:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
    setPinMode(MODE_INPUT_SRC, BUTTON_PORT, BUTTON_3_PIN);
    5a20:	81 e0       	ldi	r24, 0x01	; 1
    5a22:	61 e0       	ldi	r22, 0x01	; 1
    5a24:	40 e0       	ldi	r20, 0x00	; 0
    5a26:	50 e0       	ldi	r21, 0x00	; 0
    5a28:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
}
    5a2c:	cf 91       	pop	r28
    5a2e:	df 91       	pop	r29
    5a30:	08 95       	ret

00005a32 <user_Get_Button>:
 * @param num Button to test.
 *
 * @return Returns if the button is pressed.
 */
char user_Get_Button(char num)
{
    5a32:	df 93       	push	r29
    5a34:	cf 93       	push	r28
    5a36:	0f 92       	push	r0
    5a38:	cd b7       	in	r28, 0x3d	; 61
    5a3a:	de b7       	in	r29, 0x3e	; 62
    5a3c:	89 83       	std	Y+1, r24	; 0x01
    switch (num)
    5a3e:	89 81       	ldd	r24, Y+1	; 0x01
    5a40:	88 2f       	mov	r24, r24
    5a42:	90 e0       	ldi	r25, 0x00	; 0
    5a44:	82 30       	cpi	r24, 0x02	; 2
    5a46:	91 05       	cpc	r25, r1
    5a48:	c9 f0       	breq	.+50     	; 0x5a7c <user_Get_Button+0x4a>
    5a4a:	83 30       	cpi	r24, 0x03	; 3
    5a4c:	91 05       	cpc	r25, r1
    5a4e:	39 f1       	breq	.+78     	; 0x5a9e <user_Get_Button+0x6c>
    5a50:	81 30       	cpi	r24, 0x01	; 1
    5a52:	91 05       	cpc	r25, r1
    5a54:	99 f5       	brne	.+102    	; 0x5abc <user_Get_Button+0x8a>
    {
        case 1:
            return !(test_bit(BUTTON_IN, BUTTON_1_PIN));
    5a56:	83 e2       	ldi	r24, 0x23	; 35
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	fc 01       	movw	r30, r24
    5a5c:	80 81       	ld	r24, Z
    5a5e:	88 2f       	mov	r24, r24
    5a60:	90 e0       	ldi	r25, 0x00	; 0
    5a62:	84 70       	andi	r24, 0x04	; 4
    5a64:	90 70       	andi	r25, 0x00	; 0
    5a66:	9c 01       	movw	r18, r24
    5a68:	35 95       	asr	r19
    5a6a:	27 95       	ror	r18
    5a6c:	35 95       	asr	r19
    5a6e:	27 95       	ror	r18
    5a70:	81 e0       	ldi	r24, 0x01	; 1
    5a72:	21 15       	cp	r18, r1
    5a74:	31 05       	cpc	r19, r1
    5a76:	19 f1       	breq	.+70     	; 0x5abe <user_Get_Button+0x8c>
    5a78:	80 e0       	ldi	r24, 0x00	; 0
    5a7a:	21 c0       	rjmp	.+66     	; 0x5abe <user_Get_Button+0x8c>
            break;
        case 2:
            return !(test_bit(BUTTON_IN, BUTTON_2_PIN));
    5a7c:	83 e2       	ldi	r24, 0x23	; 35
    5a7e:	90 e0       	ldi	r25, 0x00	; 0
    5a80:	fc 01       	movw	r30, r24
    5a82:	80 81       	ld	r24, Z
    5a84:	88 2f       	mov	r24, r24
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	82 70       	andi	r24, 0x02	; 2
    5a8a:	90 70       	andi	r25, 0x00	; 0
    5a8c:	9c 01       	movw	r18, r24
    5a8e:	35 95       	asr	r19
    5a90:	27 95       	ror	r18
    5a92:	81 e0       	ldi	r24, 0x01	; 1
    5a94:	21 15       	cp	r18, r1
    5a96:	31 05       	cpc	r19, r1
    5a98:	91 f0       	breq	.+36     	; 0x5abe <user_Get_Button+0x8c>
    5a9a:	80 e0       	ldi	r24, 0x00	; 0
    5a9c:	10 c0       	rjmp	.+32     	; 0x5abe <user_Get_Button+0x8c>
            break;
        case 3:
            return !(test_bit(BUTTON_IN, BUTTON_3_PIN));
    5a9e:	83 e2       	ldi	r24, 0x23	; 35
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
    5aa2:	fc 01       	movw	r30, r24
    5aa4:	80 81       	ld	r24, Z
    5aa6:	88 2f       	mov	r24, r24
    5aa8:	90 e0       	ldi	r25, 0x00	; 0
    5aaa:	9c 01       	movw	r18, r24
    5aac:	21 70       	andi	r18, 0x01	; 1
    5aae:	30 70       	andi	r19, 0x00	; 0
    5ab0:	81 e0       	ldi	r24, 0x01	; 1
    5ab2:	21 15       	cp	r18, r1
    5ab4:	31 05       	cpc	r19, r1
    5ab6:	19 f0       	breq	.+6      	; 0x5abe <user_Get_Button+0x8c>
    5ab8:	80 e0       	ldi	r24, 0x00	; 0
    5aba:	01 c0       	rjmp	.+2      	; 0x5abe <user_Get_Button+0x8c>
            break;
    }

    return 0;
    5abc:	80 e0       	ldi	r24, 0x00	; 0
}
    5abe:	0f 90       	pop	r0
    5ac0:	cf 91       	pop	r28
    5ac2:	df 91       	pop	r29
    5ac4:	08 95       	ret

00005ac6 <user_Set_LED>:
 *
 * @param num LED to change.
 * @param state State to set.
 */
void user_Set_LED(char num, char state)
{
    5ac6:	df 93       	push	r29
    5ac8:	cf 93       	push	r28
    5aca:	00 d0       	rcall	.+0      	; 0x5acc <user_Set_LED+0x6>
    5acc:	cd b7       	in	r28, 0x3d	; 61
    5ace:	de b7       	in	r29, 0x3e	; 62
    5ad0:	89 83       	std	Y+1, r24	; 0x01
    5ad2:	6a 83       	std	Y+2, r22	; 0x02
    switch (num)
    5ad4:	89 81       	ldd	r24, Y+1	; 0x01
    5ad6:	88 2f       	mov	r24, r24
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	83 30       	cpi	r24, 0x03	; 3
    5adc:	91 05       	cpc	r25, r1
    5ade:	a1 f1       	breq	.+104    	; 0x5b48 <user_Set_LED+0x82>
    5ae0:	84 30       	cpi	r24, 0x04	; 4
    5ae2:	91 05       	cpc	r25, r1
    5ae4:	3c f4       	brge	.+14     	; 0x5af4 <user_Set_LED+0x2e>
    5ae6:	81 30       	cpi	r24, 0x01	; 1
    5ae8:	91 05       	cpc	r25, r1
    5aea:	61 f0       	breq	.+24     	; 0x5b04 <user_Set_LED+0x3e>
    5aec:	82 30       	cpi	r24, 0x02	; 2
    5aee:	91 05       	cpc	r25, r1
    5af0:	d1 f0       	breq	.+52     	; 0x5b26 <user_Set_LED+0x60>
    5af2:	5d c0       	rjmp	.+186    	; 0x5bae <user_Set_LED+0xe8>
    5af4:	84 30       	cpi	r24, 0x04	; 4
    5af6:	91 05       	cpc	r25, r1
    5af8:	c1 f1       	breq	.+112    	; 0x5b6a <user_Set_LED+0xa4>
    5afa:	85 30       	cpi	r24, 0x05	; 5
    5afc:	91 05       	cpc	r25, r1
    5afe:	09 f4       	brne	.+2      	; 0x5b02 <user_Set_LED+0x3c>
    5b00:	45 c0       	rjmp	.+138    	; 0x5b8c <user_Set_LED+0xc6>
    5b02:	55 c0       	rjmp	.+170    	; 0x5bae <user_Set_LED+0xe8>
    {
        case LED_CLEAR:
            if (!state) setPinMode(MODE_HIGH, LED_1_PORT, LED_1_PIN);
    5b04:	8a 81       	ldd	r24, Y+2	; 0x02
    5b06:	88 23       	and	r24, r24
    5b08:	39 f4       	brne	.+14     	; 0x5b18 <user_Set_LED+0x52>
    5b0a:	83 e0       	ldi	r24, 0x03	; 3
    5b0c:	62 e0       	ldi	r22, 0x02	; 2
    5b0e:	43 e0       	ldi	r20, 0x03	; 3
    5b10:	50 e0       	ldi	r21, 0x00	; 0
    5b12:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
            else setPinMode(MODE_LOW, LED_1_PORT, LED_1_PIN);
            break;
    5b16:	4b c0       	rjmp	.+150    	; 0x5bae <user_Set_LED+0xe8>
{
    switch (num)
    {
        case LED_CLEAR:
            if (!state) setPinMode(MODE_HIGH, LED_1_PORT, LED_1_PIN);
            else setPinMode(MODE_LOW, LED_1_PORT, LED_1_PIN);
    5b18:	82 e0       	ldi	r24, 0x02	; 2
    5b1a:	62 e0       	ldi	r22, 0x02	; 2
    5b1c:	43 e0       	ldi	r20, 0x03	; 3
    5b1e:	50 e0       	ldi	r21, 0x00	; 0
    5b20:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
            break;
    5b24:	44 c0       	rjmp	.+136    	; 0x5bae <user_Set_LED+0xe8>
        case LED_STOP:
            if (!state) setPinMode(MODE_HIGH, LED_2_PORT, LED_2_PIN);
    5b26:	8a 81       	ldd	r24, Y+2	; 0x02
    5b28:	88 23       	and	r24, r24
    5b2a:	39 f4       	brne	.+14     	; 0x5b3a <user_Set_LED+0x74>
    5b2c:	83 e0       	ldi	r24, 0x03	; 3
    5b2e:	63 e0       	ldi	r22, 0x03	; 3
    5b30:	46 e0       	ldi	r20, 0x06	; 6
    5b32:	50 e0       	ldi	r21, 0x00	; 0
    5b34:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
            else setPinMode(MODE_LOW, LED_2_PORT, LED_2_PIN);
            break;
    5b38:	3a c0       	rjmp	.+116    	; 0x5bae <user_Set_LED+0xe8>
            if (!state) setPinMode(MODE_HIGH, LED_1_PORT, LED_1_PIN);
            else setPinMode(MODE_LOW, LED_1_PORT, LED_1_PIN);
            break;
        case LED_STOP:
            if (!state) setPinMode(MODE_HIGH, LED_2_PORT, LED_2_PIN);
            else setPinMode(MODE_LOW, LED_2_PORT, LED_2_PIN);
    5b3a:	82 e0       	ldi	r24, 0x02	; 2
    5b3c:	63 e0       	ldi	r22, 0x03	; 3
    5b3e:	46 e0       	ldi	r20, 0x06	; 6
    5b40:	50 e0       	ldi	r21, 0x00	; 0
    5b42:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
            break;
    5b46:	33 c0       	rjmp	.+102    	; 0x5bae <user_Set_LED+0xe8>
        case LED_START:
            if (!state) setPinMode(MODE_HIGH, LED_3_PORT, LED_3_PIN);
    5b48:	8a 81       	ldd	r24, Y+2	; 0x02
    5b4a:	88 23       	and	r24, r24
    5b4c:	39 f4       	brne	.+14     	; 0x5b5c <user_Set_LED+0x96>
    5b4e:	83 e0       	ldi	r24, 0x03	; 3
    5b50:	63 e0       	ldi	r22, 0x03	; 3
    5b52:	45 e0       	ldi	r20, 0x05	; 5
    5b54:	50 e0       	ldi	r21, 0x00	; 0
    5b56:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
            else setPinMode(MODE_LOW, LED_3_PORT, LED_3_PIN);
            break;
    5b5a:	29 c0       	rjmp	.+82     	; 0x5bae <user_Set_LED+0xe8>
            if (!state) setPinMode(MODE_HIGH, LED_2_PORT, LED_2_PIN);
            else setPinMode(MODE_LOW, LED_2_PORT, LED_2_PIN);
            break;
        case LED_START:
            if (!state) setPinMode(MODE_HIGH, LED_3_PORT, LED_3_PIN);
            else setPinMode(MODE_LOW, LED_3_PORT, LED_3_PIN);
    5b5c:	82 e0       	ldi	r24, 0x02	; 2
    5b5e:	63 e0       	ldi	r22, 0x03	; 3
    5b60:	45 e0       	ldi	r20, 0x05	; 5
    5b62:	50 e0       	ldi	r21, 0x00	; 0
    5b64:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
            break;
    5b68:	22 c0       	rjmp	.+68     	; 0x5bae <user_Set_LED+0xe8>
        case LED_POWER:
            if (!state) setPinMode(MODE_HIGH, LED_POWER_PORT, LED_POWER_PIN);
    5b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b6c:	88 23       	and	r24, r24
    5b6e:	39 f4       	brne	.+14     	; 0x5b7e <user_Set_LED+0xb8>
    5b70:	83 e0       	ldi	r24, 0x03	; 3
    5b72:	63 e0       	ldi	r22, 0x03	; 3
    5b74:	44 e0       	ldi	r20, 0x04	; 4
    5b76:	50 e0       	ldi	r21, 0x00	; 0
    5b78:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
            else setPinMode(MODE_LOW, LED_POWER_PORT, LED_POWER_PIN);
            break;
    5b7c:	18 c0       	rjmp	.+48     	; 0x5bae <user_Set_LED+0xe8>
            if (!state) setPinMode(MODE_HIGH, LED_3_PORT, LED_3_PIN);
            else setPinMode(MODE_LOW, LED_3_PORT, LED_3_PIN);
            break;
        case LED_POWER:
            if (!state) setPinMode(MODE_HIGH, LED_POWER_PORT, LED_POWER_PIN);
            else setPinMode(MODE_LOW, LED_POWER_PORT, LED_POWER_PIN);
    5b7e:	82 e0       	ldi	r24, 0x02	; 2
    5b80:	63 e0       	ldi	r22, 0x03	; 3
    5b82:	44 e0       	ldi	r20, 0x04	; 4
    5b84:	50 e0       	ldi	r21, 0x00	; 0
    5b86:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
            break;
    5b8a:	11 c0       	rjmp	.+34     	; 0x5bae <user_Set_LED+0xe8>
        case LED_GPS:
            if (!state) setPinMode(MODE_HIGH, LED_GPS_PORT, LED_GPS_PIN);
    5b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b8e:	88 23       	and	r24, r24
    5b90:	39 f4       	brne	.+14     	; 0x5ba0 <user_Set_LED+0xda>
    5b92:	83 e0       	ldi	r24, 0x03	; 3
    5b94:	63 e0       	ldi	r22, 0x03	; 3
    5b96:	47 e0       	ldi	r20, 0x07	; 7
    5b98:	50 e0       	ldi	r21, 0x00	; 0
    5b9a:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
            else setPinMode(MODE_LOW, LED_GPS_PORT, LED_GPS_PIN);
            break;
    5b9e:	07 c0       	rjmp	.+14     	; 0x5bae <user_Set_LED+0xe8>
            if (!state) setPinMode(MODE_HIGH, LED_POWER_PORT, LED_POWER_PIN);
            else setPinMode(MODE_LOW, LED_POWER_PORT, LED_POWER_PIN);
            break;
        case LED_GPS:
            if (!state) setPinMode(MODE_HIGH, LED_GPS_PORT, LED_GPS_PIN);
            else setPinMode(MODE_LOW, LED_GPS_PORT, LED_GPS_PIN);
    5ba0:	82 e0       	ldi	r24, 0x02	; 2
    5ba2:	63 e0       	ldi	r22, 0x03	; 3
    5ba4:	47 e0       	ldi	r20, 0x07	; 7
    5ba6:	50 e0       	ldi	r21, 0x00	; 0
    5ba8:	0e 94 ae 10 	call	0x215c	; 0x215c <setPinMode>
            break;
    5bac:	00 00       	nop

    }
}
    5bae:	0f 90       	pop	r0
    5bb0:	0f 90       	pop	r0
    5bb2:	cf 91       	pop	r28
    5bb4:	df 91       	pop	r29
    5bb6:	08 95       	ret

00005bb8 <user_Toggle_LED>:
 * Toggles the given LED.
 *
 * @param num LED to toggle.
 */
void user_Toggle_LED(char num)
{
    5bb8:	df 93       	push	r29
    5bba:	cf 93       	push	r28
    5bbc:	0f 92       	push	r0
    5bbe:	cd b7       	in	r28, 0x3d	; 61
    5bc0:	de b7       	in	r29, 0x3e	; 62
    5bc2:	89 83       	std	Y+1, r24	; 0x01
    switch (num)
    5bc4:	89 81       	ldd	r24, Y+1	; 0x01
    5bc6:	88 2f       	mov	r24, r24
    5bc8:	90 e0       	ldi	r25, 0x00	; 0
    5bca:	83 30       	cpi	r24, 0x03	; 3
    5bcc:	91 05       	cpc	r25, r1
    5bce:	e9 f0       	breq	.+58     	; 0x5c0a <user_Toggle_LED+0x52>
    5bd0:	84 30       	cpi	r24, 0x04	; 4
    5bd2:	91 05       	cpc	r25, r1
    5bd4:	3c f4       	brge	.+14     	; 0x5be4 <user_Toggle_LED+0x2c>
    5bd6:	81 30       	cpi	r24, 0x01	; 1
    5bd8:	91 05       	cpc	r25, r1
    5bda:	59 f0       	breq	.+22     	; 0x5bf2 <user_Toggle_LED+0x3a>
    5bdc:	82 30       	cpi	r24, 0x02	; 2
    5bde:	91 05       	cpc	r25, r1
    5be0:	71 f0       	breq	.+28     	; 0x5bfe <user_Toggle_LED+0x46>
    5be2:	25 c0       	rjmp	.+74     	; 0x5c2e <user_Toggle_LED+0x76>
    5be4:	84 30       	cpi	r24, 0x04	; 4
    5be6:	91 05       	cpc	r25, r1
    5be8:	b1 f0       	breq	.+44     	; 0x5c16 <user_Toggle_LED+0x5e>
    5bea:	85 30       	cpi	r24, 0x05	; 5
    5bec:	91 05       	cpc	r25, r1
    5bee:	c9 f0       	breq	.+50     	; 0x5c22 <user_Toggle_LED+0x6a>
    5bf0:	1e c0       	rjmp	.+60     	; 0x5c2e <user_Toggle_LED+0x76>
    {
        case LED_CLEAR:
            togglePinOutput(LED_1_PORT, LED_1_PIN);
    5bf2:	82 e0       	ldi	r24, 0x02	; 2
    5bf4:	63 e0       	ldi	r22, 0x03	; 3
    5bf6:	70 e0       	ldi	r23, 0x00	; 0
    5bf8:	0e 94 dd 13 	call	0x27ba	; 0x27ba <togglePinOutput>
            break;
    5bfc:	18 c0       	rjmp	.+48     	; 0x5c2e <user_Toggle_LED+0x76>
        case LED_STOP:
            togglePinOutput(LED_2_PORT, LED_2_PIN);
    5bfe:	83 e0       	ldi	r24, 0x03	; 3
    5c00:	66 e0       	ldi	r22, 0x06	; 6
    5c02:	70 e0       	ldi	r23, 0x00	; 0
    5c04:	0e 94 dd 13 	call	0x27ba	; 0x27ba <togglePinOutput>
            break;
    5c08:	12 c0       	rjmp	.+36     	; 0x5c2e <user_Toggle_LED+0x76>
        case LED_START:
            togglePinOutput(LED_3_PORT, LED_3_PIN);
    5c0a:	83 e0       	ldi	r24, 0x03	; 3
    5c0c:	65 e0       	ldi	r22, 0x05	; 5
    5c0e:	70 e0       	ldi	r23, 0x00	; 0
    5c10:	0e 94 dd 13 	call	0x27ba	; 0x27ba <togglePinOutput>
            break;
    5c14:	0c c0       	rjmp	.+24     	; 0x5c2e <user_Toggle_LED+0x76>
        case LED_POWER:
            togglePinOutput(LED_POWER_PORT, LED_POWER_PIN);
    5c16:	83 e0       	ldi	r24, 0x03	; 3
    5c18:	64 e0       	ldi	r22, 0x04	; 4
    5c1a:	70 e0       	ldi	r23, 0x00	; 0
    5c1c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <togglePinOutput>
            break;
    5c20:	06 c0       	rjmp	.+12     	; 0x5c2e <user_Toggle_LED+0x76>
        case LED_GPS:
            togglePinOutput(LED_GPS_PORT, LED_GPS_PIN);
    5c22:	83 e0       	ldi	r24, 0x03	; 3
    5c24:	67 e0       	ldi	r22, 0x07	; 7
    5c26:	70 e0       	ldi	r23, 0x00	; 0
    5c28:	0e 94 dd 13 	call	0x27ba	; 0x27ba <togglePinOutput>
            break;
    5c2c:	00 00       	nop
    }
}
    5c2e:	0f 90       	pop	r0
    5c30:	cf 91       	pop	r28
    5c32:	df 91       	pop	r29
    5c34:	08 95       	ret

00005c36 <user_Handle_Buttons>:
 * clear button implementation.
 *
 * @param runData Address of the runData structure.
 */
void user_Handle_Buttons(RunData *runData)
{
    5c36:	df 93       	push	r29
    5c38:	cf 93       	push	r28
    5c3a:	00 d0       	rcall	.+0      	; 0x5c3c <user_Handle_Buttons+0x6>
    5c3c:	00 d0       	rcall	.+0      	; 0x5c3e <user_Handle_Buttons+0x8>
    5c3e:	cd b7       	in	r28, 0x3d	; 61
    5c40:	de b7       	in	r29, 0x3e	; 62
    5c42:	9c 83       	std	Y+4, r25	; 0x04
    5c44:	8b 83       	std	Y+3, r24	; 0x03
    static unsigned int buttonTimer[3] = {0, 0, 0};
    static unsigned int buttonLastTime[3] = {0, 0, 0};
    int i;

    if (user_Get_Button(BUTTON_CLEAR))
    5c46:	81 e0       	ldi	r24, 0x01	; 1
    5c48:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <user_Get_Button>
    5c4c:	88 23       	and	r24, r24
    5c4e:	c1 f1       	breq	.+112    	; 0x5cc0 <user_Handle_Buttons+0x8a>
    {
        user_Set_LED(LED_CLEAR, ON);
    5c50:	81 e0       	ldi	r24, 0x01	; 1
    5c52:	61 e0       	ldi	r22, 0x01	; 1
    5c54:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <user_Set_LED>
        runData->liveData = false;
    5c58:	8b 81       	ldd	r24, Y+3	; 0x03
    5c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    5c5c:	fc 01       	movw	r30, r24
    5c5e:	11 82       	std	Z+1, r1	; 0x01

        if (timer_Job_Ready4(&buttonTimer[BUTTON_CLEAR - 1], 3000, &buttonLastTime[BUTTON_CLEAR - 1], false))
    5c60:	81 e7       	ldi	r24, 0x71	; 113
    5c62:	93 e0       	ldi	r25, 0x03	; 3
    5c64:	27 e7       	ldi	r18, 0x77	; 119
    5c66:	33 e0       	ldi	r19, 0x03	; 3
    5c68:	68 eb       	ldi	r22, 0xB8	; 184
    5c6a:	7b e0       	ldi	r23, 0x0B	; 11
    5c6c:	a9 01       	movw	r20, r18
    5c6e:	20 e0       	ldi	r18, 0x00	; 0
    5c70:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <timer_Job_Ready4>
    5c74:	88 23       	and	r24, r24
    5c76:	09 f4       	brne	.+2      	; 0x5c7a <user_Handle_Buttons+0x44>
    5c78:	4a c0       	rjmp	.+148    	; 0x5d0e <user_Handle_Buttons+0xd8>
        {
            runData->record = false;
    5c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    5c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    5c7e:	fc 01       	movw	r30, r24
    5c80:	10 82       	st	Z, r1
            user_Set_LED(LED_STOP, ON);
    5c82:	82 e0       	ldi	r24, 0x02	; 2
    5c84:	61 e0       	ldi	r22, 0x01	; 1
    5c86:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <user_Set_LED>
            user_Set_LED(LED_START, OFF);
    5c8a:	83 e0       	ldi	r24, 0x03	; 3
    5c8c:	60 e0       	ldi	r22, 0x00	; 0
    5c8e:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <user_Set_LED>
            data_Clear();
    5c92:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <data_Clear>

            for (i = 0; i < 50; i++)
    5c96:	1a 82       	std	Y+2, r1	; 0x02
    5c98:	19 82       	std	Y+1, r1	; 0x01
    5c9a:	0c c0       	rjmp	.+24     	; 0x5cb4 <user_Handle_Buttons+0x7e>
            {
                timer_Wait_MS(50);
    5c9c:	82 e3       	ldi	r24, 0x32	; 50
    5c9e:	90 e0       	ldi	r25, 0x00	; 0
    5ca0:	0e 94 02 26 	call	0x4c04	; 0x4c04 <timer_Wait_MS>
                user_Toggle_LED(LED_CLEAR);
    5ca4:	81 e0       	ldi	r24, 0x01	; 1
    5ca6:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <user_Toggle_LED>
            runData->record = false;
            user_Set_LED(LED_STOP, ON);
            user_Set_LED(LED_START, OFF);
            data_Clear();

            for (i = 0; i < 50; i++)
    5caa:	89 81       	ldd	r24, Y+1	; 0x01
    5cac:	9a 81       	ldd	r25, Y+2	; 0x02
    5cae:	01 96       	adiw	r24, 0x01	; 1
    5cb0:	9a 83       	std	Y+2, r25	; 0x02
    5cb2:	89 83       	std	Y+1, r24	; 0x01
    5cb4:	89 81       	ldd	r24, Y+1	; 0x01
    5cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    5cb8:	82 33       	cpi	r24, 0x32	; 50
    5cba:	91 05       	cpc	r25, r1
    5cbc:	7c f3       	brlt	.-34     	; 0x5c9c <user_Handle_Buttons+0x66>
    5cbe:	27 c0       	rjmp	.+78     	; 0x5d0e <user_Handle_Buttons+0xd8>
            }
        }
    }
    else
    {
        if ((runData->record || runData->liveData) && 
    5cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    5cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    5cc4:	fc 01       	movw	r30, r24
    5cc6:	80 81       	ld	r24, Z
    5cc8:	88 23       	and	r24, r24
    5cca:	31 f4       	brne	.+12     	; 0x5cd8 <user_Handle_Buttons+0xa2>
    5ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    5cce:	9c 81       	ldd	r25, Y+4	; 0x04
    5cd0:	fc 01       	movw	r30, r24
    5cd2:	81 81       	ldd	r24, Z+1	; 0x01
    5cd4:	88 23       	and	r24, r24
    5cd6:	99 f0       	breq	.+38     	; 0x5cfe <user_Handle_Buttons+0xc8>
            (runData->recordTimer > runData->recordPeriod - 5))
    5cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    5cda:	9c 81       	ldd	r25, Y+4	; 0x04
    5cdc:	fc 01       	movw	r30, r24
    5cde:	24 81       	ldd	r18, Z+4	; 0x04
    5ce0:	35 81       	ldd	r19, Z+5	; 0x05
    5ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    5ce6:	fc 01       	movw	r30, r24
    5ce8:	82 81       	ldd	r24, Z+2	; 0x02
    5cea:	93 81       	ldd	r25, Z+3	; 0x03
    5cec:	05 97       	sbiw	r24, 0x05	; 5
            }
        }
    }
    else
    {
        if ((runData->record || runData->liveData) && 
    5cee:	82 17       	cp	r24, r18
    5cf0:	93 07       	cpc	r25, r19
    5cf2:	28 f4       	brcc	.+10     	; 0x5cfe <user_Handle_Buttons+0xc8>
            (runData->recordTimer > runData->recordPeriod - 5))
        {
            user_Set_LED(BUTTON_CLEAR, ON);
    5cf4:	81 e0       	ldi	r24, 0x01	; 1
    5cf6:	61 e0       	ldi	r22, 0x01	; 1
    5cf8:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <user_Set_LED>
    5cfc:	04 c0       	rjmp	.+8      	; 0x5d06 <user_Handle_Buttons+0xd0>
        }
        else
        {
            user_Set_LED(BUTTON_CLEAR, OFF);
    5cfe:	81 e0       	ldi	r24, 0x01	; 1
    5d00:	60 e0       	ldi	r22, 0x00	; 0
    5d02:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <user_Set_LED>
        }
        buttonTimer[BUTTON_CLEAR - 1] = 0;
    5d06:	10 92 72 03 	sts	0x0372, r1
    5d0a:	10 92 71 03 	sts	0x0371, r1
    }

    if (user_Get_Button(BUTTON_START))
    5d0e:	83 e0       	ldi	r24, 0x03	; 3
    5d10:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <user_Get_Button>
    5d14:	88 23       	and	r24, r24
    5d16:	49 f0       	breq	.+18     	; 0x5d2a <user_Handle_Buttons+0xf4>
    {
        runData->record = true;
    5d18:	8b 81       	ldd	r24, Y+3	; 0x03
    5d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    5d1c:	21 e0       	ldi	r18, 0x01	; 1
    5d1e:	fc 01       	movw	r30, r24
    5d20:	20 83       	st	Z, r18
        runData->liveData = false;
    5d22:	8b 81       	ldd	r24, Y+3	; 0x03
    5d24:	9c 81       	ldd	r25, Y+4	; 0x04
    5d26:	fc 01       	movw	r30, r24
    5d28:	11 82       	std	Z+1, r1	; 0x01
		// temp
		//gsm_modem_Init();
		//gsm_modem_On();
    }

    if (user_Get_Button(BUTTON_STOP))
    5d2a:	82 e0       	ldi	r24, 0x02	; 2
    5d2c:	0e 94 19 2d 	call	0x5a32	; 0x5a32 <user_Get_Button>
    5d30:	88 23       	and	r24, r24
    5d32:	41 f0       	breq	.+16     	; 0x5d44 <user_Handle_Buttons+0x10e>
    {
        runData->record = false;
    5d34:	8b 81       	ldd	r24, Y+3	; 0x03
    5d36:	9c 81       	ldd	r25, Y+4	; 0x04
    5d38:	fc 01       	movw	r30, r24
    5d3a:	10 82       	st	Z, r1
        runData->liveData = false;
    5d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    5d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    5d40:	fc 01       	movw	r30, r24
    5d42:	11 82       	std	Z+1, r1	; 0x01
    }

    if (runData->record || runData->liveData)
    5d44:	8b 81       	ldd	r24, Y+3	; 0x03
    5d46:	9c 81       	ldd	r25, Y+4	; 0x04
    5d48:	fc 01       	movw	r30, r24
    5d4a:	80 81       	ld	r24, Z
    5d4c:	88 23       	and	r24, r24
    5d4e:	31 f4       	brne	.+12     	; 0x5d5c <user_Handle_Buttons+0x126>
    5d50:	8b 81       	ldd	r24, Y+3	; 0x03
    5d52:	9c 81       	ldd	r25, Y+4	; 0x04
    5d54:	fc 01       	movw	r30, r24
    5d56:	81 81       	ldd	r24, Z+1	; 0x01
    5d58:	88 23       	and	r24, r24
    5d5a:	49 f0       	breq	.+18     	; 0x5d6e <user_Handle_Buttons+0x138>
    {
        user_Set_LED(LED_START, ON);
    5d5c:	83 e0       	ldi	r24, 0x03	; 3
    5d5e:	61 e0       	ldi	r22, 0x01	; 1
    5d60:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <user_Set_LED>
        user_Set_LED(LED_STOP, OFF);
    5d64:	82 e0       	ldi	r24, 0x02	; 2
    5d66:	60 e0       	ldi	r22, 0x00	; 0
    5d68:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <user_Set_LED>
    5d6c:	08 c0       	rjmp	.+16     	; 0x5d7e <user_Handle_Buttons+0x148>
    }
    else
    {
        user_Set_LED(LED_STOP, ON);
    5d6e:	82 e0       	ldi	r24, 0x02	; 2
    5d70:	61 e0       	ldi	r22, 0x01	; 1
    5d72:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <user_Set_LED>
        user_Set_LED(LED_START, OFF);
    5d76:	83 e0       	ldi	r24, 0x03	; 3
    5d78:	60 e0       	ldi	r22, 0x00	; 0
    5d7a:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <user_Set_LED>
    }
}
    5d7e:	0f 90       	pop	r0
    5d80:	0f 90       	pop	r0
    5d82:	0f 90       	pop	r0
    5d84:	0f 90       	pop	r0
    5d86:	cf 91       	pop	r28
    5d88:	df 91       	pop	r29
    5d8a:	08 95       	ret

00005d8c <__ashldi3>:
    5d8c:	0f 93       	push	r16
    5d8e:	df 93       	push	r29
    5d90:	cf 93       	push	r28
    5d92:	cd b7       	in	r28, 0x3d	; 61
    5d94:	de b7       	in	r29, 0x3e	; 62
    5d96:	60 97       	sbiw	r28, 0x10	; 16
    5d98:	0f b6       	in	r0, 0x3f	; 63
    5d9a:	f8 94       	cli
    5d9c:	de bf       	out	0x3e, r29	; 62
    5d9e:	0f be       	out	0x3f, r0	; 63
    5da0:	cd bf       	out	0x3d, r28	; 61
    5da2:	00 23       	and	r16, r16
    5da4:	09 f4       	brne	.+2      	; 0x5da8 <__ashldi3+0x1c>
    5da6:	59 c0       	rjmp	.+178    	; 0x5e5a <__ashldi3+0xce>
    5da8:	29 83       	std	Y+1, r18	; 0x01
    5daa:	3a 83       	std	Y+2, r19	; 0x02
    5dac:	4b 83       	std	Y+3, r20	; 0x03
    5dae:	5c 83       	std	Y+4, r21	; 0x04
    5db0:	6d 83       	std	Y+5, r22	; 0x05
    5db2:	7e 83       	std	Y+6, r23	; 0x06
    5db4:	8f 83       	std	Y+7, r24	; 0x07
    5db6:	98 87       	std	Y+8, r25	; 0x08
    5db8:	e0 e2       	ldi	r30, 0x20	; 32
    5dba:	e0 1b       	sub	r30, r16
    5dbc:	29 81       	ldd	r18, Y+1	; 0x01
    5dbe:	3a 81       	ldd	r19, Y+2	; 0x02
    5dc0:	4b 81       	ldd	r20, Y+3	; 0x03
    5dc2:	5c 81       	ldd	r21, Y+4	; 0x04
    5dc4:	1e 16       	cp	r1, r30
    5dc6:	bc f0       	brlt	.+46     	; 0x5df6 <__ashldi3+0x6a>
    5dc8:	19 86       	std	Y+9, r1	; 0x09
    5dca:	1a 86       	std	Y+10, r1	; 0x0a
    5dcc:	1b 86       	std	Y+11, r1	; 0x0b
    5dce:	1c 86       	std	Y+12, r1	; 0x0c
    5dd0:	8e 2f       	mov	r24, r30
    5dd2:	99 27       	eor	r25, r25
    5dd4:	87 fd       	sbrc	r24, 7
    5dd6:	90 95       	com	r25
    5dd8:	90 95       	com	r25
    5dda:	81 95       	neg	r24
    5ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    5dde:	04 c0       	rjmp	.+8      	; 0x5de8 <__ashldi3+0x5c>
    5de0:	22 0f       	add	r18, r18
    5de2:	33 1f       	adc	r19, r19
    5de4:	44 1f       	adc	r20, r20
    5de6:	55 1f       	adc	r21, r21
    5de8:	8a 95       	dec	r24
    5dea:	d2 f7       	brpl	.-12     	; 0x5de0 <__ashldi3+0x54>
    5dec:	2d 87       	std	Y+13, r18	; 0x0d
    5dee:	3e 87       	std	Y+14, r19	; 0x0e
    5df0:	4f 87       	std	Y+15, r20	; 0x0f
    5df2:	58 8b       	std	Y+16, r21	; 0x10
    5df4:	2a c0       	rjmp	.+84     	; 0x5e4a <__ashldi3+0xbe>
    5df6:	ca 01       	movw	r24, r20
    5df8:	b9 01       	movw	r22, r18
    5dfa:	00 2e       	mov	r0, r16
    5dfc:	04 c0       	rjmp	.+8      	; 0x5e06 <__ashldi3+0x7a>
    5dfe:	66 0f       	add	r22, r22
    5e00:	77 1f       	adc	r23, r23
    5e02:	88 1f       	adc	r24, r24
    5e04:	99 1f       	adc	r25, r25
    5e06:	0a 94       	dec	r0
    5e08:	d2 f7       	brpl	.-12     	; 0x5dfe <__ashldi3+0x72>
    5e0a:	69 87       	std	Y+9, r22	; 0x09
    5e0c:	7a 87       	std	Y+10, r23	; 0x0a
    5e0e:	8b 87       	std	Y+11, r24	; 0x0b
    5e10:	9c 87       	std	Y+12, r25	; 0x0c
    5e12:	da 01       	movw	r26, r20
    5e14:	c9 01       	movw	r24, r18
    5e16:	04 c0       	rjmp	.+8      	; 0x5e20 <__ashldi3+0x94>
    5e18:	b6 95       	lsr	r27
    5e1a:	a7 95       	ror	r26
    5e1c:	97 95       	ror	r25
    5e1e:	87 95       	ror	r24
    5e20:	ea 95       	dec	r30
    5e22:	d2 f7       	brpl	.-12     	; 0x5e18 <__ashldi3+0x8c>
    5e24:	2d 81       	ldd	r18, Y+5	; 0x05
    5e26:	3e 81       	ldd	r19, Y+6	; 0x06
    5e28:	4f 81       	ldd	r20, Y+7	; 0x07
    5e2a:	58 85       	ldd	r21, Y+8	; 0x08
    5e2c:	04 c0       	rjmp	.+8      	; 0x5e36 <__ashldi3+0xaa>
    5e2e:	22 0f       	add	r18, r18
    5e30:	33 1f       	adc	r19, r19
    5e32:	44 1f       	adc	r20, r20
    5e34:	55 1f       	adc	r21, r21
    5e36:	0a 95       	dec	r16
    5e38:	d2 f7       	brpl	.-12     	; 0x5e2e <__ashldi3+0xa2>
    5e3a:	82 2b       	or	r24, r18
    5e3c:	93 2b       	or	r25, r19
    5e3e:	a4 2b       	or	r26, r20
    5e40:	b5 2b       	or	r27, r21
    5e42:	8d 87       	std	Y+13, r24	; 0x0d
    5e44:	9e 87       	std	Y+14, r25	; 0x0e
    5e46:	af 87       	std	Y+15, r26	; 0x0f
    5e48:	b8 8b       	std	Y+16, r27	; 0x10
    5e4a:	29 85       	ldd	r18, Y+9	; 0x09
    5e4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    5e4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5e50:	5c 85       	ldd	r21, Y+12	; 0x0c
    5e52:	6d 85       	ldd	r22, Y+13	; 0x0d
    5e54:	7e 85       	ldd	r23, Y+14	; 0x0e
    5e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e58:	98 89       	ldd	r25, Y+16	; 0x10
    5e5a:	60 96       	adiw	r28, 0x10	; 16
    5e5c:	0f b6       	in	r0, 0x3f	; 63
    5e5e:	f8 94       	cli
    5e60:	de bf       	out	0x3e, r29	; 62
    5e62:	0f be       	out	0x3f, r0	; 63
    5e64:	cd bf       	out	0x3d, r28	; 61
    5e66:	cf 91       	pop	r28
    5e68:	df 91       	pop	r29
    5e6a:	0f 91       	pop	r16
    5e6c:	08 95       	ret

00005e6e <__divdi3>:
    5e6e:	ac e4       	ldi	r26, 0x4C	; 76
    5e70:	b0 e0       	ldi	r27, 0x00	; 0
    5e72:	ed e3       	ldi	r30, 0x3D	; 61
    5e74:	ff e2       	ldi	r31, 0x2F	; 47
    5e76:	0c 94 72 3f 	jmp	0x7ee4	; 0x7ee4 <__prologue_saves__>
    5e7a:	f5 01       	movw	r30, r10
    5e7c:	29 83       	std	Y+1, r18	; 0x01
    5e7e:	3a 83       	std	Y+2, r19	; 0x02
    5e80:	4b 83       	std	Y+3, r20	; 0x03
    5e82:	5c 83       	std	Y+4, r21	; 0x04
    5e84:	6d 83       	std	Y+5, r22	; 0x05
    5e86:	7e 83       	std	Y+6, r23	; 0x06
    5e88:	8f 83       	std	Y+7, r24	; 0x07
    5e8a:	98 87       	std	Y+8, r25	; 0x08
    5e8c:	a9 86       	std	Y+9, r10	; 0x09
    5e8e:	fa 87       	std	Y+10, r31	; 0x0a
    5e90:	cb 86       	std	Y+11, r12	; 0x0b
    5e92:	dc 86       	std	Y+12, r13	; 0x0c
    5e94:	ed 86       	std	Y+13, r14	; 0x0d
    5e96:	fe 86       	std	Y+14, r15	; 0x0e
    5e98:	0f 87       	std	Y+15, r16	; 0x0f
    5e9a:	18 8b       	std	Y+16, r17	; 0x10
    5e9c:	8d 80       	ldd	r8, Y+5	; 0x05
    5e9e:	9e 80       	ldd	r9, Y+6	; 0x06
    5ea0:	af 80       	ldd	r10, Y+7	; 0x07
    5ea2:	b8 84       	ldd	r11, Y+8	; 0x08
    5ea4:	b7 fe       	sbrs	r11, 7
    5ea6:	67 c0       	rjmp	.+206    	; 0x5f76 <__divdi3+0x108>
    5ea8:	21 95       	neg	r18
    5eaa:	b1 e0       	ldi	r27, 0x01	; 1
    5eac:	12 16       	cp	r1, r18
    5eae:	08 f0       	brcs	.+2      	; 0x5eb2 <__divdi3+0x44>
    5eb0:	b0 e0       	ldi	r27, 0x00	; 0
    5eb2:	31 95       	neg	r19
    5eb4:	a1 e0       	ldi	r26, 0x01	; 1
    5eb6:	13 16       	cp	r1, r19
    5eb8:	08 f0       	brcs	.+2      	; 0x5ebc <__divdi3+0x4e>
    5eba:	a0 e0       	ldi	r26, 0x00	; 0
    5ebc:	23 2e       	mov	r2, r19
    5ebe:	2b 1a       	sub	r2, r27
    5ec0:	b2 2d       	mov	r27, r2
    5ec2:	bb 24       	eor	r11, r11
    5ec4:	b3 94       	inc	r11
    5ec6:	32 15       	cp	r19, r2
    5ec8:	08 f0       	brcs	.+2      	; 0x5ecc <__divdi3+0x5e>
    5eca:	bb 24       	eor	r11, r11
    5ecc:	ab 29       	or	r26, r11
    5ece:	41 95       	neg	r20
    5ed0:	31 e0       	ldi	r19, 0x01	; 1
    5ed2:	14 16       	cp	r1, r20
    5ed4:	08 f0       	brcs	.+2      	; 0x5ed8 <__divdi3+0x6a>
    5ed6:	30 e0       	ldi	r19, 0x00	; 0
    5ed8:	34 2e       	mov	r3, r20
    5eda:	3a 1a       	sub	r3, r26
    5edc:	a3 2d       	mov	r26, r3
    5ede:	bb 24       	eor	r11, r11
    5ee0:	b3 94       	inc	r11
    5ee2:	43 15       	cp	r20, r3
    5ee4:	08 f0       	brcs	.+2      	; 0x5ee8 <__divdi3+0x7a>
    5ee6:	bb 24       	eor	r11, r11
    5ee8:	3b 29       	or	r19, r11
    5eea:	51 95       	neg	r21
    5eec:	41 e0       	ldi	r20, 0x01	; 1
    5eee:	15 16       	cp	r1, r21
    5ef0:	08 f0       	brcs	.+2      	; 0x5ef4 <__divdi3+0x86>
    5ef2:	40 e0       	ldi	r20, 0x00	; 0
    5ef4:	a5 2e       	mov	r10, r21
    5ef6:	a3 1a       	sub	r10, r19
    5ef8:	31 e0       	ldi	r19, 0x01	; 1
    5efa:	5a 15       	cp	r21, r10
    5efc:	08 f0       	brcs	.+2      	; 0x5f00 <__divdi3+0x92>
    5efe:	30 e0       	ldi	r19, 0x00	; 0
    5f00:	43 2b       	or	r20, r19
    5f02:	61 95       	neg	r22
    5f04:	31 e0       	ldi	r19, 0x01	; 1
    5f06:	16 16       	cp	r1, r22
    5f08:	08 f0       	brcs	.+2      	; 0x5f0c <__divdi3+0x9e>
    5f0a:	30 e0       	ldi	r19, 0x00	; 0
    5f0c:	b6 2e       	mov	r11, r22
    5f0e:	b4 1a       	sub	r11, r20
    5f10:	41 e0       	ldi	r20, 0x01	; 1
    5f12:	6b 15       	cp	r22, r11
    5f14:	08 f0       	brcs	.+2      	; 0x5f18 <__divdi3+0xaa>
    5f16:	40 e0       	ldi	r20, 0x00	; 0
    5f18:	34 2b       	or	r19, r20
    5f1a:	71 95       	neg	r23
    5f1c:	41 e0       	ldi	r20, 0x01	; 1
    5f1e:	17 16       	cp	r1, r23
    5f20:	08 f0       	brcs	.+2      	; 0x5f24 <__divdi3+0xb6>
    5f22:	40 e0       	ldi	r20, 0x00	; 0
    5f24:	57 2f       	mov	r21, r23
    5f26:	53 1b       	sub	r21, r19
    5f28:	31 e0       	ldi	r19, 0x01	; 1
    5f2a:	75 17       	cp	r23, r21
    5f2c:	08 f0       	brcs	.+2      	; 0x5f30 <__divdi3+0xc2>
    5f2e:	30 e0       	ldi	r19, 0x00	; 0
    5f30:	43 2b       	or	r20, r19
    5f32:	81 95       	neg	r24
    5f34:	31 e0       	ldi	r19, 0x01	; 1
    5f36:	18 16       	cp	r1, r24
    5f38:	08 f0       	brcs	.+2      	; 0x5f3c <__divdi3+0xce>
    5f3a:	30 e0       	ldi	r19, 0x00	; 0
    5f3c:	48 2e       	mov	r4, r24
    5f3e:	44 1a       	sub	r4, r20
    5f40:	44 2d       	mov	r20, r4
    5f42:	61 e0       	ldi	r22, 0x01	; 1
    5f44:	84 15       	cp	r24, r4
    5f46:	08 f0       	brcs	.+2      	; 0x5f4a <__divdi3+0xdc>
    5f48:	60 e0       	ldi	r22, 0x00	; 0
    5f4a:	36 2b       	or	r19, r22
    5f4c:	91 95       	neg	r25
    5f4e:	93 1b       	sub	r25, r19
    5f50:	29 83       	std	Y+1, r18	; 0x01
    5f52:	ba 83       	std	Y+2, r27	; 0x02
    5f54:	ab 83       	std	Y+3, r26	; 0x03
    5f56:	ac 82       	std	Y+4, r10	; 0x04
    5f58:	bd 82       	std	Y+5, r11	; 0x05
    5f5a:	5e 83       	std	Y+6, r21	; 0x06
    5f5c:	4f 83       	std	Y+7, r20	; 0x07
    5f5e:	98 87       	std	Y+8, r25	; 0x08
    5f60:	2f ef       	ldi	r18, 0xFF	; 255
    5f62:	3f ef       	ldi	r19, 0xFF	; 255
    5f64:	4f ef       	ldi	r20, 0xFF	; 255
    5f66:	5f ef       	ldi	r21, 0xFF	; 255
    5f68:	21 96       	adiw	r28, 0x01	; 1
    5f6a:	2c af       	std	Y+60, r18	; 0x3c
    5f6c:	3d af       	std	Y+61, r19	; 0x3d
    5f6e:	4e af       	std	Y+62, r20	; 0x3e
    5f70:	5f af       	std	Y+63, r21	; 0x3f
    5f72:	21 97       	sbiw	r28, 0x01	; 1
    5f74:	06 c0       	rjmp	.+12     	; 0x5f82 <__divdi3+0x114>
    5f76:	21 96       	adiw	r28, 0x01	; 1
    5f78:	1c ae       	std	Y+60, r1	; 0x3c
    5f7a:	1d ae       	std	Y+61, r1	; 0x3d
    5f7c:	1e ae       	std	Y+62, r1	; 0x3e
    5f7e:	1f ae       	std	Y+63, r1	; 0x3f
    5f80:	21 97       	sbiw	r28, 0x01	; 1
    5f82:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f84:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f86:	af 85       	ldd	r26, Y+15	; 0x0f
    5f88:	b8 89       	ldd	r27, Y+16	; 0x10
    5f8a:	b7 ff       	sbrs	r27, 7
    5f8c:	68 c0       	rjmp	.+208    	; 0x605e <__divdi3+0x1f0>
    5f8e:	21 96       	adiw	r28, 0x01	; 1
    5f90:	4c ad       	ldd	r20, Y+60	; 0x3c
    5f92:	5d ad       	ldd	r21, Y+61	; 0x3d
    5f94:	6e ad       	ldd	r22, Y+62	; 0x3e
    5f96:	7f ad       	ldd	r23, Y+63	; 0x3f
    5f98:	21 97       	sbiw	r28, 0x01	; 1
    5f9a:	40 95       	com	r20
    5f9c:	50 95       	com	r21
    5f9e:	60 95       	com	r22
    5fa0:	70 95       	com	r23
    5fa2:	21 96       	adiw	r28, 0x01	; 1
    5fa4:	4c af       	std	Y+60, r20	; 0x3c
    5fa6:	5d af       	std	Y+61, r21	; 0x3d
    5fa8:	6e af       	std	Y+62, r22	; 0x3e
    5faa:	7f af       	std	Y+63, r23	; 0x3f
    5fac:	21 97       	sbiw	r28, 0x01	; 1
    5fae:	e1 95       	neg	r30
    5fb0:	81 e0       	ldi	r24, 0x01	; 1
    5fb2:	1e 16       	cp	r1, r30
    5fb4:	08 f0       	brcs	.+2      	; 0x5fb8 <__divdi3+0x14a>
    5fb6:	80 e0       	ldi	r24, 0x00	; 0
    5fb8:	f1 95       	neg	r31
    5fba:	91 e0       	ldi	r25, 0x01	; 1
    5fbc:	1f 16       	cp	r1, r31
    5fbe:	08 f0       	brcs	.+2      	; 0x5fc2 <__divdi3+0x154>
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	4f 2f       	mov	r20, r31
    5fc4:	48 1b       	sub	r20, r24
    5fc6:	81 e0       	ldi	r24, 0x01	; 1
    5fc8:	f4 17       	cp	r31, r20
    5fca:	08 f0       	brcs	.+2      	; 0x5fce <__divdi3+0x160>
    5fcc:	80 e0       	ldi	r24, 0x00	; 0
    5fce:	98 2b       	or	r25, r24
    5fd0:	c1 94       	neg	r12
    5fd2:	81 e0       	ldi	r24, 0x01	; 1
    5fd4:	1c 14       	cp	r1, r12
    5fd6:	08 f0       	brcs	.+2      	; 0x5fda <__divdi3+0x16c>
    5fd8:	80 e0       	ldi	r24, 0x00	; 0
    5fda:	6c 2d       	mov	r22, r12
    5fdc:	69 1b       	sub	r22, r25
    5fde:	91 e0       	ldi	r25, 0x01	; 1
    5fe0:	c6 16       	cp	r12, r22
    5fe2:	08 f0       	brcs	.+2      	; 0x5fe6 <__divdi3+0x178>
    5fe4:	90 e0       	ldi	r25, 0x00	; 0
    5fe6:	89 2b       	or	r24, r25
    5fe8:	d1 94       	neg	r13
    5fea:	91 e0       	ldi	r25, 0x01	; 1
    5fec:	1d 14       	cp	r1, r13
    5fee:	08 f0       	brcs	.+2      	; 0x5ff2 <__divdi3+0x184>
    5ff0:	90 e0       	ldi	r25, 0x00	; 0
    5ff2:	5d 2d       	mov	r21, r13
    5ff4:	58 1b       	sub	r21, r24
    5ff6:	81 e0       	ldi	r24, 0x01	; 1
    5ff8:	d5 16       	cp	r13, r21
    5ffa:	08 f0       	brcs	.+2      	; 0x5ffe <__divdi3+0x190>
    5ffc:	80 e0       	ldi	r24, 0x00	; 0
    5ffe:	98 2b       	or	r25, r24
    6000:	e1 94       	neg	r14
    6002:	81 e0       	ldi	r24, 0x01	; 1
    6004:	1e 14       	cp	r1, r14
    6006:	08 f0       	brcs	.+2      	; 0x600a <__divdi3+0x19c>
    6008:	80 e0       	ldi	r24, 0x00	; 0
    600a:	3e 2d       	mov	r19, r14
    600c:	39 1b       	sub	r19, r25
    600e:	91 e0       	ldi	r25, 0x01	; 1
    6010:	e3 16       	cp	r14, r19
    6012:	08 f0       	brcs	.+2      	; 0x6016 <__divdi3+0x1a8>
    6014:	90 e0       	ldi	r25, 0x00	; 0
    6016:	89 2b       	or	r24, r25
    6018:	f1 94       	neg	r15
    601a:	91 e0       	ldi	r25, 0x01	; 1
    601c:	1f 14       	cp	r1, r15
    601e:	08 f0       	brcs	.+2      	; 0x6022 <__divdi3+0x1b4>
    6020:	90 e0       	ldi	r25, 0x00	; 0
    6022:	2f 2d       	mov	r18, r15
    6024:	28 1b       	sub	r18, r24
    6026:	81 e0       	ldi	r24, 0x01	; 1
    6028:	f2 16       	cp	r15, r18
    602a:	08 f0       	brcs	.+2      	; 0x602e <__divdi3+0x1c0>
    602c:	80 e0       	ldi	r24, 0x00	; 0
    602e:	98 2b       	or	r25, r24
    6030:	01 95       	neg	r16
    6032:	81 e0       	ldi	r24, 0x01	; 1
    6034:	10 16       	cp	r1, r16
    6036:	08 f0       	brcs	.+2      	; 0x603a <__divdi3+0x1cc>
    6038:	80 e0       	ldi	r24, 0x00	; 0
    603a:	70 2f       	mov	r23, r16
    603c:	79 1b       	sub	r23, r25
    603e:	97 2f       	mov	r25, r23
    6040:	71 e0       	ldi	r23, 0x01	; 1
    6042:	09 17       	cp	r16, r25
    6044:	08 f0       	brcs	.+2      	; 0x6048 <__divdi3+0x1da>
    6046:	70 e0       	ldi	r23, 0x00	; 0
    6048:	87 2b       	or	r24, r23
    604a:	11 95       	neg	r17
    604c:	18 1b       	sub	r17, r24
    604e:	e9 87       	std	Y+9, r30	; 0x09
    6050:	4a 87       	std	Y+10, r20	; 0x0a
    6052:	6b 87       	std	Y+11, r22	; 0x0b
    6054:	5c 87       	std	Y+12, r21	; 0x0c
    6056:	3d 87       	std	Y+13, r19	; 0x0d
    6058:	2e 87       	std	Y+14, r18	; 0x0e
    605a:	9f 87       	std	Y+15, r25	; 0x0f
    605c:	18 8b       	std	Y+16, r17	; 0x10
    605e:	79 85       	ldd	r23, Y+9	; 0x09
    6060:	6a 85       	ldd	r22, Y+10	; 0x0a
    6062:	5b 85       	ldd	r21, Y+11	; 0x0b
    6064:	4c 85       	ldd	r20, Y+12	; 0x0c
    6066:	3d 85       	ldd	r19, Y+13	; 0x0d
    6068:	2e 85       	ldd	r18, Y+14	; 0x0e
    606a:	9f 85       	ldd	r25, Y+15	; 0x0f
    606c:	88 89       	ldd	r24, Y+16	; 0x10
    606e:	e9 81       	ldd	r30, Y+1	; 0x01
    6070:	e9 8b       	std	Y+17, r30	; 0x11
    6072:	ea 81       	ldd	r30, Y+2	; 0x02
    6074:	ea 8b       	std	Y+18, r30	; 0x12
    6076:	eb 81       	ldd	r30, Y+3	; 0x03
    6078:	eb 8b       	std	Y+19, r30	; 0x13
    607a:	ec 81       	ldd	r30, Y+4	; 0x04
    607c:	ec 8b       	std	Y+20, r30	; 0x14
    607e:	ed 81       	ldd	r30, Y+5	; 0x05
    6080:	ed 8b       	std	Y+21, r30	; 0x15
    6082:	ee 81       	ldd	r30, Y+6	; 0x06
    6084:	ee 8b       	std	Y+22, r30	; 0x16
    6086:	ef 81       	ldd	r30, Y+7	; 0x07
    6088:	ef 8b       	std	Y+23, r30	; 0x17
    608a:	e8 85       	ldd	r30, Y+8	; 0x08
    608c:	e8 8f       	std	Y+24, r30	; 0x18
    608e:	79 8f       	std	Y+25, r23	; 0x19
    6090:	6a 8f       	std	Y+26, r22	; 0x1a
    6092:	5b 8f       	std	Y+27, r21	; 0x1b
    6094:	4c 8f       	std	Y+28, r20	; 0x1c
    6096:	3d 8f       	std	Y+29, r19	; 0x1d
    6098:	2e 8f       	std	Y+30, r18	; 0x1e
    609a:	9f 8f       	std	Y+31, r25	; 0x1f
    609c:	88 a3       	std	Y+32, r24	; 0x20
    609e:	e9 8c       	ldd	r14, Y+25	; 0x19
    60a0:	fa 8c       	ldd	r15, Y+26	; 0x1a
    60a2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    60a4:	1c 8d       	ldd	r17, Y+28	; 0x1c
    60a6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    60a8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    60aa:	4f 8d       	ldd	r20, Y+31	; 0x1f
    60ac:	58 a1       	ldd	r21, Y+32	; 0x20
    60ae:	89 89       	ldd	r24, Y+17	; 0x11
    60b0:	9a 89       	ldd	r25, Y+18	; 0x12
    60b2:	ab 89       	ldd	r26, Y+19	; 0x13
    60b4:	bc 89       	ldd	r27, Y+20	; 0x14
    60b6:	8d ab       	std	Y+53, r24	; 0x35
    60b8:	9e ab       	std	Y+54, r25	; 0x36
    60ba:	af ab       	std	Y+55, r26	; 0x37
    60bc:	b8 af       	std	Y+56, r27	; 0x38
    60be:	ad 88       	ldd	r10, Y+21	; 0x15
    60c0:	be 88       	ldd	r11, Y+22	; 0x16
    60c2:	cf 88       	ldd	r12, Y+23	; 0x17
    60c4:	d8 8c       	ldd	r13, Y+24	; 0x18
    60c6:	21 15       	cp	r18, r1
    60c8:	31 05       	cpc	r19, r1
    60ca:	41 05       	cpc	r20, r1
    60cc:	51 05       	cpc	r21, r1
    60ce:	09 f0       	breq	.+2      	; 0x60d2 <__divdi3+0x264>
    60d0:	be c3       	rjmp	.+1916   	; 0x684e <__divdi3+0x9e0>
    60d2:	ae 14       	cp	r10, r14
    60d4:	bf 04       	cpc	r11, r15
    60d6:	c0 06       	cpc	r12, r16
    60d8:	d1 06       	cpc	r13, r17
    60da:	08 f0       	brcs	.+2      	; 0x60de <__divdi3+0x270>
    60dc:	4f c1       	rjmp	.+670    	; 0x637c <__divdi3+0x50e>
    60de:	90 e0       	ldi	r25, 0x00	; 0
    60e0:	e9 16       	cp	r14, r25
    60e2:	90 e0       	ldi	r25, 0x00	; 0
    60e4:	f9 06       	cpc	r15, r25
    60e6:	91 e0       	ldi	r25, 0x01	; 1
    60e8:	09 07       	cpc	r16, r25
    60ea:	90 e0       	ldi	r25, 0x00	; 0
    60ec:	19 07       	cpc	r17, r25
    60ee:	58 f4       	brcc	.+22     	; 0x6106 <__divdi3+0x298>
    60f0:	af ef       	ldi	r26, 0xFF	; 255
    60f2:	ea 16       	cp	r14, r26
    60f4:	f1 04       	cpc	r15, r1
    60f6:	01 05       	cpc	r16, r1
    60f8:	11 05       	cpc	r17, r1
    60fa:	09 f0       	breq	.+2      	; 0x60fe <__divdi3+0x290>
    60fc:	90 f4       	brcc	.+36     	; 0x6122 <__divdi3+0x2b4>
    60fe:	20 e0       	ldi	r18, 0x00	; 0
    6100:	30 e0       	ldi	r19, 0x00	; 0
    6102:	a9 01       	movw	r20, r18
    6104:	17 c0       	rjmp	.+46     	; 0x6134 <__divdi3+0x2c6>
    6106:	b0 e0       	ldi	r27, 0x00	; 0
    6108:	eb 16       	cp	r14, r27
    610a:	b0 e0       	ldi	r27, 0x00	; 0
    610c:	fb 06       	cpc	r15, r27
    610e:	b0 e0       	ldi	r27, 0x00	; 0
    6110:	0b 07       	cpc	r16, r27
    6112:	b1 e0       	ldi	r27, 0x01	; 1
    6114:	1b 07       	cpc	r17, r27
    6116:	50 f4       	brcc	.+20     	; 0x612c <__divdi3+0x2be>
    6118:	20 e1       	ldi	r18, 0x10	; 16
    611a:	30 e0       	ldi	r19, 0x00	; 0
    611c:	40 e0       	ldi	r20, 0x00	; 0
    611e:	50 e0       	ldi	r21, 0x00	; 0
    6120:	09 c0       	rjmp	.+18     	; 0x6134 <__divdi3+0x2c6>
    6122:	28 e0       	ldi	r18, 0x08	; 8
    6124:	30 e0       	ldi	r19, 0x00	; 0
    6126:	40 e0       	ldi	r20, 0x00	; 0
    6128:	50 e0       	ldi	r21, 0x00	; 0
    612a:	04 c0       	rjmp	.+8      	; 0x6134 <__divdi3+0x2c6>
    612c:	28 e1       	ldi	r18, 0x18	; 24
    612e:	30 e0       	ldi	r19, 0x00	; 0
    6130:	40 e0       	ldi	r20, 0x00	; 0
    6132:	50 e0       	ldi	r21, 0x00	; 0
    6134:	d8 01       	movw	r26, r16
    6136:	c7 01       	movw	r24, r14
    6138:	02 2e       	mov	r0, r18
    613a:	04 c0       	rjmp	.+8      	; 0x6144 <__divdi3+0x2d6>
    613c:	b6 95       	lsr	r27
    613e:	a7 95       	ror	r26
    6140:	97 95       	ror	r25
    6142:	87 95       	ror	r24
    6144:	0a 94       	dec	r0
    6146:	d2 f7       	brpl	.-12     	; 0x613c <__divdi3+0x2ce>
    6148:	84 5b       	subi	r24, 0xB4	; 180
    614a:	9e 4f       	sbci	r25, 0xFE	; 254
    614c:	fc 01       	movw	r30, r24
    614e:	60 81       	ld	r22, Z
    6150:	80 e2       	ldi	r24, 0x20	; 32
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	a0 e0       	ldi	r26, 0x00	; 0
    6156:	b0 e0       	ldi	r27, 0x00	; 0
    6158:	82 1b       	sub	r24, r18
    615a:	93 0b       	sbc	r25, r19
    615c:	a4 0b       	sbc	r26, r20
    615e:	b5 0b       	sbc	r27, r21
    6160:	86 1b       	sub	r24, r22
    6162:	91 09       	sbc	r25, r1
    6164:	a1 09       	sbc	r26, r1
    6166:	b1 09       	sbc	r27, r1
    6168:	00 97       	sbiw	r24, 0x00	; 0
    616a:	a1 05       	cpc	r26, r1
    616c:	b1 05       	cpc	r27, r1
    616e:	a1 f1       	breq	.+104    	; 0x61d8 <__divdi3+0x36a>
    6170:	08 2e       	mov	r0, r24
    6172:	04 c0       	rjmp	.+8      	; 0x617c <__divdi3+0x30e>
    6174:	ee 0c       	add	r14, r14
    6176:	ff 1c       	adc	r15, r15
    6178:	00 1f       	adc	r16, r16
    617a:	11 1f       	adc	r17, r17
    617c:	0a 94       	dec	r0
    617e:	d2 f7       	brpl	.-12     	; 0x6174 <__divdi3+0x306>
    6180:	a6 01       	movw	r20, r12
    6182:	95 01       	movw	r18, r10
    6184:	08 2e       	mov	r0, r24
    6186:	04 c0       	rjmp	.+8      	; 0x6190 <__divdi3+0x322>
    6188:	22 0f       	add	r18, r18
    618a:	33 1f       	adc	r19, r19
    618c:	44 1f       	adc	r20, r20
    618e:	55 1f       	adc	r21, r21
    6190:	0a 94       	dec	r0
    6192:	d2 f7       	brpl	.-12     	; 0x6188 <__divdi3+0x31a>
    6194:	60 e2       	ldi	r22, 0x20	; 32
    6196:	70 e0       	ldi	r23, 0x00	; 0
    6198:	68 1b       	sub	r22, r24
    619a:	79 0b       	sbc	r23, r25
    619c:	ad a8       	ldd	r10, Y+53	; 0x35
    619e:	be a8       	ldd	r11, Y+54	; 0x36
    61a0:	cf a8       	ldd	r12, Y+55	; 0x37
    61a2:	d8 ac       	ldd	r13, Y+56	; 0x38
    61a4:	04 c0       	rjmp	.+8      	; 0x61ae <__divdi3+0x340>
    61a6:	d6 94       	lsr	r13
    61a8:	c7 94       	ror	r12
    61aa:	b7 94       	ror	r11
    61ac:	a7 94       	ror	r10
    61ae:	6a 95       	dec	r22
    61b0:	d2 f7       	brpl	.-12     	; 0x61a6 <__divdi3+0x338>
    61b2:	a2 2a       	or	r10, r18
    61b4:	b3 2a       	or	r11, r19
    61b6:	c4 2a       	or	r12, r20
    61b8:	d5 2a       	or	r13, r21
    61ba:	2d a8       	ldd	r2, Y+53	; 0x35
    61bc:	3e a8       	ldd	r3, Y+54	; 0x36
    61be:	4f a8       	ldd	r4, Y+55	; 0x37
    61c0:	58 ac       	ldd	r5, Y+56	; 0x38
    61c2:	04 c0       	rjmp	.+8      	; 0x61cc <__divdi3+0x35e>
    61c4:	22 0c       	add	r2, r2
    61c6:	33 1c       	adc	r3, r3
    61c8:	44 1c       	adc	r4, r4
    61ca:	55 1c       	adc	r5, r5
    61cc:	8a 95       	dec	r24
    61ce:	d2 f7       	brpl	.-12     	; 0x61c4 <__divdi3+0x356>
    61d0:	2d aa       	std	Y+53, r2	; 0x35
    61d2:	3e aa       	std	Y+54, r3	; 0x36
    61d4:	4f aa       	std	Y+55, r4	; 0x37
    61d6:	58 ae       	std	Y+56, r5	; 0x38
    61d8:	38 01       	movw	r6, r16
    61da:	88 24       	eor	r8, r8
    61dc:	99 24       	eor	r9, r9
    61de:	a8 01       	movw	r20, r16
    61e0:	97 01       	movw	r18, r14
    61e2:	40 70       	andi	r20, 0x00	; 0
    61e4:	50 70       	andi	r21, 0x00	; 0
    61e6:	2d a7       	std	Y+45, r18	; 0x2d
    61e8:	3e a7       	std	Y+46, r19	; 0x2e
    61ea:	4f a7       	std	Y+47, r20	; 0x2f
    61ec:	58 ab       	std	Y+48, r21	; 0x30
    61ee:	c6 01       	movw	r24, r12
    61f0:	b5 01       	movw	r22, r10
    61f2:	a4 01       	movw	r20, r8
    61f4:	93 01       	movw	r18, r6
    61f6:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    61fa:	22 2e       	mov	r2, r18
    61fc:	53 2e       	mov	r5, r19
    61fe:	44 2e       	mov	r4, r20
    6200:	35 2e       	mov	r3, r21
    6202:	69 ab       	std	Y+49, r22	; 0x31
    6204:	7a ab       	std	Y+50, r23	; 0x32
    6206:	8b ab       	std	Y+51, r24	; 0x33
    6208:	9c ab       	std	Y+52, r25	; 0x34
    620a:	c6 01       	movw	r24, r12
    620c:	b5 01       	movw	r22, r10
    620e:	a4 01       	movw	r20, r8
    6210:	93 01       	movw	r18, r6
    6212:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    6216:	82 2d       	mov	r24, r2
    6218:	95 2d       	mov	r25, r5
    621a:	a4 2d       	mov	r26, r4
    621c:	b3 2d       	mov	r27, r3
    621e:	89 a7       	std	Y+41, r24	; 0x29
    6220:	9a a7       	std	Y+42, r25	; 0x2a
    6222:	ab a7       	std	Y+43, r26	; 0x2b
    6224:	bc a7       	std	Y+44, r27	; 0x2c
    6226:	bc 01       	movw	r22, r24
    6228:	cd 01       	movw	r24, r26
    622a:	2d a5       	ldd	r18, Y+45	; 0x2d
    622c:	3e a5       	ldd	r19, Y+46	; 0x2e
    622e:	4f a5       	ldd	r20, Y+47	; 0x2f
    6230:	58 a9       	ldd	r21, Y+48	; 0x30
    6232:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    6236:	5b 01       	movw	r10, r22
    6238:	6c 01       	movw	r12, r24
    623a:	49 a9       	ldd	r20, Y+49	; 0x31
    623c:	5a a9       	ldd	r21, Y+50	; 0x32
    623e:	6b a9       	ldd	r22, Y+51	; 0x33
    6240:	7c a9       	ldd	r23, Y+52	; 0x34
    6242:	da 01       	movw	r26, r20
    6244:	99 27       	eor	r25, r25
    6246:	88 27       	eor	r24, r24
    6248:	2d a8       	ldd	r2, Y+53	; 0x35
    624a:	3e a8       	ldd	r3, Y+54	; 0x36
    624c:	4f a8       	ldd	r4, Y+55	; 0x37
    624e:	58 ac       	ldd	r5, Y+56	; 0x38
    6250:	92 01       	movw	r18, r4
    6252:	44 27       	eor	r20, r20
    6254:	55 27       	eor	r21, r21
    6256:	82 2b       	or	r24, r18
    6258:	93 2b       	or	r25, r19
    625a:	a4 2b       	or	r26, r20
    625c:	b5 2b       	or	r27, r21
    625e:	8a 15       	cp	r24, r10
    6260:	9b 05       	cpc	r25, r11
    6262:	ac 05       	cpc	r26, r12
    6264:	bd 05       	cpc	r27, r13
    6266:	30 f5       	brcc	.+76     	; 0x62b4 <__divdi3+0x446>
    6268:	29 a5       	ldd	r18, Y+41	; 0x29
    626a:	3a a5       	ldd	r19, Y+42	; 0x2a
    626c:	4b a5       	ldd	r20, Y+43	; 0x2b
    626e:	5c a5       	ldd	r21, Y+44	; 0x2c
    6270:	21 50       	subi	r18, 0x01	; 1
    6272:	30 40       	sbci	r19, 0x00	; 0
    6274:	40 40       	sbci	r20, 0x00	; 0
    6276:	50 40       	sbci	r21, 0x00	; 0
    6278:	29 a7       	std	Y+41, r18	; 0x29
    627a:	3a a7       	std	Y+42, r19	; 0x2a
    627c:	4b a7       	std	Y+43, r20	; 0x2b
    627e:	5c a7       	std	Y+44, r21	; 0x2c
    6280:	8e 0d       	add	r24, r14
    6282:	9f 1d       	adc	r25, r15
    6284:	a0 1f       	adc	r26, r16
    6286:	b1 1f       	adc	r27, r17
    6288:	8e 15       	cp	r24, r14
    628a:	9f 05       	cpc	r25, r15
    628c:	a0 07       	cpc	r26, r16
    628e:	b1 07       	cpc	r27, r17
    6290:	88 f0       	brcs	.+34     	; 0x62b4 <__divdi3+0x446>
    6292:	8a 15       	cp	r24, r10
    6294:	9b 05       	cpc	r25, r11
    6296:	ac 05       	cpc	r26, r12
    6298:	bd 05       	cpc	r27, r13
    629a:	60 f4       	brcc	.+24     	; 0x62b4 <__divdi3+0x446>
    629c:	21 50       	subi	r18, 0x01	; 1
    629e:	30 40       	sbci	r19, 0x00	; 0
    62a0:	40 40       	sbci	r20, 0x00	; 0
    62a2:	50 40       	sbci	r21, 0x00	; 0
    62a4:	29 a7       	std	Y+41, r18	; 0x29
    62a6:	3a a7       	std	Y+42, r19	; 0x2a
    62a8:	4b a7       	std	Y+43, r20	; 0x2b
    62aa:	5c a7       	std	Y+44, r21	; 0x2c
    62ac:	8e 0d       	add	r24, r14
    62ae:	9f 1d       	adc	r25, r15
    62b0:	a0 1f       	adc	r26, r16
    62b2:	b1 1f       	adc	r27, r17
    62b4:	ac 01       	movw	r20, r24
    62b6:	bd 01       	movw	r22, r26
    62b8:	4a 19       	sub	r20, r10
    62ba:	5b 09       	sbc	r21, r11
    62bc:	6c 09       	sbc	r22, r12
    62be:	7d 09       	sbc	r23, r13
    62c0:	5a 01       	movw	r10, r20
    62c2:	6b 01       	movw	r12, r22
    62c4:	cb 01       	movw	r24, r22
    62c6:	ba 01       	movw	r22, r20
    62c8:	a4 01       	movw	r20, r8
    62ca:	93 01       	movw	r18, r6
    62cc:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    62d0:	22 2e       	mov	r2, r18
    62d2:	53 2e       	mov	r5, r19
    62d4:	44 2e       	mov	r4, r20
    62d6:	35 2e       	mov	r3, r21
    62d8:	69 ab       	std	Y+49, r22	; 0x31
    62da:	7a ab       	std	Y+50, r23	; 0x32
    62dc:	8b ab       	std	Y+51, r24	; 0x33
    62de:	9c ab       	std	Y+52, r25	; 0x34
    62e0:	c6 01       	movw	r24, r12
    62e2:	b5 01       	movw	r22, r10
    62e4:	a4 01       	movw	r20, r8
    62e6:	93 01       	movw	r18, r6
    62e8:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    62ec:	a2 2c       	mov	r10, r2
    62ee:	b5 2c       	mov	r11, r5
    62f0:	c4 2c       	mov	r12, r4
    62f2:	d3 2c       	mov	r13, r3
    62f4:	c6 01       	movw	r24, r12
    62f6:	b5 01       	movw	r22, r10
    62f8:	2d a5       	ldd	r18, Y+45	; 0x2d
    62fa:	3e a5       	ldd	r19, Y+46	; 0x2e
    62fc:	4f a5       	ldd	r20, Y+47	; 0x2f
    62fe:	58 a9       	ldd	r21, Y+48	; 0x30
    6300:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    6304:	3b 01       	movw	r6, r22
    6306:	4c 01       	movw	r8, r24
    6308:	69 a9       	ldd	r22, Y+49	; 0x31
    630a:	7a a9       	ldd	r23, Y+50	; 0x32
    630c:	8b a9       	ldd	r24, Y+51	; 0x33
    630e:	9c a9       	ldd	r25, Y+52	; 0x34
    6310:	ab 01       	movw	r20, r22
    6312:	33 27       	eor	r19, r19
    6314:	22 27       	eor	r18, r18
    6316:	8d a9       	ldd	r24, Y+53	; 0x35
    6318:	9e a9       	ldd	r25, Y+54	; 0x36
    631a:	af a9       	ldd	r26, Y+55	; 0x37
    631c:	b8 ad       	ldd	r27, Y+56	; 0x38
    631e:	a0 70       	andi	r26, 0x00	; 0
    6320:	b0 70       	andi	r27, 0x00	; 0
    6322:	28 2b       	or	r18, r24
    6324:	39 2b       	or	r19, r25
    6326:	4a 2b       	or	r20, r26
    6328:	5b 2b       	or	r21, r27
    632a:	26 15       	cp	r18, r6
    632c:	37 05       	cpc	r19, r7
    632e:	48 05       	cpc	r20, r8
    6330:	59 05       	cpc	r21, r9
    6332:	c0 f4       	brcc	.+48     	; 0x6364 <__divdi3+0x4f6>
    6334:	08 94       	sec
    6336:	a1 08       	sbc	r10, r1
    6338:	b1 08       	sbc	r11, r1
    633a:	c1 08       	sbc	r12, r1
    633c:	d1 08       	sbc	r13, r1
    633e:	2e 0d       	add	r18, r14
    6340:	3f 1d       	adc	r19, r15
    6342:	40 1f       	adc	r20, r16
    6344:	51 1f       	adc	r21, r17
    6346:	2e 15       	cp	r18, r14
    6348:	3f 05       	cpc	r19, r15
    634a:	40 07       	cpc	r20, r16
    634c:	51 07       	cpc	r21, r17
    634e:	50 f0       	brcs	.+20     	; 0x6364 <__divdi3+0x4f6>
    6350:	26 15       	cp	r18, r6
    6352:	37 05       	cpc	r19, r7
    6354:	48 05       	cpc	r20, r8
    6356:	59 05       	cpc	r21, r9
    6358:	28 f4       	brcc	.+10     	; 0x6364 <__divdi3+0x4f6>
    635a:	08 94       	sec
    635c:	a1 08       	sbc	r10, r1
    635e:	b1 08       	sbc	r11, r1
    6360:	c1 08       	sbc	r12, r1
    6362:	d1 08       	sbc	r13, r1
    6364:	89 a5       	ldd	r24, Y+41	; 0x29
    6366:	9a a5       	ldd	r25, Y+42	; 0x2a
    6368:	ab a5       	ldd	r26, Y+43	; 0x2b
    636a:	bc a5       	ldd	r27, Y+44	; 0x2c
    636c:	8c 01       	movw	r16, r24
    636e:	ff 24       	eor	r15, r15
    6370:	ee 24       	eor	r14, r14
    6372:	ea 28       	or	r14, r10
    6374:	fb 28       	or	r15, r11
    6376:	0c 29       	or	r16, r12
    6378:	1d 29       	or	r17, r13
    637a:	c7 c4       	rjmp	.+2446   	; 0x6d0a <__divdi3+0xe9c>
    637c:	e1 14       	cp	r14, r1
    637e:	f1 04       	cpc	r15, r1
    6380:	01 05       	cpc	r16, r1
    6382:	11 05       	cpc	r17, r1
    6384:	59 f4       	brne	.+22     	; 0x639c <__divdi3+0x52e>
    6386:	61 e0       	ldi	r22, 0x01	; 1
    6388:	70 e0       	ldi	r23, 0x00	; 0
    638a:	80 e0       	ldi	r24, 0x00	; 0
    638c:	90 e0       	ldi	r25, 0x00	; 0
    638e:	a8 01       	movw	r20, r16
    6390:	97 01       	movw	r18, r14
    6392:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    6396:	79 01       	movw	r14, r18
    6398:	8a 01       	movw	r16, r20
    639a:	10 c0       	rjmp	.+32     	; 0x63bc <__divdi3+0x54e>
    639c:	90 e0       	ldi	r25, 0x00	; 0
    639e:	e9 16       	cp	r14, r25
    63a0:	90 e0       	ldi	r25, 0x00	; 0
    63a2:	f9 06       	cpc	r15, r25
    63a4:	91 e0       	ldi	r25, 0x01	; 1
    63a6:	09 07       	cpc	r16, r25
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	19 07       	cpc	r17, r25
    63ac:	58 f4       	brcc	.+22     	; 0x63c4 <__divdi3+0x556>
    63ae:	af ef       	ldi	r26, 0xFF	; 255
    63b0:	ea 16       	cp	r14, r26
    63b2:	f1 04       	cpc	r15, r1
    63b4:	01 05       	cpc	r16, r1
    63b6:	11 05       	cpc	r17, r1
    63b8:	09 f0       	breq	.+2      	; 0x63bc <__divdi3+0x54e>
    63ba:	90 f4       	brcc	.+36     	; 0x63e0 <__divdi3+0x572>
    63bc:	20 e0       	ldi	r18, 0x00	; 0
    63be:	30 e0       	ldi	r19, 0x00	; 0
    63c0:	a9 01       	movw	r20, r18
    63c2:	17 c0       	rjmp	.+46     	; 0x63f2 <__divdi3+0x584>
    63c4:	b0 e0       	ldi	r27, 0x00	; 0
    63c6:	eb 16       	cp	r14, r27
    63c8:	b0 e0       	ldi	r27, 0x00	; 0
    63ca:	fb 06       	cpc	r15, r27
    63cc:	b0 e0       	ldi	r27, 0x00	; 0
    63ce:	0b 07       	cpc	r16, r27
    63d0:	b1 e0       	ldi	r27, 0x01	; 1
    63d2:	1b 07       	cpc	r17, r27
    63d4:	50 f4       	brcc	.+20     	; 0x63ea <__divdi3+0x57c>
    63d6:	20 e1       	ldi	r18, 0x10	; 16
    63d8:	30 e0       	ldi	r19, 0x00	; 0
    63da:	40 e0       	ldi	r20, 0x00	; 0
    63dc:	50 e0       	ldi	r21, 0x00	; 0
    63de:	09 c0       	rjmp	.+18     	; 0x63f2 <__divdi3+0x584>
    63e0:	28 e0       	ldi	r18, 0x08	; 8
    63e2:	30 e0       	ldi	r19, 0x00	; 0
    63e4:	40 e0       	ldi	r20, 0x00	; 0
    63e6:	50 e0       	ldi	r21, 0x00	; 0
    63e8:	04 c0       	rjmp	.+8      	; 0x63f2 <__divdi3+0x584>
    63ea:	28 e1       	ldi	r18, 0x18	; 24
    63ec:	30 e0       	ldi	r19, 0x00	; 0
    63ee:	40 e0       	ldi	r20, 0x00	; 0
    63f0:	50 e0       	ldi	r21, 0x00	; 0
    63f2:	d8 01       	movw	r26, r16
    63f4:	c7 01       	movw	r24, r14
    63f6:	02 2e       	mov	r0, r18
    63f8:	04 c0       	rjmp	.+8      	; 0x6402 <__divdi3+0x594>
    63fa:	b6 95       	lsr	r27
    63fc:	a7 95       	ror	r26
    63fe:	97 95       	ror	r25
    6400:	87 95       	ror	r24
    6402:	0a 94       	dec	r0
    6404:	d2 f7       	brpl	.-12     	; 0x63fa <__divdi3+0x58c>
    6406:	84 5b       	subi	r24, 0xB4	; 180
    6408:	9e 4f       	sbci	r25, 0xFE	; 254
    640a:	fc 01       	movw	r30, r24
    640c:	80 81       	ld	r24, Z
    640e:	28 0f       	add	r18, r24
    6410:	31 1d       	adc	r19, r1
    6412:	41 1d       	adc	r20, r1
    6414:	51 1d       	adc	r21, r1
    6416:	80 e2       	ldi	r24, 0x20	; 32
    6418:	90 e0       	ldi	r25, 0x00	; 0
    641a:	a0 e0       	ldi	r26, 0x00	; 0
    641c:	b0 e0       	ldi	r27, 0x00	; 0
    641e:	82 1b       	sub	r24, r18
    6420:	93 0b       	sbc	r25, r19
    6422:	a4 0b       	sbc	r26, r20
    6424:	b5 0b       	sbc	r27, r21
    6426:	61 f4       	brne	.+24     	; 0x6440 <__divdi3+0x5d2>
    6428:	15 01       	movw	r2, r10
    642a:	26 01       	movw	r4, r12
    642c:	2e 18       	sub	r2, r14
    642e:	3f 08       	sbc	r3, r15
    6430:	40 0a       	sbc	r4, r16
    6432:	51 0a       	sbc	r5, r17
    6434:	81 e0       	ldi	r24, 0x01	; 1
    6436:	a8 2e       	mov	r10, r24
    6438:	b1 2c       	mov	r11, r1
    643a:	c1 2c       	mov	r12, r1
    643c:	d1 2c       	mov	r13, r1
    643e:	29 c1       	rjmp	.+594    	; 0x6692 <__divdi3+0x824>
    6440:	08 2e       	mov	r0, r24
    6442:	04 c0       	rjmp	.+8      	; 0x644c <__divdi3+0x5de>
    6444:	ee 0c       	add	r14, r14
    6446:	ff 1c       	adc	r15, r15
    6448:	00 1f       	adc	r16, r16
    644a:	11 1f       	adc	r17, r17
    644c:	0a 94       	dec	r0
    644e:	d2 f7       	brpl	.-12     	; 0x6444 <__divdi3+0x5d6>
    6450:	15 01       	movw	r2, r10
    6452:	26 01       	movw	r4, r12
    6454:	02 2e       	mov	r0, r18
    6456:	04 c0       	rjmp	.+8      	; 0x6460 <__divdi3+0x5f2>
    6458:	56 94       	lsr	r5
    645a:	47 94       	ror	r4
    645c:	37 94       	ror	r3
    645e:	27 94       	ror	r2
    6460:	0a 94       	dec	r0
    6462:	d2 f7       	brpl	.-12     	; 0x6458 <__divdi3+0x5ea>
    6464:	29 a6       	std	Y+41, r2	; 0x29
    6466:	3a a6       	std	Y+42, r3	; 0x2a
    6468:	4b a6       	std	Y+43, r4	; 0x2b
    646a:	5c a6       	std	Y+44, r5	; 0x2c
    646c:	b6 01       	movw	r22, r12
    646e:	a5 01       	movw	r20, r10
    6470:	08 2e       	mov	r0, r24
    6472:	04 c0       	rjmp	.+8      	; 0x647c <__divdi3+0x60e>
    6474:	44 0f       	add	r20, r20
    6476:	55 1f       	adc	r21, r21
    6478:	66 1f       	adc	r22, r22
    647a:	77 1f       	adc	r23, r23
    647c:	0a 94       	dec	r0
    647e:	d2 f7       	brpl	.-12     	; 0x6474 <__divdi3+0x606>
    6480:	4d a7       	std	Y+45, r20	; 0x2d
    6482:	5e a7       	std	Y+46, r21	; 0x2e
    6484:	6f a7       	std	Y+47, r22	; 0x2f
    6486:	78 ab       	std	Y+48, r23	; 0x30
    6488:	2d a8       	ldd	r2, Y+53	; 0x35
    648a:	3e a8       	ldd	r3, Y+54	; 0x36
    648c:	4f a8       	ldd	r4, Y+55	; 0x37
    648e:	58 ac       	ldd	r5, Y+56	; 0x38
    6490:	04 c0       	rjmp	.+8      	; 0x649a <__divdi3+0x62c>
    6492:	56 94       	lsr	r5
    6494:	47 94       	ror	r4
    6496:	37 94       	ror	r3
    6498:	27 94       	ror	r2
    649a:	2a 95       	dec	r18
    649c:	d2 f7       	brpl	.-12     	; 0x6492 <__divdi3+0x624>
    649e:	ad a4       	ldd	r10, Y+45	; 0x2d
    64a0:	be a4       	ldd	r11, Y+46	; 0x2e
    64a2:	cf a4       	ldd	r12, Y+47	; 0x2f
    64a4:	d8 a8       	ldd	r13, Y+48	; 0x30
    64a6:	a2 28       	or	r10, r2
    64a8:	b3 28       	or	r11, r3
    64aa:	c4 28       	or	r12, r4
    64ac:	d5 28       	or	r13, r5
    64ae:	ad a6       	std	Y+45, r10	; 0x2d
    64b0:	be a6       	std	Y+46, r11	; 0x2e
    64b2:	cf a6       	std	Y+47, r12	; 0x2f
    64b4:	d8 aa       	std	Y+48, r13	; 0x30
    64b6:	2d a9       	ldd	r18, Y+53	; 0x35
    64b8:	3e a9       	ldd	r19, Y+54	; 0x36
    64ba:	4f a9       	ldd	r20, Y+55	; 0x37
    64bc:	58 ad       	ldd	r21, Y+56	; 0x38
    64be:	04 c0       	rjmp	.+8      	; 0x64c8 <__divdi3+0x65a>
    64c0:	22 0f       	add	r18, r18
    64c2:	33 1f       	adc	r19, r19
    64c4:	44 1f       	adc	r20, r20
    64c6:	55 1f       	adc	r21, r21
    64c8:	8a 95       	dec	r24
    64ca:	d2 f7       	brpl	.-12     	; 0x64c0 <__divdi3+0x652>
    64cc:	2d ab       	std	Y+53, r18	; 0x35
    64ce:	3e ab       	std	Y+54, r19	; 0x36
    64d0:	4f ab       	std	Y+55, r20	; 0x37
    64d2:	58 af       	std	Y+56, r21	; 0x38
    64d4:	38 01       	movw	r6, r16
    64d6:	88 24       	eor	r8, r8
    64d8:	99 24       	eor	r9, r9
    64da:	b8 01       	movw	r22, r16
    64dc:	a7 01       	movw	r20, r14
    64de:	60 70       	andi	r22, 0x00	; 0
    64e0:	70 70       	andi	r23, 0x00	; 0
    64e2:	49 ab       	std	Y+49, r20	; 0x31
    64e4:	5a ab       	std	Y+50, r21	; 0x32
    64e6:	6b ab       	std	Y+51, r22	; 0x33
    64e8:	7c ab       	std	Y+52, r23	; 0x34
    64ea:	69 a5       	ldd	r22, Y+41	; 0x29
    64ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    64ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    64f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    64f2:	a4 01       	movw	r20, r8
    64f4:	93 01       	movw	r18, r6
    64f6:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    64fa:	22 2e       	mov	r2, r18
    64fc:	53 2e       	mov	r5, r19
    64fe:	44 2e       	mov	r4, r20
    6500:	35 2e       	mov	r3, r21
    6502:	69 af       	std	Y+57, r22	; 0x39
    6504:	7a af       	std	Y+58, r23	; 0x3a
    6506:	8b af       	std	Y+59, r24	; 0x3b
    6508:	9c af       	std	Y+60, r25	; 0x3c
    650a:	69 a5       	ldd	r22, Y+41	; 0x29
    650c:	7a a5       	ldd	r23, Y+42	; 0x2a
    650e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6510:	9c a5       	ldd	r25, Y+44	; 0x2c
    6512:	a4 01       	movw	r20, r8
    6514:	93 01       	movw	r18, r6
    6516:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    651a:	a2 2c       	mov	r10, r2
    651c:	b5 2c       	mov	r11, r5
    651e:	c4 2c       	mov	r12, r4
    6520:	d3 2c       	mov	r13, r3
    6522:	a9 a6       	std	Y+41, r10	; 0x29
    6524:	ba a6       	std	Y+42, r11	; 0x2a
    6526:	cb a6       	std	Y+43, r12	; 0x2b
    6528:	dc a6       	std	Y+44, r13	; 0x2c
    652a:	c6 01       	movw	r24, r12
    652c:	b5 01       	movw	r22, r10
    652e:	29 a9       	ldd	r18, Y+49	; 0x31
    6530:	3a a9       	ldd	r19, Y+50	; 0x32
    6532:	4b a9       	ldd	r20, Y+51	; 0x33
    6534:	5c a9       	ldd	r21, Y+52	; 0x34
    6536:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    653a:	5b 01       	movw	r10, r22
    653c:	6c 01       	movw	r12, r24
    653e:	29 ac       	ldd	r2, Y+57	; 0x39
    6540:	3a ac       	ldd	r3, Y+58	; 0x3a
    6542:	4b ac       	ldd	r4, Y+59	; 0x3b
    6544:	5c ac       	ldd	r5, Y+60	; 0x3c
    6546:	d1 01       	movw	r26, r2
    6548:	99 27       	eor	r25, r25
    654a:	88 27       	eor	r24, r24
    654c:	2d a4       	ldd	r2, Y+45	; 0x2d
    654e:	3e a4       	ldd	r3, Y+46	; 0x2e
    6550:	4f a4       	ldd	r4, Y+47	; 0x2f
    6552:	58 a8       	ldd	r5, Y+48	; 0x30
    6554:	92 01       	movw	r18, r4
    6556:	44 27       	eor	r20, r20
    6558:	55 27       	eor	r21, r21
    655a:	82 2b       	or	r24, r18
    655c:	93 2b       	or	r25, r19
    655e:	a4 2b       	or	r26, r20
    6560:	b5 2b       	or	r27, r21
    6562:	8a 15       	cp	r24, r10
    6564:	9b 05       	cpc	r25, r11
    6566:	ac 05       	cpc	r26, r12
    6568:	bd 05       	cpc	r27, r13
    656a:	30 f5       	brcc	.+76     	; 0x65b8 <__divdi3+0x74a>
    656c:	29 a5       	ldd	r18, Y+41	; 0x29
    656e:	3a a5       	ldd	r19, Y+42	; 0x2a
    6570:	4b a5       	ldd	r20, Y+43	; 0x2b
    6572:	5c a5       	ldd	r21, Y+44	; 0x2c
    6574:	21 50       	subi	r18, 0x01	; 1
    6576:	30 40       	sbci	r19, 0x00	; 0
    6578:	40 40       	sbci	r20, 0x00	; 0
    657a:	50 40       	sbci	r21, 0x00	; 0
    657c:	29 a7       	std	Y+41, r18	; 0x29
    657e:	3a a7       	std	Y+42, r19	; 0x2a
    6580:	4b a7       	std	Y+43, r20	; 0x2b
    6582:	5c a7       	std	Y+44, r21	; 0x2c
    6584:	8e 0d       	add	r24, r14
    6586:	9f 1d       	adc	r25, r15
    6588:	a0 1f       	adc	r26, r16
    658a:	b1 1f       	adc	r27, r17
    658c:	8e 15       	cp	r24, r14
    658e:	9f 05       	cpc	r25, r15
    6590:	a0 07       	cpc	r26, r16
    6592:	b1 07       	cpc	r27, r17
    6594:	88 f0       	brcs	.+34     	; 0x65b8 <__divdi3+0x74a>
    6596:	8a 15       	cp	r24, r10
    6598:	9b 05       	cpc	r25, r11
    659a:	ac 05       	cpc	r26, r12
    659c:	bd 05       	cpc	r27, r13
    659e:	60 f4       	brcc	.+24     	; 0x65b8 <__divdi3+0x74a>
    65a0:	21 50       	subi	r18, 0x01	; 1
    65a2:	30 40       	sbci	r19, 0x00	; 0
    65a4:	40 40       	sbci	r20, 0x00	; 0
    65a6:	50 40       	sbci	r21, 0x00	; 0
    65a8:	29 a7       	std	Y+41, r18	; 0x29
    65aa:	3a a7       	std	Y+42, r19	; 0x2a
    65ac:	4b a7       	std	Y+43, r20	; 0x2b
    65ae:	5c a7       	std	Y+44, r21	; 0x2c
    65b0:	8e 0d       	add	r24, r14
    65b2:	9f 1d       	adc	r25, r15
    65b4:	a0 1f       	adc	r26, r16
    65b6:	b1 1f       	adc	r27, r17
    65b8:	ac 01       	movw	r20, r24
    65ba:	bd 01       	movw	r22, r26
    65bc:	4a 19       	sub	r20, r10
    65be:	5b 09       	sbc	r21, r11
    65c0:	6c 09       	sbc	r22, r12
    65c2:	7d 09       	sbc	r23, r13
    65c4:	5a 01       	movw	r10, r20
    65c6:	6b 01       	movw	r12, r22
    65c8:	cb 01       	movw	r24, r22
    65ca:	ba 01       	movw	r22, r20
    65cc:	a4 01       	movw	r20, r8
    65ce:	93 01       	movw	r18, r6
    65d0:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    65d4:	22 2e       	mov	r2, r18
    65d6:	53 2e       	mov	r5, r19
    65d8:	44 2e       	mov	r4, r20
    65da:	35 2e       	mov	r3, r21
    65dc:	69 af       	std	Y+57, r22	; 0x39
    65de:	7a af       	std	Y+58, r23	; 0x3a
    65e0:	8b af       	std	Y+59, r24	; 0x3b
    65e2:	9c af       	std	Y+60, r25	; 0x3c
    65e4:	c6 01       	movw	r24, r12
    65e6:	b5 01       	movw	r22, r10
    65e8:	a4 01       	movw	r20, r8
    65ea:	93 01       	movw	r18, r6
    65ec:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    65f0:	62 2c       	mov	r6, r2
    65f2:	75 2c       	mov	r7, r5
    65f4:	84 2c       	mov	r8, r4
    65f6:	93 2c       	mov	r9, r3
    65f8:	c4 01       	movw	r24, r8
    65fa:	b3 01       	movw	r22, r6
    65fc:	29 a9       	ldd	r18, Y+49	; 0x31
    65fe:	3a a9       	ldd	r19, Y+50	; 0x32
    6600:	4b a9       	ldd	r20, Y+51	; 0x33
    6602:	5c a9       	ldd	r21, Y+52	; 0x34
    6604:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    6608:	9b 01       	movw	r18, r22
    660a:	ac 01       	movw	r20, r24
    660c:	69 ad       	ldd	r22, Y+57	; 0x39
    660e:	7a ad       	ldd	r23, Y+58	; 0x3a
    6610:	8b ad       	ldd	r24, Y+59	; 0x3b
    6612:	9c ad       	ldd	r25, Y+60	; 0x3c
    6614:	6b 01       	movw	r12, r22
    6616:	bb 24       	eor	r11, r11
    6618:	aa 24       	eor	r10, r10
    661a:	8d a5       	ldd	r24, Y+45	; 0x2d
    661c:	9e a5       	ldd	r25, Y+46	; 0x2e
    661e:	af a5       	ldd	r26, Y+47	; 0x2f
    6620:	b8 a9       	ldd	r27, Y+48	; 0x30
    6622:	a0 70       	andi	r26, 0x00	; 0
    6624:	b0 70       	andi	r27, 0x00	; 0
    6626:	a8 2a       	or	r10, r24
    6628:	b9 2a       	or	r11, r25
    662a:	ca 2a       	or	r12, r26
    662c:	db 2a       	or	r13, r27
    662e:	a2 16       	cp	r10, r18
    6630:	b3 06       	cpc	r11, r19
    6632:	c4 06       	cpc	r12, r20
    6634:	d5 06       	cpc	r13, r21
    6636:	e0 f4       	brcc	.+56     	; 0x6670 <__divdi3+0x802>
    6638:	08 94       	sec
    663a:	61 08       	sbc	r6, r1
    663c:	71 08       	sbc	r7, r1
    663e:	81 08       	sbc	r8, r1
    6640:	91 08       	sbc	r9, r1
    6642:	ae 0c       	add	r10, r14
    6644:	bf 1c       	adc	r11, r15
    6646:	c0 1e       	adc	r12, r16
    6648:	d1 1e       	adc	r13, r17
    664a:	ae 14       	cp	r10, r14
    664c:	bf 04       	cpc	r11, r15
    664e:	c0 06       	cpc	r12, r16
    6650:	d1 06       	cpc	r13, r17
    6652:	70 f0       	brcs	.+28     	; 0x6670 <__divdi3+0x802>
    6654:	a2 16       	cp	r10, r18
    6656:	b3 06       	cpc	r11, r19
    6658:	c4 06       	cpc	r12, r20
    665a:	d5 06       	cpc	r13, r21
    665c:	48 f4       	brcc	.+18     	; 0x6670 <__divdi3+0x802>
    665e:	08 94       	sec
    6660:	61 08       	sbc	r6, r1
    6662:	71 08       	sbc	r7, r1
    6664:	81 08       	sbc	r8, r1
    6666:	91 08       	sbc	r9, r1
    6668:	ae 0c       	add	r10, r14
    666a:	bf 1c       	adc	r11, r15
    666c:	c0 1e       	adc	r12, r16
    666e:	d1 1e       	adc	r13, r17
    6670:	15 01       	movw	r2, r10
    6672:	26 01       	movw	r4, r12
    6674:	22 1a       	sub	r2, r18
    6676:	33 0a       	sbc	r3, r19
    6678:	44 0a       	sbc	r4, r20
    667a:	55 0a       	sbc	r5, r21
    667c:	89 a5       	ldd	r24, Y+41	; 0x29
    667e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6680:	ab a5       	ldd	r26, Y+43	; 0x2b
    6682:	bc a5       	ldd	r27, Y+44	; 0x2c
    6684:	6c 01       	movw	r12, r24
    6686:	bb 24       	eor	r11, r11
    6688:	aa 24       	eor	r10, r10
    668a:	a6 28       	or	r10, r6
    668c:	b7 28       	or	r11, r7
    668e:	c8 28       	or	r12, r8
    6690:	d9 28       	or	r13, r9
    6692:	98 01       	movw	r18, r16
    6694:	44 27       	eor	r20, r20
    6696:	55 27       	eor	r21, r21
    6698:	2d a7       	std	Y+45, r18	; 0x2d
    669a:	3e a7       	std	Y+46, r19	; 0x2e
    669c:	4f a7       	std	Y+47, r20	; 0x2f
    669e:	58 ab       	std	Y+48, r21	; 0x30
    66a0:	b8 01       	movw	r22, r16
    66a2:	a7 01       	movw	r20, r14
    66a4:	60 70       	andi	r22, 0x00	; 0
    66a6:	70 70       	andi	r23, 0x00	; 0
    66a8:	49 ab       	std	Y+49, r20	; 0x31
    66aa:	5a ab       	std	Y+50, r21	; 0x32
    66ac:	6b ab       	std	Y+51, r22	; 0x33
    66ae:	7c ab       	std	Y+52, r23	; 0x34
    66b0:	c2 01       	movw	r24, r4
    66b2:	b1 01       	movw	r22, r2
    66b4:	2d a5       	ldd	r18, Y+45	; 0x2d
    66b6:	3e a5       	ldd	r19, Y+46	; 0x2e
    66b8:	4f a5       	ldd	r20, Y+47	; 0x2f
    66ba:	58 a9       	ldd	r21, Y+48	; 0x30
    66bc:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    66c0:	62 2e       	mov	r6, r18
    66c2:	93 2e       	mov	r9, r19
    66c4:	84 2e       	mov	r8, r20
    66c6:	75 2e       	mov	r7, r21
    66c8:	69 af       	std	Y+57, r22	; 0x39
    66ca:	7a af       	std	Y+58, r23	; 0x3a
    66cc:	8b af       	std	Y+59, r24	; 0x3b
    66ce:	9c af       	std	Y+60, r25	; 0x3c
    66d0:	c2 01       	movw	r24, r4
    66d2:	b1 01       	movw	r22, r2
    66d4:	2d a5       	ldd	r18, Y+45	; 0x2d
    66d6:	3e a5       	ldd	r19, Y+46	; 0x2e
    66d8:	4f a5       	ldd	r20, Y+47	; 0x2f
    66da:	58 a9       	ldd	r21, Y+48	; 0x30
    66dc:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    66e0:	86 2d       	mov	r24, r6
    66e2:	99 2d       	mov	r25, r9
    66e4:	a8 2d       	mov	r26, r8
    66e6:	b7 2d       	mov	r27, r7
    66e8:	89 a7       	std	Y+41, r24	; 0x29
    66ea:	9a a7       	std	Y+42, r25	; 0x2a
    66ec:	ab a7       	std	Y+43, r26	; 0x2b
    66ee:	bc a7       	std	Y+44, r27	; 0x2c
    66f0:	bc 01       	movw	r22, r24
    66f2:	cd 01       	movw	r24, r26
    66f4:	29 a9       	ldd	r18, Y+49	; 0x31
    66f6:	3a a9       	ldd	r19, Y+50	; 0x32
    66f8:	4b a9       	ldd	r20, Y+51	; 0x33
    66fa:	5c a9       	ldd	r21, Y+52	; 0x34
    66fc:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    6700:	3b 01       	movw	r6, r22
    6702:	4c 01       	movw	r8, r24
    6704:	29 ac       	ldd	r2, Y+57	; 0x39
    6706:	3a ac       	ldd	r3, Y+58	; 0x3a
    6708:	4b ac       	ldd	r4, Y+59	; 0x3b
    670a:	5c ac       	ldd	r5, Y+60	; 0x3c
    670c:	d1 01       	movw	r26, r2
    670e:	99 27       	eor	r25, r25
    6710:	88 27       	eor	r24, r24
    6712:	2d a8       	ldd	r2, Y+53	; 0x35
    6714:	3e a8       	ldd	r3, Y+54	; 0x36
    6716:	4f a8       	ldd	r4, Y+55	; 0x37
    6718:	58 ac       	ldd	r5, Y+56	; 0x38
    671a:	92 01       	movw	r18, r4
    671c:	44 27       	eor	r20, r20
    671e:	55 27       	eor	r21, r21
    6720:	82 2b       	or	r24, r18
    6722:	93 2b       	or	r25, r19
    6724:	a4 2b       	or	r26, r20
    6726:	b5 2b       	or	r27, r21
    6728:	86 15       	cp	r24, r6
    672a:	97 05       	cpc	r25, r7
    672c:	a8 05       	cpc	r26, r8
    672e:	b9 05       	cpc	r27, r9
    6730:	30 f5       	brcc	.+76     	; 0x677e <__divdi3+0x910>
    6732:	29 a5       	ldd	r18, Y+41	; 0x29
    6734:	3a a5       	ldd	r19, Y+42	; 0x2a
    6736:	4b a5       	ldd	r20, Y+43	; 0x2b
    6738:	5c a5       	ldd	r21, Y+44	; 0x2c
    673a:	21 50       	subi	r18, 0x01	; 1
    673c:	30 40       	sbci	r19, 0x00	; 0
    673e:	40 40       	sbci	r20, 0x00	; 0
    6740:	50 40       	sbci	r21, 0x00	; 0
    6742:	29 a7       	std	Y+41, r18	; 0x29
    6744:	3a a7       	std	Y+42, r19	; 0x2a
    6746:	4b a7       	std	Y+43, r20	; 0x2b
    6748:	5c a7       	std	Y+44, r21	; 0x2c
    674a:	8e 0d       	add	r24, r14
    674c:	9f 1d       	adc	r25, r15
    674e:	a0 1f       	adc	r26, r16
    6750:	b1 1f       	adc	r27, r17
    6752:	8e 15       	cp	r24, r14
    6754:	9f 05       	cpc	r25, r15
    6756:	a0 07       	cpc	r26, r16
    6758:	b1 07       	cpc	r27, r17
    675a:	88 f0       	brcs	.+34     	; 0x677e <__divdi3+0x910>
    675c:	86 15       	cp	r24, r6
    675e:	97 05       	cpc	r25, r7
    6760:	a8 05       	cpc	r26, r8
    6762:	b9 05       	cpc	r27, r9
    6764:	60 f4       	brcc	.+24     	; 0x677e <__divdi3+0x910>
    6766:	21 50       	subi	r18, 0x01	; 1
    6768:	30 40       	sbci	r19, 0x00	; 0
    676a:	40 40       	sbci	r20, 0x00	; 0
    676c:	50 40       	sbci	r21, 0x00	; 0
    676e:	29 a7       	std	Y+41, r18	; 0x29
    6770:	3a a7       	std	Y+42, r19	; 0x2a
    6772:	4b a7       	std	Y+43, r20	; 0x2b
    6774:	5c a7       	std	Y+44, r21	; 0x2c
    6776:	8e 0d       	add	r24, r14
    6778:	9f 1d       	adc	r25, r15
    677a:	a0 1f       	adc	r26, r16
    677c:	b1 1f       	adc	r27, r17
    677e:	ac 01       	movw	r20, r24
    6780:	bd 01       	movw	r22, r26
    6782:	46 19       	sub	r20, r6
    6784:	57 09       	sbc	r21, r7
    6786:	68 09       	sbc	r22, r8
    6788:	79 09       	sbc	r23, r9
    678a:	3a 01       	movw	r6, r20
    678c:	4b 01       	movw	r8, r22
    678e:	cb 01       	movw	r24, r22
    6790:	ba 01       	movw	r22, r20
    6792:	2d a5       	ldd	r18, Y+45	; 0x2d
    6794:	3e a5       	ldd	r19, Y+46	; 0x2e
    6796:	4f a5       	ldd	r20, Y+47	; 0x2f
    6798:	58 a9       	ldd	r21, Y+48	; 0x30
    679a:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    679e:	52 2e       	mov	r5, r18
    67a0:	43 2e       	mov	r4, r19
    67a2:	34 2e       	mov	r3, r20
    67a4:	25 2e       	mov	r2, r21
    67a6:	69 af       	std	Y+57, r22	; 0x39
    67a8:	7a af       	std	Y+58, r23	; 0x3a
    67aa:	8b af       	std	Y+59, r24	; 0x3b
    67ac:	9c af       	std	Y+60, r25	; 0x3c
    67ae:	c4 01       	movw	r24, r8
    67b0:	b3 01       	movw	r22, r6
    67b2:	2d a5       	ldd	r18, Y+45	; 0x2d
    67b4:	3e a5       	ldd	r19, Y+46	; 0x2e
    67b6:	4f a5       	ldd	r20, Y+47	; 0x2f
    67b8:	58 a9       	ldd	r21, Y+48	; 0x30
    67ba:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    67be:	65 2c       	mov	r6, r5
    67c0:	74 2c       	mov	r7, r4
    67c2:	83 2c       	mov	r8, r3
    67c4:	92 2c       	mov	r9, r2
    67c6:	c4 01       	movw	r24, r8
    67c8:	b3 01       	movw	r22, r6
    67ca:	29 a9       	ldd	r18, Y+49	; 0x31
    67cc:	3a a9       	ldd	r19, Y+50	; 0x32
    67ce:	4b a9       	ldd	r20, Y+51	; 0x33
    67d0:	5c a9       	ldd	r21, Y+52	; 0x34
    67d2:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    67d6:	1b 01       	movw	r2, r22
    67d8:	2c 01       	movw	r4, r24
    67da:	69 ad       	ldd	r22, Y+57	; 0x39
    67dc:	7a ad       	ldd	r23, Y+58	; 0x3a
    67de:	8b ad       	ldd	r24, Y+59	; 0x3b
    67e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    67e2:	ab 01       	movw	r20, r22
    67e4:	33 27       	eor	r19, r19
    67e6:	22 27       	eor	r18, r18
    67e8:	8d a9       	ldd	r24, Y+53	; 0x35
    67ea:	9e a9       	ldd	r25, Y+54	; 0x36
    67ec:	af a9       	ldd	r26, Y+55	; 0x37
    67ee:	b8 ad       	ldd	r27, Y+56	; 0x38
    67f0:	a0 70       	andi	r26, 0x00	; 0
    67f2:	b0 70       	andi	r27, 0x00	; 0
    67f4:	28 2b       	or	r18, r24
    67f6:	39 2b       	or	r19, r25
    67f8:	4a 2b       	or	r20, r26
    67fa:	5b 2b       	or	r21, r27
    67fc:	22 15       	cp	r18, r2
    67fe:	33 05       	cpc	r19, r3
    6800:	44 05       	cpc	r20, r4
    6802:	55 05       	cpc	r21, r5
    6804:	c0 f4       	brcc	.+48     	; 0x6836 <__divdi3+0x9c8>
    6806:	08 94       	sec
    6808:	61 08       	sbc	r6, r1
    680a:	71 08       	sbc	r7, r1
    680c:	81 08       	sbc	r8, r1
    680e:	91 08       	sbc	r9, r1
    6810:	2e 0d       	add	r18, r14
    6812:	3f 1d       	adc	r19, r15
    6814:	40 1f       	adc	r20, r16
    6816:	51 1f       	adc	r21, r17
    6818:	2e 15       	cp	r18, r14
    681a:	3f 05       	cpc	r19, r15
    681c:	40 07       	cpc	r20, r16
    681e:	51 07       	cpc	r21, r17
    6820:	50 f0       	brcs	.+20     	; 0x6836 <__divdi3+0x9c8>
    6822:	22 15       	cp	r18, r2
    6824:	33 05       	cpc	r19, r3
    6826:	44 05       	cpc	r20, r4
    6828:	55 05       	cpc	r21, r5
    682a:	28 f4       	brcc	.+10     	; 0x6836 <__divdi3+0x9c8>
    682c:	08 94       	sec
    682e:	61 08       	sbc	r6, r1
    6830:	71 08       	sbc	r7, r1
    6832:	81 08       	sbc	r8, r1
    6834:	91 08       	sbc	r9, r1
    6836:	89 a5       	ldd	r24, Y+41	; 0x29
    6838:	9a a5       	ldd	r25, Y+42	; 0x2a
    683a:	ab a5       	ldd	r26, Y+43	; 0x2b
    683c:	bc a5       	ldd	r27, Y+44	; 0x2c
    683e:	8c 01       	movw	r16, r24
    6840:	ff 24       	eor	r15, r15
    6842:	ee 24       	eor	r14, r14
    6844:	e6 28       	or	r14, r6
    6846:	f7 28       	or	r15, r7
    6848:	08 29       	or	r16, r8
    684a:	19 29       	or	r17, r9
    684c:	61 c2       	rjmp	.+1218   	; 0x6d10 <__divdi3+0xea2>
    684e:	a2 16       	cp	r10, r18
    6850:	b3 06       	cpc	r11, r19
    6852:	c4 06       	cpc	r12, r20
    6854:	d5 06       	cpc	r13, r21
    6856:	08 f4       	brcc	.+2      	; 0x685a <__divdi3+0x9ec>
    6858:	48 c2       	rjmp	.+1168   	; 0x6cea <__divdi3+0xe7c>
    685a:	20 30       	cpi	r18, 0x00	; 0
    685c:	90 e0       	ldi	r25, 0x00	; 0
    685e:	39 07       	cpc	r19, r25
    6860:	91 e0       	ldi	r25, 0x01	; 1
    6862:	49 07       	cpc	r20, r25
    6864:	90 e0       	ldi	r25, 0x00	; 0
    6866:	59 07       	cpc	r21, r25
    6868:	50 f4       	brcc	.+20     	; 0x687e <__divdi3+0xa10>
    686a:	2f 3f       	cpi	r18, 0xFF	; 255
    686c:	31 05       	cpc	r19, r1
    686e:	41 05       	cpc	r20, r1
    6870:	51 05       	cpc	r21, r1
    6872:	09 f0       	breq	.+2      	; 0x6876 <__divdi3+0xa08>
    6874:	90 f4       	brcc	.+36     	; 0x689a <__divdi3+0xa2c>
    6876:	66 24       	eor	r6, r6
    6878:	77 24       	eor	r7, r7
    687a:	43 01       	movw	r8, r6
    687c:	19 c0       	rjmp	.+50     	; 0x68b0 <__divdi3+0xa42>
    687e:	20 30       	cpi	r18, 0x00	; 0
    6880:	a0 e0       	ldi	r26, 0x00	; 0
    6882:	3a 07       	cpc	r19, r26
    6884:	a0 e0       	ldi	r26, 0x00	; 0
    6886:	4a 07       	cpc	r20, r26
    6888:	a1 e0       	ldi	r26, 0x01	; 1
    688a:	5a 07       	cpc	r21, r26
    688c:	60 f4       	brcc	.+24     	; 0x68a6 <__divdi3+0xa38>
    688e:	90 e1       	ldi	r25, 0x10	; 16
    6890:	69 2e       	mov	r6, r25
    6892:	71 2c       	mov	r7, r1
    6894:	81 2c       	mov	r8, r1
    6896:	91 2c       	mov	r9, r1
    6898:	0b c0       	rjmp	.+22     	; 0x68b0 <__divdi3+0xa42>
    689a:	88 e0       	ldi	r24, 0x08	; 8
    689c:	68 2e       	mov	r6, r24
    689e:	71 2c       	mov	r7, r1
    68a0:	81 2c       	mov	r8, r1
    68a2:	91 2c       	mov	r9, r1
    68a4:	05 c0       	rjmp	.+10     	; 0x68b0 <__divdi3+0xa42>
    68a6:	b8 e1       	ldi	r27, 0x18	; 24
    68a8:	6b 2e       	mov	r6, r27
    68aa:	71 2c       	mov	r7, r1
    68ac:	81 2c       	mov	r8, r1
    68ae:	91 2c       	mov	r9, r1
    68b0:	da 01       	movw	r26, r20
    68b2:	c9 01       	movw	r24, r18
    68b4:	06 2c       	mov	r0, r6
    68b6:	04 c0       	rjmp	.+8      	; 0x68c0 <__divdi3+0xa52>
    68b8:	b6 95       	lsr	r27
    68ba:	a7 95       	ror	r26
    68bc:	97 95       	ror	r25
    68be:	87 95       	ror	r24
    68c0:	0a 94       	dec	r0
    68c2:	d2 f7       	brpl	.-12     	; 0x68b8 <__divdi3+0xa4a>
    68c4:	84 5b       	subi	r24, 0xB4	; 180
    68c6:	9e 4f       	sbci	r25, 0xFE	; 254
    68c8:	fc 01       	movw	r30, r24
    68ca:	80 81       	ld	r24, Z
    68cc:	68 0e       	add	r6, r24
    68ce:	71 1c       	adc	r7, r1
    68d0:	81 1c       	adc	r8, r1
    68d2:	91 1c       	adc	r9, r1
    68d4:	80 e2       	ldi	r24, 0x20	; 32
    68d6:	90 e0       	ldi	r25, 0x00	; 0
    68d8:	a0 e0       	ldi	r26, 0x00	; 0
    68da:	b0 e0       	ldi	r27, 0x00	; 0
    68dc:	86 19       	sub	r24, r6
    68de:	97 09       	sbc	r25, r7
    68e0:	a8 09       	sbc	r26, r8
    68e2:	b9 09       	sbc	r27, r9
    68e4:	89 f4       	brne	.+34     	; 0x6908 <__divdi3+0xa9a>
    68e6:	2a 15       	cp	r18, r10
    68e8:	3b 05       	cpc	r19, r11
    68ea:	4c 05       	cpc	r20, r12
    68ec:	5d 05       	cpc	r21, r13
    68ee:	08 f4       	brcc	.+2      	; 0x68f2 <__divdi3+0xa84>
    68f0:	03 c2       	rjmp	.+1030   	; 0x6cf8 <__divdi3+0xe8a>
    68f2:	2d a8       	ldd	r2, Y+53	; 0x35
    68f4:	3e a8       	ldd	r3, Y+54	; 0x36
    68f6:	4f a8       	ldd	r4, Y+55	; 0x37
    68f8:	58 ac       	ldd	r5, Y+56	; 0x38
    68fa:	2e 14       	cp	r2, r14
    68fc:	3f 04       	cpc	r3, r15
    68fe:	40 06       	cpc	r4, r16
    6900:	51 06       	cpc	r5, r17
    6902:	08 f0       	brcs	.+2      	; 0x6906 <__divdi3+0xa98>
    6904:	f9 c1       	rjmp	.+1010   	; 0x6cf8 <__divdi3+0xe8a>
    6906:	f1 c1       	rjmp	.+994    	; 0x6cea <__divdi3+0xe7c>
    6908:	89 af       	std	Y+57, r24	; 0x39
    690a:	19 01       	movw	r2, r18
    690c:	2a 01       	movw	r4, r20
    690e:	04 c0       	rjmp	.+8      	; 0x6918 <__divdi3+0xaaa>
    6910:	22 0c       	add	r2, r2
    6912:	33 1c       	adc	r3, r3
    6914:	44 1c       	adc	r4, r4
    6916:	55 1c       	adc	r5, r5
    6918:	8a 95       	dec	r24
    691a:	d2 f7       	brpl	.-12     	; 0x6910 <__divdi3+0xaa2>
    691c:	d8 01       	movw	r26, r16
    691e:	c7 01       	movw	r24, r14
    6920:	06 2c       	mov	r0, r6
    6922:	04 c0       	rjmp	.+8      	; 0x692c <__divdi3+0xabe>
    6924:	b6 95       	lsr	r27
    6926:	a7 95       	ror	r26
    6928:	97 95       	ror	r25
    692a:	87 95       	ror	r24
    692c:	0a 94       	dec	r0
    692e:	d2 f7       	brpl	.-12     	; 0x6924 <__divdi3+0xab6>
    6930:	28 2a       	or	r2, r24
    6932:	39 2a       	or	r3, r25
    6934:	4a 2a       	or	r4, r26
    6936:	5b 2a       	or	r5, r27
    6938:	a8 01       	movw	r20, r16
    693a:	97 01       	movw	r18, r14
    693c:	09 ac       	ldd	r0, Y+57	; 0x39
    693e:	04 c0       	rjmp	.+8      	; 0x6948 <__divdi3+0xada>
    6940:	22 0f       	add	r18, r18
    6942:	33 1f       	adc	r19, r19
    6944:	44 1f       	adc	r20, r20
    6946:	55 1f       	adc	r21, r21
    6948:	0a 94       	dec	r0
    694a:	d2 f7       	brpl	.-12     	; 0x6940 <__divdi3+0xad2>
    694c:	29 96       	adiw	r28, 0x09	; 9
    694e:	2c af       	std	Y+60, r18	; 0x3c
    6950:	3d af       	std	Y+61, r19	; 0x3d
    6952:	4e af       	std	Y+62, r20	; 0x3e
    6954:	5f af       	std	Y+63, r21	; 0x3f
    6956:	29 97       	sbiw	r28, 0x09	; 9
    6958:	86 01       	movw	r16, r12
    695a:	75 01       	movw	r14, r10
    695c:	06 2c       	mov	r0, r6
    695e:	04 c0       	rjmp	.+8      	; 0x6968 <__divdi3+0xafa>
    6960:	16 95       	lsr	r17
    6962:	07 95       	ror	r16
    6964:	f7 94       	ror	r15
    6966:	e7 94       	ror	r14
    6968:	0a 94       	dec	r0
    696a:	d2 f7       	brpl	.-12     	; 0x6960 <__divdi3+0xaf2>
    696c:	b6 01       	movw	r22, r12
    696e:	a5 01       	movw	r20, r10
    6970:	09 ac       	ldd	r0, Y+57	; 0x39
    6972:	04 c0       	rjmp	.+8      	; 0x697c <__divdi3+0xb0e>
    6974:	44 0f       	add	r20, r20
    6976:	55 1f       	adc	r21, r21
    6978:	66 1f       	adc	r22, r22
    697a:	77 1f       	adc	r23, r23
    697c:	0a 94       	dec	r0
    697e:	d2 f7       	brpl	.-12     	; 0x6974 <__divdi3+0xb06>
    6980:	4d a7       	std	Y+45, r20	; 0x2d
    6982:	5e a7       	std	Y+46, r21	; 0x2e
    6984:	6f a7       	std	Y+47, r22	; 0x2f
    6986:	78 ab       	std	Y+48, r23	; 0x30
    6988:	6d a9       	ldd	r22, Y+53	; 0x35
    698a:	7e a9       	ldd	r23, Y+54	; 0x36
    698c:	8f a9       	ldd	r24, Y+55	; 0x37
    698e:	98 ad       	ldd	r25, Y+56	; 0x38
    6990:	04 c0       	rjmp	.+8      	; 0x699a <__divdi3+0xb2c>
    6992:	96 95       	lsr	r25
    6994:	87 95       	ror	r24
    6996:	77 95       	ror	r23
    6998:	67 95       	ror	r22
    699a:	6a 94       	dec	r6
    699c:	d2 f7       	brpl	.-12     	; 0x6992 <__divdi3+0xb24>
    699e:	3b 01       	movw	r6, r22
    69a0:	4c 01       	movw	r8, r24
    69a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    69a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    69a6:	af a5       	ldd	r26, Y+47	; 0x2f
    69a8:	b8 a9       	ldd	r27, Y+48	; 0x30
    69aa:	86 29       	or	r24, r6
    69ac:	97 29       	or	r25, r7
    69ae:	a8 29       	or	r26, r8
    69b0:	b9 29       	or	r27, r9
    69b2:	8d a7       	std	Y+45, r24	; 0x2d
    69b4:	9e a7       	std	Y+46, r25	; 0x2e
    69b6:	af a7       	std	Y+47, r26	; 0x2f
    69b8:	b8 ab       	std	Y+48, r27	; 0x30
    69ba:	52 01       	movw	r10, r4
    69bc:	cc 24       	eor	r12, r12
    69be:	dd 24       	eor	r13, r13
    69c0:	a9 aa       	std	Y+49, r10	; 0x31
    69c2:	ba aa       	std	Y+50, r11	; 0x32
    69c4:	cb aa       	std	Y+51, r12	; 0x33
    69c6:	dc aa       	std	Y+52, r13	; 0x34
    69c8:	a2 01       	movw	r20, r4
    69ca:	91 01       	movw	r18, r2
    69cc:	40 70       	andi	r20, 0x00	; 0
    69ce:	50 70       	andi	r21, 0x00	; 0
    69d0:	2d 96       	adiw	r28, 0x0d	; 13
    69d2:	2c af       	std	Y+60, r18	; 0x3c
    69d4:	3d af       	std	Y+61, r19	; 0x3d
    69d6:	4e af       	std	Y+62, r20	; 0x3e
    69d8:	5f af       	std	Y+63, r21	; 0x3f
    69da:	2d 97       	sbiw	r28, 0x0d	; 13
    69dc:	c8 01       	movw	r24, r16
    69de:	b7 01       	movw	r22, r14
    69e0:	a6 01       	movw	r20, r12
    69e2:	95 01       	movw	r18, r10
    69e4:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    69e8:	62 2e       	mov	r6, r18
    69ea:	a3 2e       	mov	r10, r19
    69ec:	d4 2e       	mov	r13, r20
    69ee:	c5 2e       	mov	r12, r21
    69f0:	25 96       	adiw	r28, 0x05	; 5
    69f2:	6c af       	std	Y+60, r22	; 0x3c
    69f4:	7d af       	std	Y+61, r23	; 0x3d
    69f6:	8e af       	std	Y+62, r24	; 0x3e
    69f8:	9f af       	std	Y+63, r25	; 0x3f
    69fa:	25 97       	sbiw	r28, 0x05	; 5
    69fc:	c8 01       	movw	r24, r16
    69fe:	b7 01       	movw	r22, r14
    6a00:	29 a9       	ldd	r18, Y+49	; 0x31
    6a02:	3a a9       	ldd	r19, Y+50	; 0x32
    6a04:	4b a9       	ldd	r20, Y+51	; 0x33
    6a06:	5c a9       	ldd	r21, Y+52	; 0x34
    6a08:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    6a0c:	e6 2c       	mov	r14, r6
    6a0e:	fa 2c       	mov	r15, r10
    6a10:	0d 2d       	mov	r16, r13
    6a12:	1c 2d       	mov	r17, r12
    6a14:	e9 a6       	std	Y+41, r14	; 0x29
    6a16:	fa a6       	std	Y+42, r15	; 0x2a
    6a18:	0b a7       	std	Y+43, r16	; 0x2b
    6a1a:	1c a7       	std	Y+44, r17	; 0x2c
    6a1c:	c8 01       	movw	r24, r16
    6a1e:	b7 01       	movw	r22, r14
    6a20:	2d 96       	adiw	r28, 0x0d	; 13
    6a22:	2c ad       	ldd	r18, Y+60	; 0x3c
    6a24:	3d ad       	ldd	r19, Y+61	; 0x3d
    6a26:	4e ad       	ldd	r20, Y+62	; 0x3e
    6a28:	5f ad       	ldd	r21, Y+63	; 0x3f
    6a2a:	2d 97       	sbiw	r28, 0x0d	; 13
    6a2c:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    6a30:	25 96       	adiw	r28, 0x05	; 5
    6a32:	ac ac       	ldd	r10, Y+60	; 0x3c
    6a34:	bd ac       	ldd	r11, Y+61	; 0x3d
    6a36:	ce ac       	ldd	r12, Y+62	; 0x3e
    6a38:	df ac       	ldd	r13, Y+63	; 0x3f
    6a3a:	25 97       	sbiw	r28, 0x05	; 5
    6a3c:	85 01       	movw	r16, r10
    6a3e:	ff 24       	eor	r15, r15
    6a40:	ee 24       	eor	r14, r14
    6a42:	ad a4       	ldd	r10, Y+45	; 0x2d
    6a44:	be a4       	ldd	r11, Y+46	; 0x2e
    6a46:	cf a4       	ldd	r12, Y+47	; 0x2f
    6a48:	d8 a8       	ldd	r13, Y+48	; 0x30
    6a4a:	96 01       	movw	r18, r12
    6a4c:	44 27       	eor	r20, r20
    6a4e:	55 27       	eor	r21, r21
    6a50:	e2 2a       	or	r14, r18
    6a52:	f3 2a       	or	r15, r19
    6a54:	04 2b       	or	r16, r20
    6a56:	15 2b       	or	r17, r21
    6a58:	e6 16       	cp	r14, r22
    6a5a:	f7 06       	cpc	r15, r23
    6a5c:	08 07       	cpc	r16, r24
    6a5e:	19 07       	cpc	r17, r25
    6a60:	30 f5       	brcc	.+76     	; 0x6aae <__divdi3+0xc40>
    6a62:	29 a5       	ldd	r18, Y+41	; 0x29
    6a64:	3a a5       	ldd	r19, Y+42	; 0x2a
    6a66:	4b a5       	ldd	r20, Y+43	; 0x2b
    6a68:	5c a5       	ldd	r21, Y+44	; 0x2c
    6a6a:	21 50       	subi	r18, 0x01	; 1
    6a6c:	30 40       	sbci	r19, 0x00	; 0
    6a6e:	40 40       	sbci	r20, 0x00	; 0
    6a70:	50 40       	sbci	r21, 0x00	; 0
    6a72:	29 a7       	std	Y+41, r18	; 0x29
    6a74:	3a a7       	std	Y+42, r19	; 0x2a
    6a76:	4b a7       	std	Y+43, r20	; 0x2b
    6a78:	5c a7       	std	Y+44, r21	; 0x2c
    6a7a:	e2 0c       	add	r14, r2
    6a7c:	f3 1c       	adc	r15, r3
    6a7e:	04 1d       	adc	r16, r4
    6a80:	15 1d       	adc	r17, r5
    6a82:	e2 14       	cp	r14, r2
    6a84:	f3 04       	cpc	r15, r3
    6a86:	04 05       	cpc	r16, r4
    6a88:	15 05       	cpc	r17, r5
    6a8a:	88 f0       	brcs	.+34     	; 0x6aae <__divdi3+0xc40>
    6a8c:	e6 16       	cp	r14, r22
    6a8e:	f7 06       	cpc	r15, r23
    6a90:	08 07       	cpc	r16, r24
    6a92:	19 07       	cpc	r17, r25
    6a94:	60 f4       	brcc	.+24     	; 0x6aae <__divdi3+0xc40>
    6a96:	21 50       	subi	r18, 0x01	; 1
    6a98:	30 40       	sbci	r19, 0x00	; 0
    6a9a:	40 40       	sbci	r20, 0x00	; 0
    6a9c:	50 40       	sbci	r21, 0x00	; 0
    6a9e:	29 a7       	std	Y+41, r18	; 0x29
    6aa0:	3a a7       	std	Y+42, r19	; 0x2a
    6aa2:	4b a7       	std	Y+43, r20	; 0x2b
    6aa4:	5c a7       	std	Y+44, r21	; 0x2c
    6aa6:	e2 0c       	add	r14, r2
    6aa8:	f3 1c       	adc	r15, r3
    6aaa:	04 1d       	adc	r16, r4
    6aac:	15 1d       	adc	r17, r5
    6aae:	e6 1a       	sub	r14, r22
    6ab0:	f7 0a       	sbc	r15, r23
    6ab2:	08 0b       	sbc	r16, r24
    6ab4:	19 0b       	sbc	r17, r25
    6ab6:	c8 01       	movw	r24, r16
    6ab8:	b7 01       	movw	r22, r14
    6aba:	29 a9       	ldd	r18, Y+49	; 0x31
    6abc:	3a a9       	ldd	r19, Y+50	; 0x32
    6abe:	4b a9       	ldd	r20, Y+51	; 0x33
    6ac0:	5c a9       	ldd	r21, Y+52	; 0x34
    6ac2:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    6ac6:	a2 2e       	mov	r10, r18
    6ac8:	d3 2e       	mov	r13, r19
    6aca:	c4 2e       	mov	r12, r20
    6acc:	b5 2e       	mov	r11, r21
    6ace:	25 96       	adiw	r28, 0x05	; 5
    6ad0:	6c af       	std	Y+60, r22	; 0x3c
    6ad2:	7d af       	std	Y+61, r23	; 0x3d
    6ad4:	8e af       	std	Y+62, r24	; 0x3e
    6ad6:	9f af       	std	Y+63, r25	; 0x3f
    6ad8:	25 97       	sbiw	r28, 0x05	; 5
    6ada:	c8 01       	movw	r24, r16
    6adc:	b7 01       	movw	r22, r14
    6ade:	29 a9       	ldd	r18, Y+49	; 0x31
    6ae0:	3a a9       	ldd	r19, Y+50	; 0x32
    6ae2:	4b a9       	ldd	r20, Y+51	; 0x33
    6ae4:	5c a9       	ldd	r21, Y+52	; 0x34
    6ae6:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    6aea:	6a 2c       	mov	r6, r10
    6aec:	7d 2c       	mov	r7, r13
    6aee:	8c 2c       	mov	r8, r12
    6af0:	9b 2c       	mov	r9, r11
    6af2:	c4 01       	movw	r24, r8
    6af4:	b3 01       	movw	r22, r6
    6af6:	2d 96       	adiw	r28, 0x0d	; 13
    6af8:	2c ad       	ldd	r18, Y+60	; 0x3c
    6afa:	3d ad       	ldd	r19, Y+61	; 0x3d
    6afc:	4e ad       	ldd	r20, Y+62	; 0x3e
    6afe:	5f ad       	ldd	r21, Y+63	; 0x3f
    6b00:	2d 97       	sbiw	r28, 0x0d	; 13
    6b02:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    6b06:	9b 01       	movw	r18, r22
    6b08:	ac 01       	movw	r20, r24
    6b0a:	25 96       	adiw	r28, 0x05	; 5
    6b0c:	ac ac       	ldd	r10, Y+60	; 0x3c
    6b0e:	bd ac       	ldd	r11, Y+61	; 0x3d
    6b10:	ce ac       	ldd	r12, Y+62	; 0x3e
    6b12:	df ac       	ldd	r13, Y+63	; 0x3f
    6b14:	25 97       	sbiw	r28, 0x05	; 5
    6b16:	d5 01       	movw	r26, r10
    6b18:	99 27       	eor	r25, r25
    6b1a:	88 27       	eor	r24, r24
    6b1c:	ad a4       	ldd	r10, Y+45	; 0x2d
    6b1e:	be a4       	ldd	r11, Y+46	; 0x2e
    6b20:	cf a4       	ldd	r12, Y+47	; 0x2f
    6b22:	d8 a8       	ldd	r13, Y+48	; 0x30
    6b24:	6f ef       	ldi	r22, 0xFF	; 255
    6b26:	e6 2e       	mov	r14, r22
    6b28:	6f ef       	ldi	r22, 0xFF	; 255
    6b2a:	f6 2e       	mov	r15, r22
    6b2c:	01 2d       	mov	r16, r1
    6b2e:	11 2d       	mov	r17, r1
    6b30:	ae 20       	and	r10, r14
    6b32:	bf 20       	and	r11, r15
    6b34:	c0 22       	and	r12, r16
    6b36:	d1 22       	and	r13, r17
    6b38:	8a 29       	or	r24, r10
    6b3a:	9b 29       	or	r25, r11
    6b3c:	ac 29       	or	r26, r12
    6b3e:	bd 29       	or	r27, r13
    6b40:	82 17       	cp	r24, r18
    6b42:	93 07       	cpc	r25, r19
    6b44:	a4 07       	cpc	r26, r20
    6b46:	b5 07       	cpc	r27, r21
    6b48:	e0 f4       	brcc	.+56     	; 0x6b82 <__divdi3+0xd14>
    6b4a:	08 94       	sec
    6b4c:	61 08       	sbc	r6, r1
    6b4e:	71 08       	sbc	r7, r1
    6b50:	81 08       	sbc	r8, r1
    6b52:	91 08       	sbc	r9, r1
    6b54:	82 0d       	add	r24, r2
    6b56:	93 1d       	adc	r25, r3
    6b58:	a4 1d       	adc	r26, r4
    6b5a:	b5 1d       	adc	r27, r5
    6b5c:	82 15       	cp	r24, r2
    6b5e:	93 05       	cpc	r25, r3
    6b60:	a4 05       	cpc	r26, r4
    6b62:	b5 05       	cpc	r27, r5
    6b64:	70 f0       	brcs	.+28     	; 0x6b82 <__divdi3+0xd14>
    6b66:	82 17       	cp	r24, r18
    6b68:	93 07       	cpc	r25, r19
    6b6a:	a4 07       	cpc	r26, r20
    6b6c:	b5 07       	cpc	r27, r21
    6b6e:	48 f4       	brcc	.+18     	; 0x6b82 <__divdi3+0xd14>
    6b70:	08 94       	sec
    6b72:	61 08       	sbc	r6, r1
    6b74:	71 08       	sbc	r7, r1
    6b76:	81 08       	sbc	r8, r1
    6b78:	91 08       	sbc	r9, r1
    6b7a:	82 0d       	add	r24, r2
    6b7c:	93 1d       	adc	r25, r3
    6b7e:	a4 1d       	adc	r26, r4
    6b80:	b5 1d       	adc	r27, r5
    6b82:	1c 01       	movw	r2, r24
    6b84:	2d 01       	movw	r4, r26
    6b86:	22 1a       	sub	r2, r18
    6b88:	33 0a       	sbc	r3, r19
    6b8a:	44 0a       	sbc	r4, r20
    6b8c:	55 0a       	sbc	r5, r21
    6b8e:	2d a6       	std	Y+45, r2	; 0x2d
    6b90:	3e a6       	std	Y+46, r3	; 0x2e
    6b92:	4f a6       	std	Y+47, r4	; 0x2f
    6b94:	58 aa       	std	Y+48, r5	; 0x30
    6b96:	a9 a4       	ldd	r10, Y+41	; 0x29
    6b98:	ba a4       	ldd	r11, Y+42	; 0x2a
    6b9a:	cb a4       	ldd	r12, Y+43	; 0x2b
    6b9c:	dc a4       	ldd	r13, Y+44	; 0x2c
    6b9e:	85 01       	movw	r16, r10
    6ba0:	ff 24       	eor	r15, r15
    6ba2:	ee 24       	eor	r14, r14
    6ba4:	e6 28       	or	r14, r6
    6ba6:	f7 28       	or	r15, r7
    6ba8:	08 29       	or	r16, r8
    6baa:	19 29       	or	r17, r9
    6bac:	af ef       	ldi	r26, 0xFF	; 255
    6bae:	aa 2e       	mov	r10, r26
    6bb0:	af ef       	ldi	r26, 0xFF	; 255
    6bb2:	ba 2e       	mov	r11, r26
    6bb4:	c1 2c       	mov	r12, r1
    6bb6:	d1 2c       	mov	r13, r1
    6bb8:	ae 20       	and	r10, r14
    6bba:	bf 20       	and	r11, r15
    6bbc:	c0 22       	and	r12, r16
    6bbe:	d1 22       	and	r13, r17
    6bc0:	18 01       	movw	r2, r16
    6bc2:	44 24       	eor	r4, r4
    6bc4:	55 24       	eor	r5, r5
    6bc6:	29 96       	adiw	r28, 0x09	; 9
    6bc8:	6c ac       	ldd	r6, Y+60	; 0x3c
    6bca:	7d ac       	ldd	r7, Y+61	; 0x3d
    6bcc:	8e ac       	ldd	r8, Y+62	; 0x3e
    6bce:	9f ac       	ldd	r9, Y+63	; 0x3f
    6bd0:	29 97       	sbiw	r28, 0x09	; 9
    6bd2:	2f ef       	ldi	r18, 0xFF	; 255
    6bd4:	3f ef       	ldi	r19, 0xFF	; 255
    6bd6:	40 e0       	ldi	r20, 0x00	; 0
    6bd8:	50 e0       	ldi	r21, 0x00	; 0
    6bda:	62 22       	and	r6, r18
    6bdc:	73 22       	and	r7, r19
    6bde:	84 22       	and	r8, r20
    6be0:	95 22       	and	r9, r21
    6be2:	29 96       	adiw	r28, 0x09	; 9
    6be4:	6c ad       	ldd	r22, Y+60	; 0x3c
    6be6:	7d ad       	ldd	r23, Y+61	; 0x3d
    6be8:	8e ad       	ldd	r24, Y+62	; 0x3e
    6bea:	9f ad       	ldd	r25, Y+63	; 0x3f
    6bec:	29 97       	sbiw	r28, 0x09	; 9
    6bee:	ac 01       	movw	r20, r24
    6bf0:	66 27       	eor	r22, r22
    6bf2:	77 27       	eor	r23, r23
    6bf4:	49 a7       	std	Y+41, r20	; 0x29
    6bf6:	5a a7       	std	Y+42, r21	; 0x2a
    6bf8:	6b a7       	std	Y+43, r22	; 0x2b
    6bfa:	7c a7       	std	Y+44, r23	; 0x2c
    6bfc:	c6 01       	movw	r24, r12
    6bfe:	b5 01       	movw	r22, r10
    6c00:	a4 01       	movw	r20, r8
    6c02:	93 01       	movw	r18, r6
    6c04:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    6c08:	69 ab       	std	Y+49, r22	; 0x31
    6c0a:	7a ab       	std	Y+50, r23	; 0x32
    6c0c:	8b ab       	std	Y+51, r24	; 0x33
    6c0e:	9c ab       	std	Y+52, r25	; 0x34
    6c10:	c6 01       	movw	r24, r12
    6c12:	b5 01       	movw	r22, r10
    6c14:	29 a5       	ldd	r18, Y+41	; 0x29
    6c16:	3a a5       	ldd	r19, Y+42	; 0x2a
    6c18:	4b a5       	ldd	r20, Y+43	; 0x2b
    6c1a:	5c a5       	ldd	r21, Y+44	; 0x2c
    6c1c:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    6c20:	5b 01       	movw	r10, r22
    6c22:	6c 01       	movw	r12, r24
    6c24:	c2 01       	movw	r24, r4
    6c26:	b1 01       	movw	r22, r2
    6c28:	a4 01       	movw	r20, r8
    6c2a:	93 01       	movw	r18, r6
    6c2c:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    6c30:	3b 01       	movw	r6, r22
    6c32:	4c 01       	movw	r8, r24
    6c34:	c2 01       	movw	r24, r4
    6c36:	b1 01       	movw	r22, r2
    6c38:	29 a5       	ldd	r18, Y+41	; 0x29
    6c3a:	3a a5       	ldd	r19, Y+42	; 0x2a
    6c3c:	4b a5       	ldd	r20, Y+43	; 0x2b
    6c3e:	5c a5       	ldd	r21, Y+44	; 0x2c
    6c40:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    6c44:	9b 01       	movw	r18, r22
    6c46:	ac 01       	movw	r20, r24
    6c48:	a6 0c       	add	r10, r6
    6c4a:	b7 1c       	adc	r11, r7
    6c4c:	c8 1c       	adc	r12, r8
    6c4e:	d9 1c       	adc	r13, r9
    6c50:	29 a8       	ldd	r2, Y+49	; 0x31
    6c52:	3a a8       	ldd	r3, Y+50	; 0x32
    6c54:	4b a8       	ldd	r4, Y+51	; 0x33
    6c56:	5c a8       	ldd	r5, Y+52	; 0x34
    6c58:	c2 01       	movw	r24, r4
    6c5a:	aa 27       	eor	r26, r26
    6c5c:	bb 27       	eor	r27, r27
    6c5e:	a8 0e       	add	r10, r24
    6c60:	b9 1e       	adc	r11, r25
    6c62:	ca 1e       	adc	r12, r26
    6c64:	db 1e       	adc	r13, r27
    6c66:	a6 14       	cp	r10, r6
    6c68:	b7 04       	cpc	r11, r7
    6c6a:	c8 04       	cpc	r12, r8
    6c6c:	d9 04       	cpc	r13, r9
    6c6e:	20 f4       	brcc	.+8      	; 0x6c78 <__divdi3+0xe0a>
    6c70:	20 50       	subi	r18, 0x00	; 0
    6c72:	30 40       	sbci	r19, 0x00	; 0
    6c74:	4f 4f       	sbci	r20, 0xFF	; 255
    6c76:	5f 4f       	sbci	r21, 0xFF	; 255
    6c78:	c6 01       	movw	r24, r12
    6c7a:	aa 27       	eor	r26, r26
    6c7c:	bb 27       	eor	r27, r27
    6c7e:	82 0f       	add	r24, r18
    6c80:	93 1f       	adc	r25, r19
    6c82:	a4 1f       	adc	r26, r20
    6c84:	b5 1f       	adc	r27, r21
    6c86:	2d a5       	ldd	r18, Y+45	; 0x2d
    6c88:	3e a5       	ldd	r19, Y+46	; 0x2e
    6c8a:	4f a5       	ldd	r20, Y+47	; 0x2f
    6c8c:	58 a9       	ldd	r21, Y+48	; 0x30
    6c8e:	28 17       	cp	r18, r24
    6c90:	39 07       	cpc	r19, r25
    6c92:	4a 07       	cpc	r20, r26
    6c94:	5b 07       	cpc	r21, r27
    6c96:	18 f1       	brcs	.+70     	; 0x6cde <__divdi3+0xe70>
    6c98:	82 17       	cp	r24, r18
    6c9a:	93 07       	cpc	r25, r19
    6c9c:	a4 07       	cpc	r26, r20
    6c9e:	b5 07       	cpc	r27, r21
    6ca0:	a1 f5       	brne	.+104    	; 0x6d0a <__divdi3+0xe9c>
    6ca2:	65 01       	movw	r12, r10
    6ca4:	bb 24       	eor	r11, r11
    6ca6:	aa 24       	eor	r10, r10
    6ca8:	89 a9       	ldd	r24, Y+49	; 0x31
    6caa:	9a a9       	ldd	r25, Y+50	; 0x32
    6cac:	ab a9       	ldd	r26, Y+51	; 0x33
    6cae:	bc a9       	ldd	r27, Y+52	; 0x34
    6cb0:	a0 70       	andi	r26, 0x00	; 0
    6cb2:	b0 70       	andi	r27, 0x00	; 0
    6cb4:	a8 0e       	add	r10, r24
    6cb6:	b9 1e       	adc	r11, r25
    6cb8:	ca 1e       	adc	r12, r26
    6cba:	db 1e       	adc	r13, r27
    6cbc:	8d a9       	ldd	r24, Y+53	; 0x35
    6cbe:	9e a9       	ldd	r25, Y+54	; 0x36
    6cc0:	af a9       	ldd	r26, Y+55	; 0x37
    6cc2:	b8 ad       	ldd	r27, Y+56	; 0x38
    6cc4:	09 ac       	ldd	r0, Y+57	; 0x39
    6cc6:	04 c0       	rjmp	.+8      	; 0x6cd0 <__divdi3+0xe62>
    6cc8:	88 0f       	add	r24, r24
    6cca:	99 1f       	adc	r25, r25
    6ccc:	aa 1f       	adc	r26, r26
    6cce:	bb 1f       	adc	r27, r27
    6cd0:	0a 94       	dec	r0
    6cd2:	d2 f7       	brpl	.-12     	; 0x6cc8 <__divdi3+0xe5a>
    6cd4:	8a 15       	cp	r24, r10
    6cd6:	9b 05       	cpc	r25, r11
    6cd8:	ac 05       	cpc	r26, r12
    6cda:	bd 05       	cpc	r27, r13
    6cdc:	b0 f4       	brcc	.+44     	; 0x6d0a <__divdi3+0xe9c>
    6cde:	08 94       	sec
    6ce0:	e1 08       	sbc	r14, r1
    6ce2:	f1 08       	sbc	r15, r1
    6ce4:	01 09       	sbc	r16, r1
    6ce6:	11 09       	sbc	r17, r1
    6ce8:	10 c0       	rjmp	.+32     	; 0x6d0a <__divdi3+0xe9c>
    6cea:	aa 24       	eor	r10, r10
    6cec:	bb 24       	eor	r11, r11
    6cee:	65 01       	movw	r12, r10
    6cf0:	ee 24       	eor	r14, r14
    6cf2:	ff 24       	eor	r15, r15
    6cf4:	87 01       	movw	r16, r14
    6cf6:	0c c0       	rjmp	.+24     	; 0x6d10 <__divdi3+0xea2>
    6cf8:	aa 24       	eor	r10, r10
    6cfa:	bb 24       	eor	r11, r11
    6cfc:	65 01       	movw	r12, r10
    6cfe:	81 e0       	ldi	r24, 0x01	; 1
    6d00:	e8 2e       	mov	r14, r24
    6d02:	f1 2c       	mov	r15, r1
    6d04:	01 2d       	mov	r16, r1
    6d06:	11 2d       	mov	r17, r1
    6d08:	03 c0       	rjmp	.+6      	; 0x6d10 <__divdi3+0xea2>
    6d0a:	aa 24       	eor	r10, r10
    6d0c:	bb 24       	eor	r11, r11
    6d0e:	65 01       	movw	r12, r10
    6d10:	fe 01       	movw	r30, r28
    6d12:	b1 96       	adiw	r30, 0x21	; 33
    6d14:	88 e0       	ldi	r24, 0x08	; 8
    6d16:	df 01       	movw	r26, r30
    6d18:	1d 92       	st	X+, r1
    6d1a:	8a 95       	dec	r24
    6d1c:	e9 f7       	brne	.-6      	; 0x6d18 <__divdi3+0xeaa>
    6d1e:	e9 a2       	std	Y+33, r14	; 0x21
    6d20:	fa a2       	std	Y+34, r15	; 0x22
    6d22:	0b a3       	std	Y+35, r16	; 0x23
    6d24:	1c a3       	std	Y+36, r17	; 0x24
    6d26:	ad a2       	std	Y+37, r10	; 0x25
    6d28:	be a2       	std	Y+38, r11	; 0x26
    6d2a:	cf a2       	std	Y+39, r12	; 0x27
    6d2c:	d8 a6       	std	Y+40, r13	; 0x28
    6d2e:	2e 2d       	mov	r18, r14
    6d30:	3a a1       	ldd	r19, Y+34	; 0x22
    6d32:	4b a1       	ldd	r20, Y+35	; 0x23
    6d34:	5c a1       	ldd	r21, Y+36	; 0x24
    6d36:	6a 2d       	mov	r22, r10
    6d38:	7e a1       	ldd	r23, Y+38	; 0x26
    6d3a:	8f a1       	ldd	r24, Y+39	; 0x27
    6d3c:	98 a5       	ldd	r25, Y+40	; 0x28
    6d3e:	21 96       	adiw	r28, 0x01	; 1
    6d40:	2c ac       	ldd	r2, Y+60	; 0x3c
    6d42:	3d ac       	ldd	r3, Y+61	; 0x3d
    6d44:	4e ac       	ldd	r4, Y+62	; 0x3e
    6d46:	5f ac       	ldd	r5, Y+63	; 0x3f
    6d48:	21 97       	sbiw	r28, 0x01	; 1
    6d4a:	21 14       	cp	r2, r1
    6d4c:	31 04       	cpc	r3, r1
    6d4e:	41 04       	cpc	r4, r1
    6d50:	51 04       	cpc	r5, r1
    6d52:	09 f4       	brne	.+2      	; 0x6d56 <__divdi3+0xee8>
    6d54:	56 c0       	rjmp	.+172    	; 0x6e02 <__divdi3+0xf94>
    6d56:	21 95       	neg	r18
    6d58:	e1 e0       	ldi	r30, 0x01	; 1
    6d5a:	12 16       	cp	r1, r18
    6d5c:	08 f0       	brcs	.+2      	; 0x6d60 <__divdi3+0xef2>
    6d5e:	e0 e0       	ldi	r30, 0x00	; 0
    6d60:	31 95       	neg	r19
    6d62:	f1 e0       	ldi	r31, 0x01	; 1
    6d64:	13 16       	cp	r1, r19
    6d66:	08 f0       	brcs	.+2      	; 0x6d6a <__divdi3+0xefc>
    6d68:	f0 e0       	ldi	r31, 0x00	; 0
    6d6a:	03 2f       	mov	r16, r19
    6d6c:	0e 1b       	sub	r16, r30
    6d6e:	e1 e0       	ldi	r30, 0x01	; 1
    6d70:	30 17       	cp	r19, r16
    6d72:	08 f0       	brcs	.+2      	; 0x6d76 <__divdi3+0xf08>
    6d74:	e0 e0       	ldi	r30, 0x00	; 0
    6d76:	fe 2b       	or	r31, r30
    6d78:	41 95       	neg	r20
    6d7a:	e1 e0       	ldi	r30, 0x01	; 1
    6d7c:	14 16       	cp	r1, r20
    6d7e:	08 f0       	brcs	.+2      	; 0x6d82 <__divdi3+0xf14>
    6d80:	e0 e0       	ldi	r30, 0x00	; 0
    6d82:	14 2f       	mov	r17, r20
    6d84:	1f 1b       	sub	r17, r31
    6d86:	31 e0       	ldi	r19, 0x01	; 1
    6d88:	41 17       	cp	r20, r17
    6d8a:	08 f0       	brcs	.+2      	; 0x6d8e <__divdi3+0xf20>
    6d8c:	30 e0       	ldi	r19, 0x00	; 0
    6d8e:	e3 2b       	or	r30, r19
    6d90:	51 95       	neg	r21
    6d92:	f1 e0       	ldi	r31, 0x01	; 1
    6d94:	15 16       	cp	r1, r21
    6d96:	08 f0       	brcs	.+2      	; 0x6d9a <__divdi3+0xf2c>
    6d98:	f0 e0       	ldi	r31, 0x00	; 0
    6d9a:	b5 2f       	mov	r27, r21
    6d9c:	be 1b       	sub	r27, r30
    6d9e:	31 e0       	ldi	r19, 0x01	; 1
    6da0:	5b 17       	cp	r21, r27
    6da2:	08 f0       	brcs	.+2      	; 0x6da6 <__divdi3+0xf38>
    6da4:	30 e0       	ldi	r19, 0x00	; 0
    6da6:	f3 2b       	or	r31, r19
    6da8:	61 95       	neg	r22
    6daa:	e1 e0       	ldi	r30, 0x01	; 1
    6dac:	16 16       	cp	r1, r22
    6dae:	08 f0       	brcs	.+2      	; 0x6db2 <__divdi3+0xf44>
    6db0:	e0 e0       	ldi	r30, 0x00	; 0
    6db2:	a6 2e       	mov	r10, r22
    6db4:	af 1a       	sub	r10, r31
    6db6:	31 e0       	ldi	r19, 0x01	; 1
    6db8:	6a 15       	cp	r22, r10
    6dba:	08 f0       	brcs	.+2      	; 0x6dbe <__divdi3+0xf50>
    6dbc:	30 e0       	ldi	r19, 0x00	; 0
    6dbe:	e3 2b       	or	r30, r19
    6dc0:	71 95       	neg	r23
    6dc2:	f1 e0       	ldi	r31, 0x01	; 1
    6dc4:	17 16       	cp	r1, r23
    6dc6:	08 f0       	brcs	.+2      	; 0x6dca <__divdi3+0xf5c>
    6dc8:	f0 e0       	ldi	r31, 0x00	; 0
    6dca:	a7 2f       	mov	r26, r23
    6dcc:	ae 1b       	sub	r26, r30
    6dce:	31 e0       	ldi	r19, 0x01	; 1
    6dd0:	7a 17       	cp	r23, r26
    6dd2:	08 f0       	brcs	.+2      	; 0x6dd6 <__divdi3+0xf68>
    6dd4:	30 e0       	ldi	r19, 0x00	; 0
    6dd6:	f3 2b       	or	r31, r19
    6dd8:	81 95       	neg	r24
    6dda:	e1 e0       	ldi	r30, 0x01	; 1
    6ddc:	18 16       	cp	r1, r24
    6dde:	08 f0       	brcs	.+2      	; 0x6de2 <__divdi3+0xf74>
    6de0:	e0 e0       	ldi	r30, 0x00	; 0
    6de2:	38 2e       	mov	r3, r24
    6de4:	3f 1a       	sub	r3, r31
    6de6:	f3 2d       	mov	r31, r3
    6de8:	31 e0       	ldi	r19, 0x01	; 1
    6dea:	83 15       	cp	r24, r3
    6dec:	08 f0       	brcs	.+2      	; 0x6df0 <__divdi3+0xf82>
    6dee:	30 e0       	ldi	r19, 0x00	; 0
    6df0:	e3 2b       	or	r30, r19
    6df2:	91 95       	neg	r25
    6df4:	30 2f       	mov	r19, r16
    6df6:	41 2f       	mov	r20, r17
    6df8:	5b 2f       	mov	r21, r27
    6dfa:	6a 2d       	mov	r22, r10
    6dfc:	7a 2f       	mov	r23, r26
    6dfe:	8f 2f       	mov	r24, r31
    6e00:	9e 1b       	sub	r25, r30
    6e02:	c4 5b       	subi	r28, 0xB4	; 180
    6e04:	df 4f       	sbci	r29, 0xFF	; 255
    6e06:	e2 e1       	ldi	r30, 0x12	; 18
    6e08:	0c 94 8e 3f 	jmp	0x7f1c	; 0x7f1c <__epilogue_restores__>

00006e0c <__moddi3>:
    6e0c:	a4 e5       	ldi	r26, 0x54	; 84
    6e0e:	b0 e0       	ldi	r27, 0x00	; 0
    6e10:	ec e0       	ldi	r30, 0x0C	; 12
    6e12:	f7 e3       	ldi	r31, 0x37	; 55
    6e14:	0c 94 72 3f 	jmp	0x7ee4	; 0x7ee4 <__prologue_saves__>
    6e18:	f5 01       	movw	r30, r10
    6e1a:	29 83       	std	Y+1, r18	; 0x01
    6e1c:	3a 83       	std	Y+2, r19	; 0x02
    6e1e:	4b 83       	std	Y+3, r20	; 0x03
    6e20:	5c 83       	std	Y+4, r21	; 0x04
    6e22:	6d 83       	std	Y+5, r22	; 0x05
    6e24:	7e 83       	std	Y+6, r23	; 0x06
    6e26:	8f 83       	std	Y+7, r24	; 0x07
    6e28:	98 87       	std	Y+8, r25	; 0x08
    6e2a:	a9 86       	std	Y+9, r10	; 0x09
    6e2c:	fa 87       	std	Y+10, r31	; 0x0a
    6e2e:	cb 86       	std	Y+11, r12	; 0x0b
    6e30:	dc 86       	std	Y+12, r13	; 0x0c
    6e32:	ed 86       	std	Y+13, r14	; 0x0d
    6e34:	fe 86       	std	Y+14, r15	; 0x0e
    6e36:	0f 87       	std	Y+15, r16	; 0x0f
    6e38:	18 8b       	std	Y+16, r17	; 0x10
    6e3a:	8d 80       	ldd	r8, Y+5	; 0x05
    6e3c:	9e 80       	ldd	r9, Y+6	; 0x06
    6e3e:	af 80       	ldd	r10, Y+7	; 0x07
    6e40:	b8 84       	ldd	r11, Y+8	; 0x08
    6e42:	b7 fe       	sbrs	r11, 7
    6e44:	67 c0       	rjmp	.+206    	; 0x6f14 <__moddi3+0x108>
    6e46:	21 95       	neg	r18
    6e48:	b1 e0       	ldi	r27, 0x01	; 1
    6e4a:	12 16       	cp	r1, r18
    6e4c:	08 f0       	brcs	.+2      	; 0x6e50 <__moddi3+0x44>
    6e4e:	b0 e0       	ldi	r27, 0x00	; 0
    6e50:	31 95       	neg	r19
    6e52:	a1 e0       	ldi	r26, 0x01	; 1
    6e54:	13 16       	cp	r1, r19
    6e56:	08 f0       	brcs	.+2      	; 0x6e5a <__moddi3+0x4e>
    6e58:	a0 e0       	ldi	r26, 0x00	; 0
    6e5a:	23 2e       	mov	r2, r19
    6e5c:	2b 1a       	sub	r2, r27
    6e5e:	b2 2d       	mov	r27, r2
    6e60:	bb 24       	eor	r11, r11
    6e62:	b3 94       	inc	r11
    6e64:	32 15       	cp	r19, r2
    6e66:	08 f0       	brcs	.+2      	; 0x6e6a <__moddi3+0x5e>
    6e68:	bb 24       	eor	r11, r11
    6e6a:	ab 29       	or	r26, r11
    6e6c:	41 95       	neg	r20
    6e6e:	31 e0       	ldi	r19, 0x01	; 1
    6e70:	14 16       	cp	r1, r20
    6e72:	08 f0       	brcs	.+2      	; 0x6e76 <__moddi3+0x6a>
    6e74:	30 e0       	ldi	r19, 0x00	; 0
    6e76:	34 2e       	mov	r3, r20
    6e78:	3a 1a       	sub	r3, r26
    6e7a:	a3 2d       	mov	r26, r3
    6e7c:	bb 24       	eor	r11, r11
    6e7e:	b3 94       	inc	r11
    6e80:	43 15       	cp	r20, r3
    6e82:	08 f0       	brcs	.+2      	; 0x6e86 <__moddi3+0x7a>
    6e84:	bb 24       	eor	r11, r11
    6e86:	3b 29       	or	r19, r11
    6e88:	51 95       	neg	r21
    6e8a:	41 e0       	ldi	r20, 0x01	; 1
    6e8c:	15 16       	cp	r1, r21
    6e8e:	08 f0       	brcs	.+2      	; 0x6e92 <__moddi3+0x86>
    6e90:	40 e0       	ldi	r20, 0x00	; 0
    6e92:	a5 2e       	mov	r10, r21
    6e94:	a3 1a       	sub	r10, r19
    6e96:	31 e0       	ldi	r19, 0x01	; 1
    6e98:	5a 15       	cp	r21, r10
    6e9a:	08 f0       	brcs	.+2      	; 0x6e9e <__moddi3+0x92>
    6e9c:	30 e0       	ldi	r19, 0x00	; 0
    6e9e:	43 2b       	or	r20, r19
    6ea0:	61 95       	neg	r22
    6ea2:	31 e0       	ldi	r19, 0x01	; 1
    6ea4:	16 16       	cp	r1, r22
    6ea6:	08 f0       	brcs	.+2      	; 0x6eaa <__moddi3+0x9e>
    6ea8:	30 e0       	ldi	r19, 0x00	; 0
    6eaa:	b6 2e       	mov	r11, r22
    6eac:	b4 1a       	sub	r11, r20
    6eae:	41 e0       	ldi	r20, 0x01	; 1
    6eb0:	6b 15       	cp	r22, r11
    6eb2:	08 f0       	brcs	.+2      	; 0x6eb6 <__moddi3+0xaa>
    6eb4:	40 e0       	ldi	r20, 0x00	; 0
    6eb6:	34 2b       	or	r19, r20
    6eb8:	71 95       	neg	r23
    6eba:	41 e0       	ldi	r20, 0x01	; 1
    6ebc:	17 16       	cp	r1, r23
    6ebe:	08 f0       	brcs	.+2      	; 0x6ec2 <__moddi3+0xb6>
    6ec0:	40 e0       	ldi	r20, 0x00	; 0
    6ec2:	57 2f       	mov	r21, r23
    6ec4:	53 1b       	sub	r21, r19
    6ec6:	31 e0       	ldi	r19, 0x01	; 1
    6ec8:	75 17       	cp	r23, r21
    6eca:	08 f0       	brcs	.+2      	; 0x6ece <__moddi3+0xc2>
    6ecc:	30 e0       	ldi	r19, 0x00	; 0
    6ece:	43 2b       	or	r20, r19
    6ed0:	81 95       	neg	r24
    6ed2:	31 e0       	ldi	r19, 0x01	; 1
    6ed4:	18 16       	cp	r1, r24
    6ed6:	08 f0       	brcs	.+2      	; 0x6eda <__moddi3+0xce>
    6ed8:	30 e0       	ldi	r19, 0x00	; 0
    6eda:	48 2e       	mov	r4, r24
    6edc:	44 1a       	sub	r4, r20
    6ede:	44 2d       	mov	r20, r4
    6ee0:	61 e0       	ldi	r22, 0x01	; 1
    6ee2:	84 15       	cp	r24, r4
    6ee4:	08 f0       	brcs	.+2      	; 0x6ee8 <__moddi3+0xdc>
    6ee6:	60 e0       	ldi	r22, 0x00	; 0
    6ee8:	36 2b       	or	r19, r22
    6eea:	91 95       	neg	r25
    6eec:	93 1b       	sub	r25, r19
    6eee:	29 83       	std	Y+1, r18	; 0x01
    6ef0:	ba 83       	std	Y+2, r27	; 0x02
    6ef2:	ab 83       	std	Y+3, r26	; 0x03
    6ef4:	ac 82       	std	Y+4, r10	; 0x04
    6ef6:	bd 82       	std	Y+5, r11	; 0x05
    6ef8:	5e 83       	std	Y+6, r21	; 0x06
    6efa:	4f 83       	std	Y+7, r20	; 0x07
    6efc:	98 87       	std	Y+8, r25	; 0x08
    6efe:	66 24       	eor	r6, r6
    6f00:	6a 94       	dec	r6
    6f02:	76 2c       	mov	r7, r6
    6f04:	43 01       	movw	r8, r6
    6f06:	65 96       	adiw	r28, 0x15	; 21
    6f08:	6c ae       	std	Y+60, r6	; 0x3c
    6f0a:	7d ae       	std	Y+61, r7	; 0x3d
    6f0c:	8e ae       	std	Y+62, r8	; 0x3e
    6f0e:	9f ae       	std	Y+63, r9	; 0x3f
    6f10:	65 97       	sbiw	r28, 0x15	; 21
    6f12:	06 c0       	rjmp	.+12     	; 0x6f20 <__moddi3+0x114>
    6f14:	65 96       	adiw	r28, 0x15	; 21
    6f16:	1c ae       	std	Y+60, r1	; 0x3c
    6f18:	1d ae       	std	Y+61, r1	; 0x3d
    6f1a:	1e ae       	std	Y+62, r1	; 0x3e
    6f1c:	1f ae       	std	Y+63, r1	; 0x3f
    6f1e:	65 97       	sbiw	r28, 0x15	; 21
    6f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f24:	af 85       	ldd	r26, Y+15	; 0x0f
    6f26:	b8 89       	ldd	r27, Y+16	; 0x10
    6f28:	b7 ff       	sbrs	r27, 7
    6f2a:	58 c0       	rjmp	.+176    	; 0x6fdc <__moddi3+0x1d0>
    6f2c:	e1 95       	neg	r30
    6f2e:	81 e0       	ldi	r24, 0x01	; 1
    6f30:	1e 16       	cp	r1, r30
    6f32:	08 f0       	brcs	.+2      	; 0x6f36 <__moddi3+0x12a>
    6f34:	80 e0       	ldi	r24, 0x00	; 0
    6f36:	f1 95       	neg	r31
    6f38:	91 e0       	ldi	r25, 0x01	; 1
    6f3a:	1f 16       	cp	r1, r31
    6f3c:	08 f0       	brcs	.+2      	; 0x6f40 <__moddi3+0x134>
    6f3e:	90 e0       	ldi	r25, 0x00	; 0
    6f40:	4f 2f       	mov	r20, r31
    6f42:	48 1b       	sub	r20, r24
    6f44:	81 e0       	ldi	r24, 0x01	; 1
    6f46:	f4 17       	cp	r31, r20
    6f48:	08 f0       	brcs	.+2      	; 0x6f4c <__moddi3+0x140>
    6f4a:	80 e0       	ldi	r24, 0x00	; 0
    6f4c:	98 2b       	or	r25, r24
    6f4e:	c1 94       	neg	r12
    6f50:	81 e0       	ldi	r24, 0x01	; 1
    6f52:	1c 14       	cp	r1, r12
    6f54:	08 f0       	brcs	.+2      	; 0x6f58 <__moddi3+0x14c>
    6f56:	80 e0       	ldi	r24, 0x00	; 0
    6f58:	6c 2d       	mov	r22, r12
    6f5a:	69 1b       	sub	r22, r25
    6f5c:	91 e0       	ldi	r25, 0x01	; 1
    6f5e:	c6 16       	cp	r12, r22
    6f60:	08 f0       	brcs	.+2      	; 0x6f64 <__moddi3+0x158>
    6f62:	90 e0       	ldi	r25, 0x00	; 0
    6f64:	89 2b       	or	r24, r25
    6f66:	d1 94       	neg	r13
    6f68:	91 e0       	ldi	r25, 0x01	; 1
    6f6a:	1d 14       	cp	r1, r13
    6f6c:	08 f0       	brcs	.+2      	; 0x6f70 <__moddi3+0x164>
    6f6e:	90 e0       	ldi	r25, 0x00	; 0
    6f70:	5d 2d       	mov	r21, r13
    6f72:	58 1b       	sub	r21, r24
    6f74:	81 e0       	ldi	r24, 0x01	; 1
    6f76:	d5 16       	cp	r13, r21
    6f78:	08 f0       	brcs	.+2      	; 0x6f7c <__moddi3+0x170>
    6f7a:	80 e0       	ldi	r24, 0x00	; 0
    6f7c:	98 2b       	or	r25, r24
    6f7e:	e1 94       	neg	r14
    6f80:	81 e0       	ldi	r24, 0x01	; 1
    6f82:	1e 14       	cp	r1, r14
    6f84:	08 f0       	brcs	.+2      	; 0x6f88 <__moddi3+0x17c>
    6f86:	80 e0       	ldi	r24, 0x00	; 0
    6f88:	3e 2d       	mov	r19, r14
    6f8a:	39 1b       	sub	r19, r25
    6f8c:	91 e0       	ldi	r25, 0x01	; 1
    6f8e:	e3 16       	cp	r14, r19
    6f90:	08 f0       	brcs	.+2      	; 0x6f94 <__moddi3+0x188>
    6f92:	90 e0       	ldi	r25, 0x00	; 0
    6f94:	89 2b       	or	r24, r25
    6f96:	f1 94       	neg	r15
    6f98:	91 e0       	ldi	r25, 0x01	; 1
    6f9a:	1f 14       	cp	r1, r15
    6f9c:	08 f0       	brcs	.+2      	; 0x6fa0 <__moddi3+0x194>
    6f9e:	90 e0       	ldi	r25, 0x00	; 0
    6fa0:	2f 2d       	mov	r18, r15
    6fa2:	28 1b       	sub	r18, r24
    6fa4:	81 e0       	ldi	r24, 0x01	; 1
    6fa6:	f2 16       	cp	r15, r18
    6fa8:	08 f0       	brcs	.+2      	; 0x6fac <__moddi3+0x1a0>
    6faa:	80 e0       	ldi	r24, 0x00	; 0
    6fac:	98 2b       	or	r25, r24
    6fae:	01 95       	neg	r16
    6fb0:	81 e0       	ldi	r24, 0x01	; 1
    6fb2:	10 16       	cp	r1, r16
    6fb4:	08 f0       	brcs	.+2      	; 0x6fb8 <__moddi3+0x1ac>
    6fb6:	80 e0       	ldi	r24, 0x00	; 0
    6fb8:	70 2e       	mov	r7, r16
    6fba:	79 1a       	sub	r7, r25
    6fbc:	97 2d       	mov	r25, r7
    6fbe:	71 e0       	ldi	r23, 0x01	; 1
    6fc0:	07 15       	cp	r16, r7
    6fc2:	08 f0       	brcs	.+2      	; 0x6fc6 <__moddi3+0x1ba>
    6fc4:	70 e0       	ldi	r23, 0x00	; 0
    6fc6:	87 2b       	or	r24, r23
    6fc8:	11 95       	neg	r17
    6fca:	18 1b       	sub	r17, r24
    6fcc:	e9 87       	std	Y+9, r30	; 0x09
    6fce:	4a 87       	std	Y+10, r20	; 0x0a
    6fd0:	6b 87       	std	Y+11, r22	; 0x0b
    6fd2:	5c 87       	std	Y+12, r21	; 0x0c
    6fd4:	3d 87       	std	Y+13, r19	; 0x0d
    6fd6:	2e 87       	std	Y+14, r18	; 0x0e
    6fd8:	9f 87       	std	Y+15, r25	; 0x0f
    6fda:	18 8b       	std	Y+16, r17	; 0x10
    6fdc:	e9 84       	ldd	r14, Y+9	; 0x09
    6fde:	fa 84       	ldd	r15, Y+10	; 0x0a
    6fe0:	0b 85       	ldd	r16, Y+11	; 0x0b
    6fe2:	1c 85       	ldd	r17, Y+12	; 0x0c
    6fe4:	bd 85       	ldd	r27, Y+13	; 0x0d
    6fe6:	ae 85       	ldd	r26, Y+14	; 0x0e
    6fe8:	9f 85       	ldd	r25, Y+15	; 0x0f
    6fea:	88 89       	ldd	r24, Y+16	; 0x10
    6fec:	f9 81       	ldd	r31, Y+1	; 0x01
    6fee:	ea 81       	ldd	r30, Y+2	; 0x02
    6ff0:	7b 81       	ldd	r23, Y+3	; 0x03
    6ff2:	6c 81       	ldd	r22, Y+4	; 0x04
    6ff4:	5d 81       	ldd	r21, Y+5	; 0x05
    6ff6:	4e 81       	ldd	r20, Y+6	; 0x06
    6ff8:	3f 81       	ldd	r19, Y+7	; 0x07
    6ffa:	28 85       	ldd	r18, Y+8	; 0x08
    6ffc:	e9 a2       	std	Y+33, r14	; 0x21
    6ffe:	fa a2       	std	Y+34, r15	; 0x22
    7000:	0b a3       	std	Y+35, r16	; 0x23
    7002:	1c a3       	std	Y+36, r17	; 0x24
    7004:	bd a3       	std	Y+37, r27	; 0x25
    7006:	ae a3       	std	Y+38, r26	; 0x26
    7008:	9f a3       	std	Y+39, r25	; 0x27
    700a:	88 a7       	std	Y+40, r24	; 0x28
    700c:	e9 a0       	ldd	r14, Y+33	; 0x21
    700e:	fa a0       	ldd	r15, Y+34	; 0x22
    7010:	0b a1       	ldd	r16, Y+35	; 0x23
    7012:	1c a1       	ldd	r17, Y+36	; 0x24
    7014:	8d a1       	ldd	r24, Y+37	; 0x25
    7016:	9e a1       	ldd	r25, Y+38	; 0x26
    7018:	af a1       	ldd	r26, Y+39	; 0x27
    701a:	b8 a5       	ldd	r27, Y+40	; 0x28
    701c:	f9 ab       	std	Y+49, r31	; 0x31
    701e:	ea ab       	std	Y+50, r30	; 0x32
    7020:	7b ab       	std	Y+51, r23	; 0x33
    7022:	6c ab       	std	Y+52, r22	; 0x34
    7024:	89 a8       	ldd	r8, Y+49	; 0x31
    7026:	9a a8       	ldd	r9, Y+50	; 0x32
    7028:	ab a8       	ldd	r10, Y+51	; 0x33
    702a:	bc a8       	ldd	r11, Y+52	; 0x34
    702c:	21 96       	adiw	r28, 0x01	; 1
    702e:	8c ae       	std	Y+60, r8	; 0x3c
    7030:	9d ae       	std	Y+61, r9	; 0x3d
    7032:	ae ae       	std	Y+62, r10	; 0x3e
    7034:	bf ae       	std	Y+63, r11	; 0x3f
    7036:	21 97       	sbiw	r28, 0x01	; 1
    7038:	65 2e       	mov	r6, r21
    703a:	74 2e       	mov	r7, r20
    703c:	83 2e       	mov	r8, r19
    703e:	92 2e       	mov	r9, r18
    7040:	13 01       	movw	r2, r6
    7042:	24 01       	movw	r4, r8
    7044:	00 97       	sbiw	r24, 0x00	; 0
    7046:	a1 05       	cpc	r26, r1
    7048:	b1 05       	cpc	r27, r1
    704a:	09 f0       	breq	.+2      	; 0x704e <__moddi3+0x242>
    704c:	38 c3       	rjmp	.+1648   	; 0x76be <__moddi3+0x8b2>
    704e:	6e 14       	cp	r6, r14
    7050:	7f 04       	cpc	r7, r15
    7052:	80 06       	cpc	r8, r16
    7054:	91 06       	cpc	r9, r17
    7056:	08 f0       	brcs	.+2      	; 0x705a <__moddi3+0x24e>
    7058:	14 c1       	rjmp	.+552    	; 0x7282 <__moddi3+0x476>
    705a:	20 e0       	ldi	r18, 0x00	; 0
    705c:	e2 16       	cp	r14, r18
    705e:	20 e0       	ldi	r18, 0x00	; 0
    7060:	f2 06       	cpc	r15, r18
    7062:	21 e0       	ldi	r18, 0x01	; 1
    7064:	02 07       	cpc	r16, r18
    7066:	20 e0       	ldi	r18, 0x00	; 0
    7068:	12 07       	cpc	r17, r18
    706a:	58 f4       	brcc	.+22     	; 0x7082 <__moddi3+0x276>
    706c:	3f ef       	ldi	r19, 0xFF	; 255
    706e:	e3 16       	cp	r14, r19
    7070:	f1 04       	cpc	r15, r1
    7072:	01 05       	cpc	r16, r1
    7074:	11 05       	cpc	r17, r1
    7076:	09 f0       	breq	.+2      	; 0x707a <__moddi3+0x26e>
    7078:	90 f4       	brcc	.+36     	; 0x709e <__moddi3+0x292>
    707a:	80 e0       	ldi	r24, 0x00	; 0
    707c:	90 e0       	ldi	r25, 0x00	; 0
    707e:	dc 01       	movw	r26, r24
    7080:	17 c0       	rjmp	.+46     	; 0x70b0 <__moddi3+0x2a4>
    7082:	40 e0       	ldi	r20, 0x00	; 0
    7084:	e4 16       	cp	r14, r20
    7086:	40 e0       	ldi	r20, 0x00	; 0
    7088:	f4 06       	cpc	r15, r20
    708a:	40 e0       	ldi	r20, 0x00	; 0
    708c:	04 07       	cpc	r16, r20
    708e:	41 e0       	ldi	r20, 0x01	; 1
    7090:	14 07       	cpc	r17, r20
    7092:	50 f4       	brcc	.+20     	; 0x70a8 <__moddi3+0x29c>
    7094:	80 e1       	ldi	r24, 0x10	; 16
    7096:	90 e0       	ldi	r25, 0x00	; 0
    7098:	a0 e0       	ldi	r26, 0x00	; 0
    709a:	b0 e0       	ldi	r27, 0x00	; 0
    709c:	09 c0       	rjmp	.+18     	; 0x70b0 <__moddi3+0x2a4>
    709e:	88 e0       	ldi	r24, 0x08	; 8
    70a0:	90 e0       	ldi	r25, 0x00	; 0
    70a2:	a0 e0       	ldi	r26, 0x00	; 0
    70a4:	b0 e0       	ldi	r27, 0x00	; 0
    70a6:	04 c0       	rjmp	.+8      	; 0x70b0 <__moddi3+0x2a4>
    70a8:	88 e1       	ldi	r24, 0x18	; 24
    70aa:	90 e0       	ldi	r25, 0x00	; 0
    70ac:	a0 e0       	ldi	r26, 0x00	; 0
    70ae:	b0 e0       	ldi	r27, 0x00	; 0
    70b0:	a8 01       	movw	r20, r16
    70b2:	97 01       	movw	r18, r14
    70b4:	08 2e       	mov	r0, r24
    70b6:	04 c0       	rjmp	.+8      	; 0x70c0 <__moddi3+0x2b4>
    70b8:	56 95       	lsr	r21
    70ba:	47 95       	ror	r20
    70bc:	37 95       	ror	r19
    70be:	27 95       	ror	r18
    70c0:	0a 94       	dec	r0
    70c2:	d2 f7       	brpl	.-12     	; 0x70b8 <__moddi3+0x2ac>
    70c4:	24 5b       	subi	r18, 0xB4	; 180
    70c6:	3e 4f       	sbci	r19, 0xFE	; 254
    70c8:	f9 01       	movw	r30, r18
    70ca:	20 81       	ld	r18, Z
    70cc:	30 e2       	ldi	r19, 0x20	; 32
    70ce:	a3 2e       	mov	r10, r19
    70d0:	b1 2c       	mov	r11, r1
    70d2:	c1 2c       	mov	r12, r1
    70d4:	d1 2c       	mov	r13, r1
    70d6:	a8 1a       	sub	r10, r24
    70d8:	b9 0a       	sbc	r11, r25
    70da:	ca 0a       	sbc	r12, r26
    70dc:	db 0a       	sbc	r13, r27
    70de:	a2 1a       	sub	r10, r18
    70e0:	b1 08       	sbc	r11, r1
    70e2:	c1 08       	sbc	r12, r1
    70e4:	d1 08       	sbc	r13, r1
    70e6:	ad aa       	std	Y+53, r10	; 0x35
    70e8:	be aa       	std	Y+54, r11	; 0x36
    70ea:	cf aa       	std	Y+55, r12	; 0x37
    70ec:	d8 ae       	std	Y+56, r13	; 0x38
    70ee:	a1 14       	cp	r10, r1
    70f0:	b1 04       	cpc	r11, r1
    70f2:	c1 04       	cpc	r12, r1
    70f4:	d1 04       	cpc	r13, r1
    70f6:	a9 f1       	breq	.+106    	; 0x7162 <__moddi3+0x356>
    70f8:	2d a9       	ldd	r18, Y+53	; 0x35
    70fa:	02 2e       	mov	r0, r18
    70fc:	04 c0       	rjmp	.+8      	; 0x7106 <__moddi3+0x2fa>
    70fe:	ee 0c       	add	r14, r14
    7100:	ff 1c       	adc	r15, r15
    7102:	00 1f       	adc	r16, r16
    7104:	11 1f       	adc	r17, r17
    7106:	0a 94       	dec	r0
    7108:	d2 f7       	brpl	.-12     	; 0x70fe <__moddi3+0x2f2>
    710a:	02 2e       	mov	r0, r18
    710c:	04 c0       	rjmp	.+8      	; 0x7116 <__moddi3+0x30a>
    710e:	66 0c       	add	r6, r6
    7110:	77 1c       	adc	r7, r7
    7112:	88 1c       	adc	r8, r8
    7114:	99 1c       	adc	r9, r9
    7116:	0a 94       	dec	r0
    7118:	d2 f7       	brpl	.-12     	; 0x710e <__moddi3+0x302>
    711a:	80 e2       	ldi	r24, 0x20	; 32
    711c:	90 e0       	ldi	r25, 0x00	; 0
    711e:	8a 19       	sub	r24, r10
    7120:	9b 09       	sbc	r25, r11
    7122:	29 a8       	ldd	r2, Y+49	; 0x31
    7124:	3a a8       	ldd	r3, Y+50	; 0x32
    7126:	4b a8       	ldd	r4, Y+51	; 0x33
    7128:	5c a8       	ldd	r5, Y+52	; 0x34
    712a:	04 c0       	rjmp	.+8      	; 0x7134 <__moddi3+0x328>
    712c:	56 94       	lsr	r5
    712e:	47 94       	ror	r4
    7130:	37 94       	ror	r3
    7132:	27 94       	ror	r2
    7134:	8a 95       	dec	r24
    7136:	d2 f7       	brpl	.-12     	; 0x712c <__moddi3+0x320>
    7138:	26 28       	or	r2, r6
    713a:	37 28       	or	r3, r7
    713c:	48 28       	or	r4, r8
    713e:	59 28       	or	r5, r9
    7140:	49 a9       	ldd	r20, Y+49	; 0x31
    7142:	5a a9       	ldd	r21, Y+50	; 0x32
    7144:	6b a9       	ldd	r22, Y+51	; 0x33
    7146:	7c a9       	ldd	r23, Y+52	; 0x34
    7148:	04 c0       	rjmp	.+8      	; 0x7152 <__moddi3+0x346>
    714a:	44 0f       	add	r20, r20
    714c:	55 1f       	adc	r21, r21
    714e:	66 1f       	adc	r22, r22
    7150:	77 1f       	adc	r23, r23
    7152:	2a 95       	dec	r18
    7154:	d2 f7       	brpl	.-12     	; 0x714a <__moddi3+0x33e>
    7156:	21 96       	adiw	r28, 0x01	; 1
    7158:	4c af       	std	Y+60, r20	; 0x3c
    715a:	5d af       	std	Y+61, r21	; 0x3d
    715c:	6e af       	std	Y+62, r22	; 0x3e
    715e:	7f af       	std	Y+63, r23	; 0x3f
    7160:	21 97       	sbiw	r28, 0x01	; 1
    7162:	b8 01       	movw	r22, r16
    7164:	88 27       	eor	r24, r24
    7166:	99 27       	eor	r25, r25
    7168:	69 ab       	std	Y+49, r22	; 0x31
    716a:	7a ab       	std	Y+50, r23	; 0x32
    716c:	8b ab       	std	Y+51, r24	; 0x33
    716e:	9c ab       	std	Y+52, r25	; 0x34
    7170:	d8 01       	movw	r26, r16
    7172:	c7 01       	movw	r24, r14
    7174:	a0 70       	andi	r26, 0x00	; 0
    7176:	b0 70       	andi	r27, 0x00	; 0
    7178:	89 af       	std	Y+57, r24	; 0x39
    717a:	9a af       	std	Y+58, r25	; 0x3a
    717c:	ab af       	std	Y+59, r26	; 0x3b
    717e:	bc af       	std	Y+60, r27	; 0x3c
    7180:	c2 01       	movw	r24, r4
    7182:	b1 01       	movw	r22, r2
    7184:	29 a9       	ldd	r18, Y+49	; 0x31
    7186:	3a a9       	ldd	r19, Y+50	; 0x32
    7188:	4b a9       	ldd	r20, Y+51	; 0x33
    718a:	5c a9       	ldd	r21, Y+52	; 0x34
    718c:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    7190:	a2 2e       	mov	r10, r18
    7192:	63 2e       	mov	r6, r19
    7194:	d4 2e       	mov	r13, r20
    7196:	c5 2e       	mov	r12, r21
    7198:	25 96       	adiw	r28, 0x05	; 5
    719a:	6c af       	std	Y+60, r22	; 0x3c
    719c:	7d af       	std	Y+61, r23	; 0x3d
    719e:	8e af       	std	Y+62, r24	; 0x3e
    71a0:	9f af       	std	Y+63, r25	; 0x3f
    71a2:	25 97       	sbiw	r28, 0x05	; 5
    71a4:	c2 01       	movw	r24, r4
    71a6:	b1 01       	movw	r22, r2
    71a8:	29 a9       	ldd	r18, Y+49	; 0x31
    71aa:	3a a9       	ldd	r19, Y+50	; 0x32
    71ac:	4b a9       	ldd	r20, Y+51	; 0x33
    71ae:	5c a9       	ldd	r21, Y+52	; 0x34
    71b0:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    71b4:	6a 2d       	mov	r22, r10
    71b6:	76 2d       	mov	r23, r6
    71b8:	8d 2d       	mov	r24, r13
    71ba:	9c 2d       	mov	r25, r12
    71bc:	29 ad       	ldd	r18, Y+57	; 0x39
    71be:	3a ad       	ldd	r19, Y+58	; 0x3a
    71c0:	4b ad       	ldd	r20, Y+59	; 0x3b
    71c2:	5c ad       	ldd	r21, Y+60	; 0x3c
    71c4:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    71c8:	5b 01       	movw	r10, r22
    71ca:	6c 01       	movw	r12, r24
    71cc:	25 96       	adiw	r28, 0x05	; 5
    71ce:	2c ac       	ldd	r2, Y+60	; 0x3c
    71d0:	3d ac       	ldd	r3, Y+61	; 0x3d
    71d2:	4e ac       	ldd	r4, Y+62	; 0x3e
    71d4:	5f ac       	ldd	r5, Y+63	; 0x3f
    71d6:	25 97       	sbiw	r28, 0x05	; 5
    71d8:	d1 01       	movw	r26, r2
    71da:	99 27       	eor	r25, r25
    71dc:	88 27       	eor	r24, r24
    71de:	21 96       	adiw	r28, 0x01	; 1
    71e0:	4c ac       	ldd	r4, Y+60	; 0x3c
    71e2:	5d ac       	ldd	r5, Y+61	; 0x3d
    71e4:	6e ac       	ldd	r6, Y+62	; 0x3e
    71e6:	7f ac       	ldd	r7, Y+63	; 0x3f
    71e8:	21 97       	sbiw	r28, 0x01	; 1
    71ea:	93 01       	movw	r18, r6
    71ec:	44 27       	eor	r20, r20
    71ee:	55 27       	eor	r21, r21
    71f0:	82 2b       	or	r24, r18
    71f2:	93 2b       	or	r25, r19
    71f4:	a4 2b       	or	r26, r20
    71f6:	b5 2b       	or	r27, r21
    71f8:	8a 15       	cp	r24, r10
    71fa:	9b 05       	cpc	r25, r11
    71fc:	ac 05       	cpc	r26, r12
    71fe:	bd 05       	cpc	r27, r13
    7200:	90 f4       	brcc	.+36     	; 0x7226 <__moddi3+0x41a>
    7202:	8e 0d       	add	r24, r14
    7204:	9f 1d       	adc	r25, r15
    7206:	a0 1f       	adc	r26, r16
    7208:	b1 1f       	adc	r27, r17
    720a:	8e 15       	cp	r24, r14
    720c:	9f 05       	cpc	r25, r15
    720e:	a0 07       	cpc	r26, r16
    7210:	b1 07       	cpc	r27, r17
    7212:	48 f0       	brcs	.+18     	; 0x7226 <__moddi3+0x41a>
    7214:	8a 15       	cp	r24, r10
    7216:	9b 05       	cpc	r25, r11
    7218:	ac 05       	cpc	r26, r12
    721a:	bd 05       	cpc	r27, r13
    721c:	20 f4       	brcc	.+8      	; 0x7226 <__moddi3+0x41a>
    721e:	8e 0d       	add	r24, r14
    7220:	9f 1d       	adc	r25, r15
    7222:	a0 1f       	adc	r26, r16
    7224:	b1 1f       	adc	r27, r17
    7226:	3c 01       	movw	r6, r24
    7228:	4d 01       	movw	r8, r26
    722a:	6a 18       	sub	r6, r10
    722c:	7b 08       	sbc	r7, r11
    722e:	8c 08       	sbc	r8, r12
    7230:	9d 08       	sbc	r9, r13
    7232:	64 01       	movw	r12, r8
    7234:	53 01       	movw	r10, r6
    7236:	c4 01       	movw	r24, r8
    7238:	b3 01       	movw	r22, r6
    723a:	29 a9       	ldd	r18, Y+49	; 0x31
    723c:	3a a9       	ldd	r19, Y+50	; 0x32
    723e:	4b a9       	ldd	r20, Y+51	; 0x33
    7240:	5c a9       	ldd	r21, Y+52	; 0x34
    7242:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    7246:	62 2e       	mov	r6, r18
    7248:	83 2e       	mov	r8, r19
    724a:	94 2e       	mov	r9, r20
    724c:	75 2e       	mov	r7, r21
    724e:	1b 01       	movw	r2, r22
    7250:	2c 01       	movw	r4, r24
    7252:	c6 01       	movw	r24, r12
    7254:	b5 01       	movw	r22, r10
    7256:	29 a9       	ldd	r18, Y+49	; 0x31
    7258:	3a a9       	ldd	r19, Y+50	; 0x32
    725a:	4b a9       	ldd	r20, Y+51	; 0x33
    725c:	5c a9       	ldd	r21, Y+52	; 0x34
    725e:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    7262:	66 2d       	mov	r22, r6
    7264:	78 2d       	mov	r23, r8
    7266:	89 2d       	mov	r24, r9
    7268:	97 2d       	mov	r25, r7
    726a:	29 ad       	ldd	r18, Y+57	; 0x39
    726c:	3a ad       	ldd	r19, Y+58	; 0x3a
    726e:	4b ad       	ldd	r20, Y+59	; 0x3b
    7270:	5c ad       	ldd	r21, Y+60	; 0x3c
    7272:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    7276:	5b 01       	movw	r10, r22
    7278:	6c 01       	movw	r12, r24
    727a:	d1 01       	movw	r26, r2
    727c:	99 27       	eor	r25, r25
    727e:	88 27       	eor	r24, r24
    7280:	de c1       	rjmp	.+956    	; 0x763e <__moddi3+0x832>
    7282:	e1 14       	cp	r14, r1
    7284:	f1 04       	cpc	r15, r1
    7286:	01 05       	cpc	r16, r1
    7288:	11 05       	cpc	r17, r1
    728a:	59 f4       	brne	.+22     	; 0x72a2 <__moddi3+0x496>
    728c:	61 e0       	ldi	r22, 0x01	; 1
    728e:	70 e0       	ldi	r23, 0x00	; 0
    7290:	80 e0       	ldi	r24, 0x00	; 0
    7292:	90 e0       	ldi	r25, 0x00	; 0
    7294:	a8 01       	movw	r20, r16
    7296:	97 01       	movw	r18, r14
    7298:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    729c:	79 01       	movw	r14, r18
    729e:	8a 01       	movw	r16, r20
    72a0:	10 c0       	rjmp	.+32     	; 0x72c2 <__moddi3+0x4b6>
    72a2:	20 e0       	ldi	r18, 0x00	; 0
    72a4:	e2 16       	cp	r14, r18
    72a6:	20 e0       	ldi	r18, 0x00	; 0
    72a8:	f2 06       	cpc	r15, r18
    72aa:	21 e0       	ldi	r18, 0x01	; 1
    72ac:	02 07       	cpc	r16, r18
    72ae:	20 e0       	ldi	r18, 0x00	; 0
    72b0:	12 07       	cpc	r17, r18
    72b2:	58 f4       	brcc	.+22     	; 0x72ca <__moddi3+0x4be>
    72b4:	3f ef       	ldi	r19, 0xFF	; 255
    72b6:	e3 16       	cp	r14, r19
    72b8:	f1 04       	cpc	r15, r1
    72ba:	01 05       	cpc	r16, r1
    72bc:	11 05       	cpc	r17, r1
    72be:	09 f0       	breq	.+2      	; 0x72c2 <__moddi3+0x4b6>
    72c0:	90 f4       	brcc	.+36     	; 0x72e6 <__moddi3+0x4da>
    72c2:	80 e0       	ldi	r24, 0x00	; 0
    72c4:	90 e0       	ldi	r25, 0x00	; 0
    72c6:	dc 01       	movw	r26, r24
    72c8:	17 c0       	rjmp	.+46     	; 0x72f8 <__moddi3+0x4ec>
    72ca:	40 e0       	ldi	r20, 0x00	; 0
    72cc:	e4 16       	cp	r14, r20
    72ce:	40 e0       	ldi	r20, 0x00	; 0
    72d0:	f4 06       	cpc	r15, r20
    72d2:	40 e0       	ldi	r20, 0x00	; 0
    72d4:	04 07       	cpc	r16, r20
    72d6:	41 e0       	ldi	r20, 0x01	; 1
    72d8:	14 07       	cpc	r17, r20
    72da:	50 f4       	brcc	.+20     	; 0x72f0 <__moddi3+0x4e4>
    72dc:	80 e1       	ldi	r24, 0x10	; 16
    72de:	90 e0       	ldi	r25, 0x00	; 0
    72e0:	a0 e0       	ldi	r26, 0x00	; 0
    72e2:	b0 e0       	ldi	r27, 0x00	; 0
    72e4:	09 c0       	rjmp	.+18     	; 0x72f8 <__moddi3+0x4ec>
    72e6:	88 e0       	ldi	r24, 0x08	; 8
    72e8:	90 e0       	ldi	r25, 0x00	; 0
    72ea:	a0 e0       	ldi	r26, 0x00	; 0
    72ec:	b0 e0       	ldi	r27, 0x00	; 0
    72ee:	04 c0       	rjmp	.+8      	; 0x72f8 <__moddi3+0x4ec>
    72f0:	88 e1       	ldi	r24, 0x18	; 24
    72f2:	90 e0       	ldi	r25, 0x00	; 0
    72f4:	a0 e0       	ldi	r26, 0x00	; 0
    72f6:	b0 e0       	ldi	r27, 0x00	; 0
    72f8:	a8 01       	movw	r20, r16
    72fa:	97 01       	movw	r18, r14
    72fc:	08 2e       	mov	r0, r24
    72fe:	04 c0       	rjmp	.+8      	; 0x7308 <__moddi3+0x4fc>
    7300:	56 95       	lsr	r21
    7302:	47 95       	ror	r20
    7304:	37 95       	ror	r19
    7306:	27 95       	ror	r18
    7308:	0a 94       	dec	r0
    730a:	d2 f7       	brpl	.-12     	; 0x7300 <__moddi3+0x4f4>
    730c:	24 5b       	subi	r18, 0xB4	; 180
    730e:	3e 4f       	sbci	r19, 0xFE	; 254
    7310:	f9 01       	movw	r30, r18
    7312:	20 81       	ld	r18, Z
    7314:	82 0f       	add	r24, r18
    7316:	91 1d       	adc	r25, r1
    7318:	a1 1d       	adc	r26, r1
    731a:	b1 1d       	adc	r27, r1
    731c:	50 e2       	ldi	r21, 0x20	; 32
    731e:	25 2e       	mov	r2, r21
    7320:	31 2c       	mov	r3, r1
    7322:	41 2c       	mov	r4, r1
    7324:	51 2c       	mov	r5, r1
    7326:	28 1a       	sub	r2, r24
    7328:	39 0a       	sbc	r3, r25
    732a:	4a 0a       	sbc	r4, r26
    732c:	5b 0a       	sbc	r5, r27
    732e:	2d aa       	std	Y+53, r2	; 0x35
    7330:	3e aa       	std	Y+54, r3	; 0x36
    7332:	4f aa       	std	Y+55, r4	; 0x37
    7334:	58 ae       	std	Y+56, r5	; 0x38
    7336:	21 14       	cp	r2, r1
    7338:	31 04       	cpc	r3, r1
    733a:	41 04       	cpc	r4, r1
    733c:	51 04       	cpc	r5, r1
    733e:	39 f4       	brne	.+14     	; 0x734e <__moddi3+0x542>
    7340:	64 01       	movw	r12, r8
    7342:	53 01       	movw	r10, r6
    7344:	ae 18       	sub	r10, r14
    7346:	bf 08       	sbc	r11, r15
    7348:	c0 0a       	sbc	r12, r16
    734a:	d1 0a       	sbc	r13, r17
    734c:	f3 c0       	rjmp	.+486    	; 0x7534 <__moddi3+0x728>
    734e:	2d a9       	ldd	r18, Y+53	; 0x35
    7350:	02 2e       	mov	r0, r18
    7352:	04 c0       	rjmp	.+8      	; 0x735c <__moddi3+0x550>
    7354:	ee 0c       	add	r14, r14
    7356:	ff 1c       	adc	r15, r15
    7358:	00 1f       	adc	r16, r16
    735a:	11 1f       	adc	r17, r17
    735c:	0a 94       	dec	r0
    735e:	d2 f7       	brpl	.-12     	; 0x7354 <__moddi3+0x548>
    7360:	13 01       	movw	r2, r6
    7362:	24 01       	movw	r4, r8
    7364:	08 2e       	mov	r0, r24
    7366:	04 c0       	rjmp	.+8      	; 0x7370 <__moddi3+0x564>
    7368:	56 94       	lsr	r5
    736a:	47 94       	ror	r4
    736c:	37 94       	ror	r3
    736e:	27 94       	ror	r2
    7370:	0a 94       	dec	r0
    7372:	d2 f7       	brpl	.-12     	; 0x7368 <__moddi3+0x55c>
    7374:	64 01       	movw	r12, r8
    7376:	53 01       	movw	r10, r6
    7378:	02 2e       	mov	r0, r18
    737a:	04 c0       	rjmp	.+8      	; 0x7384 <__moddi3+0x578>
    737c:	aa 0c       	add	r10, r10
    737e:	bb 1c       	adc	r11, r11
    7380:	cc 1c       	adc	r12, r12
    7382:	dd 1c       	adc	r13, r13
    7384:	0a 94       	dec	r0
    7386:	d2 f7       	brpl	.-12     	; 0x737c <__moddi3+0x570>
    7388:	49 a9       	ldd	r20, Y+49	; 0x31
    738a:	5a a9       	ldd	r21, Y+50	; 0x32
    738c:	6b a9       	ldd	r22, Y+51	; 0x33
    738e:	7c a9       	ldd	r23, Y+52	; 0x34
    7390:	04 c0       	rjmp	.+8      	; 0x739a <__moddi3+0x58e>
    7392:	76 95       	lsr	r23
    7394:	67 95       	ror	r22
    7396:	57 95       	ror	r21
    7398:	47 95       	ror	r20
    739a:	8a 95       	dec	r24
    739c:	d2 f7       	brpl	.-12     	; 0x7392 <__moddi3+0x586>
    739e:	a4 2a       	or	r10, r20
    73a0:	b5 2a       	or	r11, r21
    73a2:	c6 2a       	or	r12, r22
    73a4:	d7 2a       	or	r13, r23
    73a6:	a9 ae       	std	Y+57, r10	; 0x39
    73a8:	ba ae       	std	Y+58, r11	; 0x3a
    73aa:	cb ae       	std	Y+59, r12	; 0x3b
    73ac:	dc ae       	std	Y+60, r13	; 0x3c
    73ae:	69 a9       	ldd	r22, Y+49	; 0x31
    73b0:	7a a9       	ldd	r23, Y+50	; 0x32
    73b2:	8b a9       	ldd	r24, Y+51	; 0x33
    73b4:	9c a9       	ldd	r25, Y+52	; 0x34
    73b6:	04 c0       	rjmp	.+8      	; 0x73c0 <__moddi3+0x5b4>
    73b8:	66 0f       	add	r22, r22
    73ba:	77 1f       	adc	r23, r23
    73bc:	88 1f       	adc	r24, r24
    73be:	99 1f       	adc	r25, r25
    73c0:	2a 95       	dec	r18
    73c2:	d2 f7       	brpl	.-12     	; 0x73b8 <__moddi3+0x5ac>
    73c4:	21 96       	adiw	r28, 0x01	; 1
    73c6:	6c af       	std	Y+60, r22	; 0x3c
    73c8:	7d af       	std	Y+61, r23	; 0x3d
    73ca:	8e af       	std	Y+62, r24	; 0x3e
    73cc:	9f af       	std	Y+63, r25	; 0x3f
    73ce:	21 97       	sbiw	r28, 0x01	; 1
    73d0:	38 01       	movw	r6, r16
    73d2:	88 24       	eor	r8, r8
    73d4:	99 24       	eor	r9, r9
    73d6:	d8 01       	movw	r26, r16
    73d8:	c7 01       	movw	r24, r14
    73da:	a0 70       	andi	r26, 0x00	; 0
    73dc:	b0 70       	andi	r27, 0x00	; 0
    73de:	89 ab       	std	Y+49, r24	; 0x31
    73e0:	9a ab       	std	Y+50, r25	; 0x32
    73e2:	ab ab       	std	Y+51, r26	; 0x33
    73e4:	bc ab       	std	Y+52, r27	; 0x34
    73e6:	c2 01       	movw	r24, r4
    73e8:	b1 01       	movw	r22, r2
    73ea:	a4 01       	movw	r20, r8
    73ec:	93 01       	movw	r18, r6
    73ee:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    73f2:	d2 2e       	mov	r13, r18
    73f4:	c3 2e       	mov	r12, r19
    73f6:	5a 01       	movw	r10, r20
    73f8:	25 96       	adiw	r28, 0x05	; 5
    73fa:	6c af       	std	Y+60, r22	; 0x3c
    73fc:	7d af       	std	Y+61, r23	; 0x3d
    73fe:	8e af       	std	Y+62, r24	; 0x3e
    7400:	9f af       	std	Y+63, r25	; 0x3f
    7402:	25 97       	sbiw	r28, 0x05	; 5
    7404:	c2 01       	movw	r24, r4
    7406:	b1 01       	movw	r22, r2
    7408:	a4 01       	movw	r20, r8
    740a:	93 01       	movw	r18, r6
    740c:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    7410:	6d 2d       	mov	r22, r13
    7412:	7c 2d       	mov	r23, r12
    7414:	c5 01       	movw	r24, r10
    7416:	29 a9       	ldd	r18, Y+49	; 0x31
    7418:	3a a9       	ldd	r19, Y+50	; 0x32
    741a:	4b a9       	ldd	r20, Y+51	; 0x33
    741c:	5c a9       	ldd	r21, Y+52	; 0x34
    741e:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    7422:	5b 01       	movw	r10, r22
    7424:	6c 01       	movw	r12, r24
    7426:	25 96       	adiw	r28, 0x05	; 5
    7428:	2c ac       	ldd	r2, Y+60	; 0x3c
    742a:	3d ac       	ldd	r3, Y+61	; 0x3d
    742c:	4e ac       	ldd	r4, Y+62	; 0x3e
    742e:	5f ac       	ldd	r5, Y+63	; 0x3f
    7430:	25 97       	sbiw	r28, 0x05	; 5
    7432:	d1 01       	movw	r26, r2
    7434:	99 27       	eor	r25, r25
    7436:	88 27       	eor	r24, r24
    7438:	29 ac       	ldd	r2, Y+57	; 0x39
    743a:	3a ac       	ldd	r3, Y+58	; 0x3a
    743c:	4b ac       	ldd	r4, Y+59	; 0x3b
    743e:	5c ac       	ldd	r5, Y+60	; 0x3c
    7440:	92 01       	movw	r18, r4
    7442:	44 27       	eor	r20, r20
    7444:	55 27       	eor	r21, r21
    7446:	82 2b       	or	r24, r18
    7448:	93 2b       	or	r25, r19
    744a:	a4 2b       	or	r26, r20
    744c:	b5 2b       	or	r27, r21
    744e:	8a 15       	cp	r24, r10
    7450:	9b 05       	cpc	r25, r11
    7452:	ac 05       	cpc	r26, r12
    7454:	bd 05       	cpc	r27, r13
    7456:	90 f4       	brcc	.+36     	; 0x747c <__moddi3+0x670>
    7458:	8e 0d       	add	r24, r14
    745a:	9f 1d       	adc	r25, r15
    745c:	a0 1f       	adc	r26, r16
    745e:	b1 1f       	adc	r27, r17
    7460:	8e 15       	cp	r24, r14
    7462:	9f 05       	cpc	r25, r15
    7464:	a0 07       	cpc	r26, r16
    7466:	b1 07       	cpc	r27, r17
    7468:	48 f0       	brcs	.+18     	; 0x747c <__moddi3+0x670>
    746a:	8a 15       	cp	r24, r10
    746c:	9b 05       	cpc	r25, r11
    746e:	ac 05       	cpc	r26, r12
    7470:	bd 05       	cpc	r27, r13
    7472:	20 f4       	brcc	.+8      	; 0x747c <__moddi3+0x670>
    7474:	8e 0d       	add	r24, r14
    7476:	9f 1d       	adc	r25, r15
    7478:	a0 1f       	adc	r26, r16
    747a:	b1 1f       	adc	r27, r17
    747c:	9c 01       	movw	r18, r24
    747e:	ad 01       	movw	r20, r26
    7480:	2a 19       	sub	r18, r10
    7482:	3b 09       	sbc	r19, r11
    7484:	4c 09       	sbc	r20, r12
    7486:	5d 09       	sbc	r21, r13
    7488:	59 01       	movw	r10, r18
    748a:	6a 01       	movw	r12, r20
    748c:	ca 01       	movw	r24, r20
    748e:	b9 01       	movw	r22, r18
    7490:	a4 01       	movw	r20, r8
    7492:	93 01       	movw	r18, r6
    7494:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    7498:	22 2e       	mov	r2, r18
    749a:	53 2e       	mov	r5, r19
    749c:	44 2e       	mov	r4, r20
    749e:	35 2e       	mov	r3, r21
    74a0:	25 96       	adiw	r28, 0x05	; 5
    74a2:	6c af       	std	Y+60, r22	; 0x3c
    74a4:	7d af       	std	Y+61, r23	; 0x3d
    74a6:	8e af       	std	Y+62, r24	; 0x3e
    74a8:	9f af       	std	Y+63, r25	; 0x3f
    74aa:	25 97       	sbiw	r28, 0x05	; 5
    74ac:	c6 01       	movw	r24, r12
    74ae:	b5 01       	movw	r22, r10
    74b0:	a4 01       	movw	r20, r8
    74b2:	93 01       	movw	r18, r6
    74b4:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    74b8:	62 2d       	mov	r22, r2
    74ba:	75 2d       	mov	r23, r5
    74bc:	84 2d       	mov	r24, r4
    74be:	93 2d       	mov	r25, r3
    74c0:	29 a9       	ldd	r18, Y+49	; 0x31
    74c2:	3a a9       	ldd	r19, Y+50	; 0x32
    74c4:	4b a9       	ldd	r20, Y+51	; 0x33
    74c6:	5c a9       	ldd	r21, Y+52	; 0x34
    74c8:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    74cc:	5b 01       	movw	r10, r22
    74ce:	6c 01       	movw	r12, r24
    74d0:	25 96       	adiw	r28, 0x05	; 5
    74d2:	4c ad       	ldd	r20, Y+60	; 0x3c
    74d4:	5d ad       	ldd	r21, Y+61	; 0x3d
    74d6:	6e ad       	ldd	r22, Y+62	; 0x3e
    74d8:	7f ad       	ldd	r23, Y+63	; 0x3f
    74da:	25 97       	sbiw	r28, 0x05	; 5
    74dc:	da 01       	movw	r26, r20
    74de:	99 27       	eor	r25, r25
    74e0:	88 27       	eor	r24, r24
    74e2:	29 ad       	ldd	r18, Y+57	; 0x39
    74e4:	3a ad       	ldd	r19, Y+58	; 0x3a
    74e6:	4b ad       	ldd	r20, Y+59	; 0x3b
    74e8:	5c ad       	ldd	r21, Y+60	; 0x3c
    74ea:	40 70       	andi	r20, 0x00	; 0
    74ec:	50 70       	andi	r21, 0x00	; 0
    74ee:	82 2b       	or	r24, r18
    74f0:	93 2b       	or	r25, r19
    74f2:	a4 2b       	or	r26, r20
    74f4:	b5 2b       	or	r27, r21
    74f6:	8a 15       	cp	r24, r10
    74f8:	9b 05       	cpc	r25, r11
    74fa:	ac 05       	cpc	r26, r12
    74fc:	bd 05       	cpc	r27, r13
    74fe:	90 f4       	brcc	.+36     	; 0x7524 <__moddi3+0x718>
    7500:	8e 0d       	add	r24, r14
    7502:	9f 1d       	adc	r25, r15
    7504:	a0 1f       	adc	r26, r16
    7506:	b1 1f       	adc	r27, r17
    7508:	8e 15       	cp	r24, r14
    750a:	9f 05       	cpc	r25, r15
    750c:	a0 07       	cpc	r26, r16
    750e:	b1 07       	cpc	r27, r17
    7510:	48 f0       	brcs	.+18     	; 0x7524 <__moddi3+0x718>
    7512:	8a 15       	cp	r24, r10
    7514:	9b 05       	cpc	r25, r11
    7516:	ac 05       	cpc	r26, r12
    7518:	bd 05       	cpc	r27, r13
    751a:	20 f4       	brcc	.+8      	; 0x7524 <__moddi3+0x718>
    751c:	8e 0d       	add	r24, r14
    751e:	9f 1d       	adc	r25, r15
    7520:	a0 1f       	adc	r26, r16
    7522:	b1 1f       	adc	r27, r17
    7524:	1c 01       	movw	r2, r24
    7526:	2d 01       	movw	r4, r26
    7528:	2a 18       	sub	r2, r10
    752a:	3b 08       	sbc	r3, r11
    752c:	4c 08       	sbc	r4, r12
    752e:	5d 08       	sbc	r5, r13
    7530:	62 01       	movw	r12, r4
    7532:	51 01       	movw	r10, r2
    7534:	18 01       	movw	r2, r16
    7536:	44 24       	eor	r4, r4
    7538:	55 24       	eor	r5, r5
    753a:	a8 01       	movw	r20, r16
    753c:	97 01       	movw	r18, r14
    753e:	40 70       	andi	r20, 0x00	; 0
    7540:	50 70       	andi	r21, 0x00	; 0
    7542:	29 ab       	std	Y+49, r18	; 0x31
    7544:	3a ab       	std	Y+50, r19	; 0x32
    7546:	4b ab       	std	Y+51, r20	; 0x33
    7548:	5c ab       	std	Y+52, r21	; 0x34
    754a:	c6 01       	movw	r24, r12
    754c:	b5 01       	movw	r22, r10
    754e:	a2 01       	movw	r20, r4
    7550:	91 01       	movw	r18, r2
    7552:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    7556:	62 2e       	mov	r6, r18
    7558:	83 2e       	mov	r8, r19
    755a:	94 2e       	mov	r9, r20
    755c:	75 2e       	mov	r7, r21
    755e:	69 af       	std	Y+57, r22	; 0x39
    7560:	7a af       	std	Y+58, r23	; 0x3a
    7562:	8b af       	std	Y+59, r24	; 0x3b
    7564:	9c af       	std	Y+60, r25	; 0x3c
    7566:	c6 01       	movw	r24, r12
    7568:	b5 01       	movw	r22, r10
    756a:	a2 01       	movw	r20, r4
    756c:	91 01       	movw	r18, r2
    756e:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    7572:	66 2d       	mov	r22, r6
    7574:	78 2d       	mov	r23, r8
    7576:	89 2d       	mov	r24, r9
    7578:	97 2d       	mov	r25, r7
    757a:	29 a9       	ldd	r18, Y+49	; 0x31
    757c:	3a a9       	ldd	r19, Y+50	; 0x32
    757e:	4b a9       	ldd	r20, Y+51	; 0x33
    7580:	5c a9       	ldd	r21, Y+52	; 0x34
    7582:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    7586:	5b 01       	movw	r10, r22
    7588:	6c 01       	movw	r12, r24
    758a:	49 ad       	ldd	r20, Y+57	; 0x39
    758c:	5a ad       	ldd	r21, Y+58	; 0x3a
    758e:	6b ad       	ldd	r22, Y+59	; 0x3b
    7590:	7c ad       	ldd	r23, Y+60	; 0x3c
    7592:	da 01       	movw	r26, r20
    7594:	99 27       	eor	r25, r25
    7596:	88 27       	eor	r24, r24
    7598:	21 96       	adiw	r28, 0x01	; 1
    759a:	6c ac       	ldd	r6, Y+60	; 0x3c
    759c:	7d ac       	ldd	r7, Y+61	; 0x3d
    759e:	8e ac       	ldd	r8, Y+62	; 0x3e
    75a0:	9f ac       	ldd	r9, Y+63	; 0x3f
    75a2:	21 97       	sbiw	r28, 0x01	; 1
    75a4:	94 01       	movw	r18, r8
    75a6:	44 27       	eor	r20, r20
    75a8:	55 27       	eor	r21, r21
    75aa:	82 2b       	or	r24, r18
    75ac:	93 2b       	or	r25, r19
    75ae:	a4 2b       	or	r26, r20
    75b0:	b5 2b       	or	r27, r21
    75b2:	8a 15       	cp	r24, r10
    75b4:	9b 05       	cpc	r25, r11
    75b6:	ac 05       	cpc	r26, r12
    75b8:	bd 05       	cpc	r27, r13
    75ba:	90 f4       	brcc	.+36     	; 0x75e0 <__moddi3+0x7d4>
    75bc:	8e 0d       	add	r24, r14
    75be:	9f 1d       	adc	r25, r15
    75c0:	a0 1f       	adc	r26, r16
    75c2:	b1 1f       	adc	r27, r17
    75c4:	8e 15       	cp	r24, r14
    75c6:	9f 05       	cpc	r25, r15
    75c8:	a0 07       	cpc	r26, r16
    75ca:	b1 07       	cpc	r27, r17
    75cc:	48 f0       	brcs	.+18     	; 0x75e0 <__moddi3+0x7d4>
    75ce:	8a 15       	cp	r24, r10
    75d0:	9b 05       	cpc	r25, r11
    75d2:	ac 05       	cpc	r26, r12
    75d4:	bd 05       	cpc	r27, r13
    75d6:	20 f4       	brcc	.+8      	; 0x75e0 <__moddi3+0x7d4>
    75d8:	8e 0d       	add	r24, r14
    75da:	9f 1d       	adc	r25, r15
    75dc:	a0 1f       	adc	r26, r16
    75de:	b1 1f       	adc	r27, r17
    75e0:	9c 01       	movw	r18, r24
    75e2:	ad 01       	movw	r20, r26
    75e4:	2a 19       	sub	r18, r10
    75e6:	3b 09       	sbc	r19, r11
    75e8:	4c 09       	sbc	r20, r12
    75ea:	5d 09       	sbc	r21, r13
    75ec:	59 01       	movw	r10, r18
    75ee:	6a 01       	movw	r12, r20
    75f0:	ca 01       	movw	r24, r20
    75f2:	b9 01       	movw	r22, r18
    75f4:	a2 01       	movw	r20, r4
    75f6:	91 01       	movw	r18, r2
    75f8:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    75fc:	62 2e       	mov	r6, r18
    75fe:	83 2e       	mov	r8, r19
    7600:	94 2e       	mov	r9, r20
    7602:	75 2e       	mov	r7, r21
    7604:	69 af       	std	Y+57, r22	; 0x39
    7606:	7a af       	std	Y+58, r23	; 0x3a
    7608:	8b af       	std	Y+59, r24	; 0x3b
    760a:	9c af       	std	Y+60, r25	; 0x3c
    760c:	c6 01       	movw	r24, r12
    760e:	b5 01       	movw	r22, r10
    7610:	a2 01       	movw	r20, r4
    7612:	91 01       	movw	r18, r2
    7614:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    7618:	66 2d       	mov	r22, r6
    761a:	78 2d       	mov	r23, r8
    761c:	89 2d       	mov	r24, r9
    761e:	97 2d       	mov	r25, r7
    7620:	29 a9       	ldd	r18, Y+49	; 0x31
    7622:	3a a9       	ldd	r19, Y+50	; 0x32
    7624:	4b a9       	ldd	r20, Y+51	; 0x33
    7626:	5c a9       	ldd	r21, Y+52	; 0x34
    7628:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    762c:	5b 01       	movw	r10, r22
    762e:	6c 01       	movw	r12, r24
    7630:	49 ad       	ldd	r20, Y+57	; 0x39
    7632:	5a ad       	ldd	r21, Y+58	; 0x3a
    7634:	6b ad       	ldd	r22, Y+59	; 0x3b
    7636:	7c ad       	ldd	r23, Y+60	; 0x3c
    7638:	da 01       	movw	r26, r20
    763a:	99 27       	eor	r25, r25
    763c:	88 27       	eor	r24, r24
    763e:	21 96       	adiw	r28, 0x01	; 1
    7640:	2c ad       	ldd	r18, Y+60	; 0x3c
    7642:	3d ad       	ldd	r19, Y+61	; 0x3d
    7644:	4e ad       	ldd	r20, Y+62	; 0x3e
    7646:	5f ad       	ldd	r21, Y+63	; 0x3f
    7648:	21 97       	sbiw	r28, 0x01	; 1
    764a:	40 70       	andi	r20, 0x00	; 0
    764c:	50 70       	andi	r21, 0x00	; 0
    764e:	82 2b       	or	r24, r18
    7650:	93 2b       	or	r25, r19
    7652:	a4 2b       	or	r26, r20
    7654:	b5 2b       	or	r27, r21
    7656:	8a 15       	cp	r24, r10
    7658:	9b 05       	cpc	r25, r11
    765a:	ac 05       	cpc	r26, r12
    765c:	bd 05       	cpc	r27, r13
    765e:	90 f4       	brcc	.+36     	; 0x7684 <__moddi3+0x878>
    7660:	8e 0d       	add	r24, r14
    7662:	9f 1d       	adc	r25, r15
    7664:	a0 1f       	adc	r26, r16
    7666:	b1 1f       	adc	r27, r17
    7668:	8e 15       	cp	r24, r14
    766a:	9f 05       	cpc	r25, r15
    766c:	a0 07       	cpc	r26, r16
    766e:	b1 07       	cpc	r27, r17
    7670:	48 f0       	brcs	.+18     	; 0x7684 <__moddi3+0x878>
    7672:	8a 15       	cp	r24, r10
    7674:	9b 05       	cpc	r25, r11
    7676:	ac 05       	cpc	r26, r12
    7678:	bd 05       	cpc	r27, r13
    767a:	20 f4       	brcc	.+8      	; 0x7684 <__moddi3+0x878>
    767c:	8e 0d       	add	r24, r14
    767e:	9f 1d       	adc	r25, r15
    7680:	a0 1f       	adc	r26, r16
    7682:	b1 1f       	adc	r27, r17
    7684:	8a 19       	sub	r24, r10
    7686:	9b 09       	sbc	r25, r11
    7688:	ac 09       	sbc	r26, r12
    768a:	bd 09       	sbc	r27, r13
    768c:	0d a8       	ldd	r0, Y+53	; 0x35
    768e:	04 c0       	rjmp	.+8      	; 0x7698 <__moddi3+0x88c>
    7690:	b6 95       	lsr	r27
    7692:	a7 95       	ror	r26
    7694:	97 95       	ror	r25
    7696:	87 95       	ror	r24
    7698:	0a 94       	dec	r0
    769a:	d2 f7       	brpl	.-12     	; 0x7690 <__moddi3+0x884>
    769c:	89 a7       	std	Y+41, r24	; 0x29
    769e:	9a a7       	std	Y+42, r25	; 0x2a
    76a0:	ab a7       	std	Y+43, r26	; 0x2b
    76a2:	bc a7       	std	Y+44, r27	; 0x2c
    76a4:	1d a6       	std	Y+45, r1	; 0x2d
    76a6:	1e a6       	std	Y+46, r1	; 0x2e
    76a8:	1f a6       	std	Y+47, r1	; 0x2f
    76aa:	18 aa       	std	Y+48, r1	; 0x30
    76ac:	89 8b       	std	Y+17, r24	; 0x11
    76ae:	8a a5       	ldd	r24, Y+42	; 0x2a
    76b0:	8a 8b       	std	Y+18, r24	; 0x12
    76b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    76b4:	8b 8b       	std	Y+19, r24	; 0x13
    76b6:	8c a5       	ldd	r24, Y+44	; 0x2c
    76b8:	8c 8b       	std	Y+20, r24	; 0x14
    76ba:	1d 8a       	std	Y+21, r1	; 0x15
    76bc:	05 c3       	rjmp	.+1546   	; 0x7cc8 <__moddi3+0xebc>
    76be:	68 16       	cp	r6, r24
    76c0:	79 06       	cpc	r7, r25
    76c2:	8a 06       	cpc	r8, r26
    76c4:	9b 06       	cpc	r9, r27
    76c6:	48 f4       	brcc	.+18     	; 0x76da <__moddi3+0x8ce>
    76c8:	f9 8b       	std	Y+17, r31	; 0x11
    76ca:	ea 8b       	std	Y+18, r30	; 0x12
    76cc:	7b 8b       	std	Y+19, r23	; 0x13
    76ce:	6c 8b       	std	Y+20, r22	; 0x14
    76d0:	5d 8b       	std	Y+21, r21	; 0x15
    76d2:	4e 8b       	std	Y+22, r20	; 0x16
    76d4:	3f 8b       	std	Y+23, r19	; 0x17
    76d6:	28 8f       	std	Y+24, r18	; 0x18
    76d8:	fd c2       	rjmp	.+1530   	; 0x7cd4 <__moddi3+0xec8>
    76da:	80 30       	cpi	r24, 0x00	; 0
    76dc:	50 e0       	ldi	r21, 0x00	; 0
    76de:	95 07       	cpc	r25, r21
    76e0:	51 e0       	ldi	r21, 0x01	; 1
    76e2:	a5 07       	cpc	r26, r21
    76e4:	50 e0       	ldi	r21, 0x00	; 0
    76e6:	b5 07       	cpc	r27, r21
    76e8:	50 f4       	brcc	.+20     	; 0x76fe <__moddi3+0x8f2>
    76ea:	8f 3f       	cpi	r24, 0xFF	; 255
    76ec:	91 05       	cpc	r25, r1
    76ee:	a1 05       	cpc	r26, r1
    76f0:	b1 05       	cpc	r27, r1
    76f2:	09 f0       	breq	.+2      	; 0x76f6 <__moddi3+0x8ea>
    76f4:	90 f4       	brcc	.+36     	; 0x771a <__moddi3+0x90e>
    76f6:	aa 24       	eor	r10, r10
    76f8:	bb 24       	eor	r11, r11
    76fa:	65 01       	movw	r12, r10
    76fc:	19 c0       	rjmp	.+50     	; 0x7730 <__moddi3+0x924>
    76fe:	80 30       	cpi	r24, 0x00	; 0
    7700:	60 e0       	ldi	r22, 0x00	; 0
    7702:	96 07       	cpc	r25, r22
    7704:	60 e0       	ldi	r22, 0x00	; 0
    7706:	a6 07       	cpc	r26, r22
    7708:	61 e0       	ldi	r22, 0x01	; 1
    770a:	b6 07       	cpc	r27, r22
    770c:	60 f4       	brcc	.+24     	; 0x7726 <__moddi3+0x91a>
    770e:	40 e1       	ldi	r20, 0x10	; 16
    7710:	a4 2e       	mov	r10, r20
    7712:	b1 2c       	mov	r11, r1
    7714:	c1 2c       	mov	r12, r1
    7716:	d1 2c       	mov	r13, r1
    7718:	0b c0       	rjmp	.+22     	; 0x7730 <__moddi3+0x924>
    771a:	38 e0       	ldi	r19, 0x08	; 8
    771c:	a3 2e       	mov	r10, r19
    771e:	b1 2c       	mov	r11, r1
    7720:	c1 2c       	mov	r12, r1
    7722:	d1 2c       	mov	r13, r1
    7724:	05 c0       	rjmp	.+10     	; 0x7730 <__moddi3+0x924>
    7726:	28 e1       	ldi	r18, 0x18	; 24
    7728:	a2 2e       	mov	r10, r18
    772a:	b1 2c       	mov	r11, r1
    772c:	c1 2c       	mov	r12, r1
    772e:	d1 2c       	mov	r13, r1
    7730:	9c 01       	movw	r18, r24
    7732:	ad 01       	movw	r20, r26
    7734:	0a 2c       	mov	r0, r10
    7736:	04 c0       	rjmp	.+8      	; 0x7740 <__moddi3+0x934>
    7738:	56 95       	lsr	r21
    773a:	47 95       	ror	r20
    773c:	37 95       	ror	r19
    773e:	27 95       	ror	r18
    7740:	0a 94       	dec	r0
    7742:	d2 f7       	brpl	.-12     	; 0x7738 <__moddi3+0x92c>
    7744:	24 5b       	subi	r18, 0xB4	; 180
    7746:	3e 4f       	sbci	r19, 0xFE	; 254
    7748:	f9 01       	movw	r30, r18
    774a:	20 81       	ld	r18, Z
    774c:	a2 0e       	add	r10, r18
    774e:	b1 1c       	adc	r11, r1
    7750:	c1 1c       	adc	r12, r1
    7752:	d1 1c       	adc	r13, r1
    7754:	20 e2       	ldi	r18, 0x20	; 32
    7756:	30 e0       	ldi	r19, 0x00	; 0
    7758:	40 e0       	ldi	r20, 0x00	; 0
    775a:	50 e0       	ldi	r21, 0x00	; 0
    775c:	2a 19       	sub	r18, r10
    775e:	3b 09       	sbc	r19, r11
    7760:	4c 09       	sbc	r20, r12
    7762:	5d 09       	sbc	r21, r13
    7764:	09 f0       	breq	.+2      	; 0x7768 <__moddi3+0x95c>
    7766:	4d c0       	rjmp	.+154    	; 0x7802 <__moddi3+0x9f6>
    7768:	86 15       	cp	r24, r6
    776a:	97 05       	cpc	r25, r7
    776c:	a8 05       	cpc	r26, r8
    776e:	b9 05       	cpc	r27, r9
    7770:	48 f0       	brcs	.+18     	; 0x7784 <__moddi3+0x978>
    7772:	a9 a8       	ldd	r10, Y+49	; 0x31
    7774:	ba a8       	ldd	r11, Y+50	; 0x32
    7776:	cb a8       	ldd	r12, Y+51	; 0x33
    7778:	dc a8       	ldd	r13, Y+52	; 0x34
    777a:	ae 14       	cp	r10, r14
    777c:	bf 04       	cpc	r11, r15
    777e:	c0 06       	cpc	r12, r16
    7780:	d1 06       	cpc	r13, r17
    7782:	40 f1       	brcs	.+80     	; 0x77d4 <__moddi3+0x9c8>
    7784:	29 a9       	ldd	r18, Y+49	; 0x31
    7786:	3a a9       	ldd	r19, Y+50	; 0x32
    7788:	4b a9       	ldd	r20, Y+51	; 0x33
    778a:	5c a9       	ldd	r21, Y+52	; 0x34
    778c:	2e 19       	sub	r18, r14
    778e:	3f 09       	sbc	r19, r15
    7790:	40 0b       	sbc	r20, r16
    7792:	51 0b       	sbc	r21, r17
    7794:	68 1a       	sub	r6, r24
    7796:	79 0a       	sbc	r7, r25
    7798:	8a 0a       	sbc	r8, r26
    779a:	9b 0a       	sbc	r9, r27
    779c:	61 e0       	ldi	r22, 0x01	; 1
    779e:	70 e0       	ldi	r23, 0x00	; 0
    77a0:	80 e0       	ldi	r24, 0x00	; 0
    77a2:	90 e0       	ldi	r25, 0x00	; 0
    77a4:	c9 a8       	ldd	r12, Y+49	; 0x31
    77a6:	da a8       	ldd	r13, Y+50	; 0x32
    77a8:	eb a8       	ldd	r14, Y+51	; 0x33
    77aa:	fc a8       	ldd	r15, Y+52	; 0x34
    77ac:	c2 16       	cp	r12, r18
    77ae:	d3 06       	cpc	r13, r19
    77b0:	e4 06       	cpc	r14, r20
    77b2:	f5 06       	cpc	r15, r21
    77b4:	18 f0       	brcs	.+6      	; 0x77bc <__moddi3+0x9b0>
    77b6:	60 e0       	ldi	r22, 0x00	; 0
    77b8:	70 e0       	ldi	r23, 0x00	; 0
    77ba:	cb 01       	movw	r24, r22
    77bc:	13 01       	movw	r2, r6
    77be:	24 01       	movw	r4, r8
    77c0:	26 1a       	sub	r2, r22
    77c2:	37 0a       	sbc	r3, r23
    77c4:	48 0a       	sbc	r4, r24
    77c6:	59 0a       	sbc	r5, r25
    77c8:	21 96       	adiw	r28, 0x01	; 1
    77ca:	2c af       	std	Y+60, r18	; 0x3c
    77cc:	3d af       	std	Y+61, r19	; 0x3d
    77ce:	4e af       	std	Y+62, r20	; 0x3e
    77d0:	5f af       	std	Y+63, r21	; 0x3f
    77d2:	21 97       	sbiw	r28, 0x01	; 1
    77d4:	21 96       	adiw	r28, 0x01	; 1
    77d6:	ec ac       	ldd	r14, Y+60	; 0x3c
    77d8:	fd ac       	ldd	r15, Y+61	; 0x3d
    77da:	0e ad       	ldd	r16, Y+62	; 0x3e
    77dc:	1f ad       	ldd	r17, Y+63	; 0x3f
    77de:	21 97       	sbiw	r28, 0x01	; 1
    77e0:	e9 a6       	std	Y+41, r14	; 0x29
    77e2:	fa a6       	std	Y+42, r15	; 0x2a
    77e4:	0b a7       	std	Y+43, r16	; 0x2b
    77e6:	1c a7       	std	Y+44, r17	; 0x2c
    77e8:	2d a6       	std	Y+45, r2	; 0x2d
    77ea:	3e a6       	std	Y+46, r3	; 0x2e
    77ec:	4f a6       	std	Y+47, r4	; 0x2f
    77ee:	58 aa       	std	Y+48, r5	; 0x30
    77f0:	e9 8a       	std	Y+17, r14	; 0x11
    77f2:	8a a5       	ldd	r24, Y+42	; 0x2a
    77f4:	8a 8b       	std	Y+18, r24	; 0x12
    77f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    77f8:	8b 8b       	std	Y+19, r24	; 0x13
    77fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    77fc:	8c 8b       	std	Y+20, r24	; 0x14
    77fe:	2d 8a       	std	Y+21, r2	; 0x15
    7800:	63 c2       	rjmp	.+1222   	; 0x7cc8 <__moddi3+0xebc>
    7802:	2d af       	std	Y+61, r18	; 0x3d
    7804:	9c 01       	movw	r18, r24
    7806:	ad 01       	movw	r20, r26
    7808:	0d ac       	ldd	r0, Y+61	; 0x3d
    780a:	04 c0       	rjmp	.+8      	; 0x7814 <__moddi3+0xa08>
    780c:	22 0f       	add	r18, r18
    780e:	33 1f       	adc	r19, r19
    7810:	44 1f       	adc	r20, r20
    7812:	55 1f       	adc	r21, r21
    7814:	0a 94       	dec	r0
    7816:	d2 f7       	brpl	.-12     	; 0x780c <__moddi3+0xa00>
    7818:	22 96       	adiw	r28, 0x02	; 2
    781a:	af ae       	std	Y+63, r10	; 0x3f
    781c:	22 97       	sbiw	r28, 0x02	; 2
    781e:	d8 01       	movw	r26, r16
    7820:	c7 01       	movw	r24, r14
    7822:	0a 2c       	mov	r0, r10
    7824:	04 c0       	rjmp	.+8      	; 0x782e <__moddi3+0xa22>
    7826:	b6 95       	lsr	r27
    7828:	a7 95       	ror	r26
    782a:	97 95       	ror	r25
    782c:	87 95       	ror	r24
    782e:	0a 94       	dec	r0
    7830:	d2 f7       	brpl	.-12     	; 0x7826 <__moddi3+0xa1a>
    7832:	28 2b       	or	r18, r24
    7834:	39 2b       	or	r19, r25
    7836:	4a 2b       	or	r20, r26
    7838:	5b 2b       	or	r21, r27
    783a:	2d ab       	std	Y+53, r18	; 0x35
    783c:	3e ab       	std	Y+54, r19	; 0x36
    783e:	4f ab       	std	Y+55, r20	; 0x37
    7840:	58 af       	std	Y+56, r21	; 0x38
    7842:	b8 01       	movw	r22, r16
    7844:	a7 01       	movw	r20, r14
    7846:	0d ac       	ldd	r0, Y+61	; 0x3d
    7848:	04 c0       	rjmp	.+8      	; 0x7852 <__moddi3+0xa46>
    784a:	44 0f       	add	r20, r20
    784c:	55 1f       	adc	r21, r21
    784e:	66 1f       	adc	r22, r22
    7850:	77 1f       	adc	r23, r23
    7852:	0a 94       	dec	r0
    7854:	d2 f7       	brpl	.-12     	; 0x784a <__moddi3+0xa3e>
    7856:	2d 96       	adiw	r28, 0x0d	; 13
    7858:	4c af       	std	Y+60, r20	; 0x3c
    785a:	5d af       	std	Y+61, r21	; 0x3d
    785c:	6e af       	std	Y+62, r22	; 0x3e
    785e:	7f af       	std	Y+63, r23	; 0x3f
    7860:	2d 97       	sbiw	r28, 0x0d	; 13
    7862:	13 01       	movw	r2, r6
    7864:	24 01       	movw	r4, r8
    7866:	0a 2c       	mov	r0, r10
    7868:	04 c0       	rjmp	.+8      	; 0x7872 <__moddi3+0xa66>
    786a:	56 94       	lsr	r5
    786c:	47 94       	ror	r4
    786e:	37 94       	ror	r3
    7870:	27 94       	ror	r2
    7872:	0a 94       	dec	r0
    7874:	d2 f7       	brpl	.-12     	; 0x786a <__moddi3+0xa5e>
    7876:	c4 01       	movw	r24, r8
    7878:	b3 01       	movw	r22, r6
    787a:	0d ac       	ldd	r0, Y+61	; 0x3d
    787c:	04 c0       	rjmp	.+8      	; 0x7886 <__moddi3+0xa7a>
    787e:	66 0f       	add	r22, r22
    7880:	77 1f       	adc	r23, r23
    7882:	88 1f       	adc	r24, r24
    7884:	99 1f       	adc	r25, r25
    7886:	0a 94       	dec	r0
    7888:	d2 f7       	brpl	.-12     	; 0x787e <__moddi3+0xa72>
    788a:	69 af       	std	Y+57, r22	; 0x39
    788c:	7a af       	std	Y+58, r23	; 0x3a
    788e:	8b af       	std	Y+59, r24	; 0x3b
    7890:	9c af       	std	Y+60, r25	; 0x3c
    7892:	89 a9       	ldd	r24, Y+49	; 0x31
    7894:	9a a9       	ldd	r25, Y+50	; 0x32
    7896:	ab a9       	ldd	r26, Y+51	; 0x33
    7898:	bc a9       	ldd	r27, Y+52	; 0x34
    789a:	04 c0       	rjmp	.+8      	; 0x78a4 <__moddi3+0xa98>
    789c:	b6 95       	lsr	r27
    789e:	a7 95       	ror	r26
    78a0:	97 95       	ror	r25
    78a2:	87 95       	ror	r24
    78a4:	aa 94       	dec	r10
    78a6:	d2 f7       	brpl	.-12     	; 0x789c <__moddi3+0xa90>
    78a8:	69 ac       	ldd	r6, Y+57	; 0x39
    78aa:	7a ac       	ldd	r7, Y+58	; 0x3a
    78ac:	8b ac       	ldd	r8, Y+59	; 0x3b
    78ae:	9c ac       	ldd	r9, Y+60	; 0x3c
    78b0:	68 2a       	or	r6, r24
    78b2:	79 2a       	or	r7, r25
    78b4:	8a 2a       	or	r8, r26
    78b6:	9b 2a       	or	r9, r27
    78b8:	69 ae       	std	Y+57, r6	; 0x39
    78ba:	7a ae       	std	Y+58, r7	; 0x3a
    78bc:	8b ae       	std	Y+59, r8	; 0x3b
    78be:	9c ae       	std	Y+60, r9	; 0x3c
    78c0:	89 a8       	ldd	r8, Y+49	; 0x31
    78c2:	9a a8       	ldd	r9, Y+50	; 0x32
    78c4:	ab a8       	ldd	r10, Y+51	; 0x33
    78c6:	bc a8       	ldd	r11, Y+52	; 0x34
    78c8:	0d ac       	ldd	r0, Y+61	; 0x3d
    78ca:	04 c0       	rjmp	.+8      	; 0x78d4 <__moddi3+0xac8>
    78cc:	88 0c       	add	r8, r8
    78ce:	99 1c       	adc	r9, r9
    78d0:	aa 1c       	adc	r10, r10
    78d2:	bb 1c       	adc	r11, r11
    78d4:	0a 94       	dec	r0
    78d6:	d2 f7       	brpl	.-12     	; 0x78cc <__moddi3+0xac0>
    78d8:	89 aa       	std	Y+49, r8	; 0x31
    78da:	9a aa       	std	Y+50, r9	; 0x32
    78dc:	ab aa       	std	Y+51, r10	; 0x33
    78de:	bc aa       	std	Y+52, r11	; 0x34
    78e0:	cd a8       	ldd	r12, Y+53	; 0x35
    78e2:	de a8       	ldd	r13, Y+54	; 0x36
    78e4:	ef a8       	ldd	r14, Y+55	; 0x37
    78e6:	f8 ac       	ldd	r15, Y+56	; 0x38
    78e8:	47 01       	movw	r8, r14
    78ea:	aa 24       	eor	r10, r10
    78ec:	bb 24       	eor	r11, r11
    78ee:	97 01       	movw	r18, r14
    78f0:	86 01       	movw	r16, r12
    78f2:	20 70       	andi	r18, 0x00	; 0
    78f4:	30 70       	andi	r19, 0x00	; 0
    78f6:	29 96       	adiw	r28, 0x09	; 9
    78f8:	0c af       	std	Y+60, r16	; 0x3c
    78fa:	1d af       	std	Y+61, r17	; 0x3d
    78fc:	2e af       	std	Y+62, r18	; 0x3e
    78fe:	3f af       	std	Y+63, r19	; 0x3f
    7900:	29 97       	sbiw	r28, 0x09	; 9
    7902:	c2 01       	movw	r24, r4
    7904:	b1 01       	movw	r22, r2
    7906:	a5 01       	movw	r20, r10
    7908:	94 01       	movw	r18, r8
    790a:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    790e:	69 01       	movw	r12, r18
    7910:	e4 2e       	mov	r14, r20
    7912:	05 2f       	mov	r16, r21
    7914:	61 96       	adiw	r28, 0x11	; 17
    7916:	6c af       	std	Y+60, r22	; 0x3c
    7918:	7d af       	std	Y+61, r23	; 0x3d
    791a:	8e af       	std	Y+62, r24	; 0x3e
    791c:	9f af       	std	Y+63, r25	; 0x3f
    791e:	61 97       	sbiw	r28, 0x11	; 17
    7920:	c2 01       	movw	r24, r4
    7922:	b1 01       	movw	r22, r2
    7924:	a5 01       	movw	r20, r10
    7926:	94 01       	movw	r18, r8
    7928:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    792c:	16 01       	movw	r2, r12
    792e:	4e 2c       	mov	r4, r14
    7930:	50 2e       	mov	r5, r16
    7932:	c2 01       	movw	r24, r4
    7934:	b1 01       	movw	r22, r2
    7936:	29 96       	adiw	r28, 0x09	; 9
    7938:	2c ad       	ldd	r18, Y+60	; 0x3c
    793a:	3d ad       	ldd	r19, Y+61	; 0x3d
    793c:	4e ad       	ldd	r20, Y+62	; 0x3e
    793e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7940:	29 97       	sbiw	r28, 0x09	; 9
    7942:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    7946:	61 96       	adiw	r28, 0x11	; 17
    7948:	2c ad       	ldd	r18, Y+60	; 0x3c
    794a:	3d ad       	ldd	r19, Y+61	; 0x3d
    794c:	4e ad       	ldd	r20, Y+62	; 0x3e
    794e:	5f ad       	ldd	r21, Y+63	; 0x3f
    7950:	61 97       	sbiw	r28, 0x11	; 17
    7952:	89 01       	movw	r16, r18
    7954:	ff 24       	eor	r15, r15
    7956:	ee 24       	eor	r14, r14
    7958:	29 ad       	ldd	r18, Y+57	; 0x39
    795a:	3a ad       	ldd	r19, Y+58	; 0x3a
    795c:	4b ad       	ldd	r20, Y+59	; 0x3b
    795e:	5c ad       	ldd	r21, Y+60	; 0x3c
    7960:	9a 01       	movw	r18, r20
    7962:	44 27       	eor	r20, r20
    7964:	55 27       	eor	r21, r21
    7966:	e2 2a       	or	r14, r18
    7968:	f3 2a       	or	r15, r19
    796a:	04 2b       	or	r16, r20
    796c:	15 2b       	or	r17, r21
    796e:	e6 16       	cp	r14, r22
    7970:	f7 06       	cpc	r15, r23
    7972:	08 07       	cpc	r16, r24
    7974:	19 07       	cpc	r17, r25
    7976:	00 f5       	brcc	.+64     	; 0x79b8 <__moddi3+0xbac>
    7978:	08 94       	sec
    797a:	21 08       	sbc	r2, r1
    797c:	31 08       	sbc	r3, r1
    797e:	41 08       	sbc	r4, r1
    7980:	51 08       	sbc	r5, r1
    7982:	2d a9       	ldd	r18, Y+53	; 0x35
    7984:	3e a9       	ldd	r19, Y+54	; 0x36
    7986:	4f a9       	ldd	r20, Y+55	; 0x37
    7988:	58 ad       	ldd	r21, Y+56	; 0x38
    798a:	e2 0e       	add	r14, r18
    798c:	f3 1e       	adc	r15, r19
    798e:	04 1f       	adc	r16, r20
    7990:	15 1f       	adc	r17, r21
    7992:	e2 16       	cp	r14, r18
    7994:	f3 06       	cpc	r15, r19
    7996:	04 07       	cpc	r16, r20
    7998:	15 07       	cpc	r17, r21
    799a:	70 f0       	brcs	.+28     	; 0x79b8 <__moddi3+0xbac>
    799c:	e6 16       	cp	r14, r22
    799e:	f7 06       	cpc	r15, r23
    79a0:	08 07       	cpc	r16, r24
    79a2:	19 07       	cpc	r17, r25
    79a4:	48 f4       	brcc	.+18     	; 0x79b8 <__moddi3+0xbac>
    79a6:	08 94       	sec
    79a8:	21 08       	sbc	r2, r1
    79aa:	31 08       	sbc	r3, r1
    79ac:	41 08       	sbc	r4, r1
    79ae:	51 08       	sbc	r5, r1
    79b0:	e2 0e       	add	r14, r18
    79b2:	f3 1e       	adc	r15, r19
    79b4:	04 1f       	adc	r16, r20
    79b6:	15 1f       	adc	r17, r21
    79b8:	e6 1a       	sub	r14, r22
    79ba:	f7 0a       	sbc	r15, r23
    79bc:	08 0b       	sbc	r16, r24
    79be:	19 0b       	sbc	r17, r25
    79c0:	c8 01       	movw	r24, r16
    79c2:	b7 01       	movw	r22, r14
    79c4:	a5 01       	movw	r20, r10
    79c6:	94 01       	movw	r18, r8
    79c8:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    79cc:	62 2e       	mov	r6, r18
    79ce:	d3 2e       	mov	r13, r19
    79d0:	c4 2e       	mov	r12, r20
    79d2:	75 2e       	mov	r7, r21
    79d4:	61 96       	adiw	r28, 0x11	; 17
    79d6:	6c af       	std	Y+60, r22	; 0x3c
    79d8:	7d af       	std	Y+61, r23	; 0x3d
    79da:	8e af       	std	Y+62, r24	; 0x3e
    79dc:	9f af       	std	Y+63, r25	; 0x3f
    79de:	61 97       	sbiw	r28, 0x11	; 17
    79e0:	c8 01       	movw	r24, r16
    79e2:	b7 01       	movw	r22, r14
    79e4:	a5 01       	movw	r20, r10
    79e6:	94 01       	movw	r18, r8
    79e8:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <__udivmodsi4>
    79ec:	86 2d       	mov	r24, r6
    79ee:	9d 2d       	mov	r25, r13
    79f0:	ac 2d       	mov	r26, r12
    79f2:	b7 2d       	mov	r27, r7
    79f4:	5c 01       	movw	r10, r24
    79f6:	6d 01       	movw	r12, r26
    79f8:	c6 01       	movw	r24, r12
    79fa:	b5 01       	movw	r22, r10
    79fc:	29 96       	adiw	r28, 0x09	; 9
    79fe:	2c ad       	ldd	r18, Y+60	; 0x3c
    7a00:	3d ad       	ldd	r19, Y+61	; 0x3d
    7a02:	4e ad       	ldd	r20, Y+62	; 0x3e
    7a04:	5f ad       	ldd	r21, Y+63	; 0x3f
    7a06:	29 97       	sbiw	r28, 0x09	; 9
    7a08:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    7a0c:	8b 01       	movw	r16, r22
    7a0e:	9c 01       	movw	r18, r24
    7a10:	61 96       	adiw	r28, 0x11	; 17
    7a12:	8c ad       	ldd	r24, Y+60	; 0x3c
    7a14:	9d ad       	ldd	r25, Y+61	; 0x3d
    7a16:	ae ad       	ldd	r26, Y+62	; 0x3e
    7a18:	bf ad       	ldd	r27, Y+63	; 0x3f
    7a1a:	61 97       	sbiw	r28, 0x11	; 17
    7a1c:	bc 01       	movw	r22, r24
    7a1e:	55 27       	eor	r21, r21
    7a20:	44 27       	eor	r20, r20
    7a22:	89 ad       	ldd	r24, Y+57	; 0x39
    7a24:	9a ad       	ldd	r25, Y+58	; 0x3a
    7a26:	ab ad       	ldd	r26, Y+59	; 0x3b
    7a28:	bc ad       	ldd	r27, Y+60	; 0x3c
    7a2a:	a0 70       	andi	r26, 0x00	; 0
    7a2c:	b0 70       	andi	r27, 0x00	; 0
    7a2e:	48 2b       	or	r20, r24
    7a30:	59 2b       	or	r21, r25
    7a32:	6a 2b       	or	r22, r26
    7a34:	7b 2b       	or	r23, r27
    7a36:	40 17       	cp	r20, r16
    7a38:	51 07       	cpc	r21, r17
    7a3a:	62 07       	cpc	r22, r18
    7a3c:	73 07       	cpc	r23, r19
    7a3e:	00 f5       	brcc	.+64     	; 0x7a80 <__moddi3+0xc74>
    7a40:	08 94       	sec
    7a42:	a1 08       	sbc	r10, r1
    7a44:	b1 08       	sbc	r11, r1
    7a46:	c1 08       	sbc	r12, r1
    7a48:	d1 08       	sbc	r13, r1
    7a4a:	6d a8       	ldd	r6, Y+53	; 0x35
    7a4c:	7e a8       	ldd	r7, Y+54	; 0x36
    7a4e:	8f a8       	ldd	r8, Y+55	; 0x37
    7a50:	98 ac       	ldd	r9, Y+56	; 0x38
    7a52:	46 0d       	add	r20, r6
    7a54:	57 1d       	adc	r21, r7
    7a56:	68 1d       	adc	r22, r8
    7a58:	79 1d       	adc	r23, r9
    7a5a:	46 15       	cp	r20, r6
    7a5c:	57 05       	cpc	r21, r7
    7a5e:	68 05       	cpc	r22, r8
    7a60:	79 05       	cpc	r23, r9
    7a62:	70 f0       	brcs	.+28     	; 0x7a80 <__moddi3+0xc74>
    7a64:	40 17       	cp	r20, r16
    7a66:	51 07       	cpc	r21, r17
    7a68:	62 07       	cpc	r22, r18
    7a6a:	73 07       	cpc	r23, r19
    7a6c:	48 f4       	brcc	.+18     	; 0x7a80 <__moddi3+0xc74>
    7a6e:	08 94       	sec
    7a70:	a1 08       	sbc	r10, r1
    7a72:	b1 08       	sbc	r11, r1
    7a74:	c1 08       	sbc	r12, r1
    7a76:	d1 08       	sbc	r13, r1
    7a78:	46 0d       	add	r20, r6
    7a7a:	57 1d       	adc	r21, r7
    7a7c:	68 1d       	adc	r22, r8
    7a7e:	79 1d       	adc	r23, r9
    7a80:	db 01       	movw	r26, r22
    7a82:	ca 01       	movw	r24, r20
    7a84:	80 1b       	sub	r24, r16
    7a86:	91 0b       	sbc	r25, r17
    7a88:	a2 0b       	sbc	r26, r18
    7a8a:	b3 0b       	sbc	r27, r19
    7a8c:	89 af       	std	Y+57, r24	; 0x39
    7a8e:	9a af       	std	Y+58, r25	; 0x3a
    7a90:	ab af       	std	Y+59, r26	; 0x3b
    7a92:	bc af       	std	Y+60, r27	; 0x3c
    7a94:	d1 01       	movw	r26, r2
    7a96:	99 27       	eor	r25, r25
    7a98:	88 27       	eor	r24, r24
    7a9a:	8a 29       	or	r24, r10
    7a9c:	9b 29       	or	r25, r11
    7a9e:	ac 29       	or	r26, r12
    7aa0:	bd 29       	or	r27, r13
    7aa2:	3f ef       	ldi	r19, 0xFF	; 255
    7aa4:	e3 2e       	mov	r14, r19
    7aa6:	3f ef       	ldi	r19, 0xFF	; 255
    7aa8:	f3 2e       	mov	r15, r19
    7aaa:	01 2d       	mov	r16, r1
    7aac:	11 2d       	mov	r17, r1
    7aae:	e8 22       	and	r14, r24
    7ab0:	f9 22       	and	r15, r25
    7ab2:	0a 23       	and	r16, r26
    7ab4:	1b 23       	and	r17, r27
    7ab6:	3d 01       	movw	r6, r26
    7ab8:	88 24       	eor	r8, r8
    7aba:	99 24       	eor	r9, r9
    7abc:	2d 96       	adiw	r28, 0x0d	; 13
    7abe:	ac ac       	ldd	r10, Y+60	; 0x3c
    7ac0:	bd ac       	ldd	r11, Y+61	; 0x3d
    7ac2:	ce ac       	ldd	r12, Y+62	; 0x3e
    7ac4:	df ac       	ldd	r13, Y+63	; 0x3f
    7ac6:	2d 97       	sbiw	r28, 0x0d	; 13
    7ac8:	ff ef       	ldi	r31, 0xFF	; 255
    7aca:	2f 2e       	mov	r2, r31
    7acc:	ff ef       	ldi	r31, 0xFF	; 255
    7ace:	3f 2e       	mov	r3, r31
    7ad0:	41 2c       	mov	r4, r1
    7ad2:	51 2c       	mov	r5, r1
    7ad4:	a2 20       	and	r10, r2
    7ad6:	b3 20       	and	r11, r3
    7ad8:	c4 20       	and	r12, r4
    7ada:	d5 20       	and	r13, r5
    7adc:	2d 96       	adiw	r28, 0x0d	; 13
    7ade:	2c ad       	ldd	r18, Y+60	; 0x3c
    7ae0:	3d ad       	ldd	r19, Y+61	; 0x3d
    7ae2:	4e ad       	ldd	r20, Y+62	; 0x3e
    7ae4:	5f ad       	ldd	r21, Y+63	; 0x3f
    7ae6:	2d 97       	sbiw	r28, 0x0d	; 13
    7ae8:	1a 01       	movw	r2, r20
    7aea:	44 24       	eor	r4, r4
    7aec:	55 24       	eor	r5, r5
    7aee:	c8 01       	movw	r24, r16
    7af0:	b7 01       	movw	r22, r14
    7af2:	a6 01       	movw	r20, r12
    7af4:	95 01       	movw	r18, r10
    7af6:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    7afa:	29 96       	adiw	r28, 0x09	; 9
    7afc:	6c af       	std	Y+60, r22	; 0x3c
    7afe:	7d af       	std	Y+61, r23	; 0x3d
    7b00:	8e af       	std	Y+62, r24	; 0x3e
    7b02:	9f af       	std	Y+63, r25	; 0x3f
    7b04:	29 97       	sbiw	r28, 0x09	; 9
    7b06:	c8 01       	movw	r24, r16
    7b08:	b7 01       	movw	r22, r14
    7b0a:	a2 01       	movw	r20, r4
    7b0c:	91 01       	movw	r18, r2
    7b0e:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    7b12:	7b 01       	movw	r14, r22
    7b14:	8c 01       	movw	r16, r24
    7b16:	c4 01       	movw	r24, r8
    7b18:	b3 01       	movw	r22, r6
    7b1a:	a6 01       	movw	r20, r12
    7b1c:	95 01       	movw	r18, r10
    7b1e:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    7b22:	5b 01       	movw	r10, r22
    7b24:	6c 01       	movw	r12, r24
    7b26:	c4 01       	movw	r24, r8
    7b28:	b3 01       	movw	r22, r6
    7b2a:	a2 01       	movw	r20, r4
    7b2c:	91 01       	movw	r18, r2
    7b2e:	0e 94 e3 3e 	call	0x7dc6	; 0x7dc6 <__mulsi3>
    7b32:	9b 01       	movw	r18, r22
    7b34:	ac 01       	movw	r20, r24
    7b36:	ea 0c       	add	r14, r10
    7b38:	fb 1c       	adc	r15, r11
    7b3a:	0c 1d       	adc	r16, r12
    7b3c:	1d 1d       	adc	r17, r13
    7b3e:	29 96       	adiw	r28, 0x09	; 9
    7b40:	2c ac       	ldd	r2, Y+60	; 0x3c
    7b42:	3d ac       	ldd	r3, Y+61	; 0x3d
    7b44:	4e ac       	ldd	r4, Y+62	; 0x3e
    7b46:	5f ac       	ldd	r5, Y+63	; 0x3f
    7b48:	29 97       	sbiw	r28, 0x09	; 9
    7b4a:	c2 01       	movw	r24, r4
    7b4c:	aa 27       	eor	r26, r26
    7b4e:	bb 27       	eor	r27, r27
    7b50:	e8 0e       	add	r14, r24
    7b52:	f9 1e       	adc	r15, r25
    7b54:	0a 1f       	adc	r16, r26
    7b56:	1b 1f       	adc	r17, r27
    7b58:	ea 14       	cp	r14, r10
    7b5a:	fb 04       	cpc	r15, r11
    7b5c:	0c 05       	cpc	r16, r12
    7b5e:	1d 05       	cpc	r17, r13
    7b60:	20 f4       	brcc	.+8      	; 0x7b6a <__moddi3+0xd5e>
    7b62:	20 50       	subi	r18, 0x00	; 0
    7b64:	30 40       	sbci	r19, 0x00	; 0
    7b66:	4f 4f       	sbci	r20, 0xFF	; 255
    7b68:	5f 4f       	sbci	r21, 0xFF	; 255
    7b6a:	c8 01       	movw	r24, r16
    7b6c:	aa 27       	eor	r26, r26
    7b6e:	bb 27       	eor	r27, r27
    7b70:	82 0f       	add	r24, r18
    7b72:	93 1f       	adc	r25, r19
    7b74:	a4 1f       	adc	r26, r20
    7b76:	b5 1f       	adc	r27, r21
    7b78:	87 01       	movw	r16, r14
    7b7a:	ff 24       	eor	r15, r15
    7b7c:	ee 24       	eor	r14, r14
    7b7e:	29 96       	adiw	r28, 0x09	; 9
    7b80:	2c ad       	ldd	r18, Y+60	; 0x3c
    7b82:	3d ad       	ldd	r19, Y+61	; 0x3d
    7b84:	4e ad       	ldd	r20, Y+62	; 0x3e
    7b86:	5f ad       	ldd	r21, Y+63	; 0x3f
    7b88:	29 97       	sbiw	r28, 0x09	; 9
    7b8a:	40 70       	andi	r20, 0x00	; 0
    7b8c:	50 70       	andi	r21, 0x00	; 0
    7b8e:	e2 0e       	add	r14, r18
    7b90:	f3 1e       	adc	r15, r19
    7b92:	04 1f       	adc	r16, r20
    7b94:	15 1f       	adc	r17, r21
    7b96:	49 ac       	ldd	r4, Y+57	; 0x39
    7b98:	5a ac       	ldd	r5, Y+58	; 0x3a
    7b9a:	6b ac       	ldd	r6, Y+59	; 0x3b
    7b9c:	7c ac       	ldd	r7, Y+60	; 0x3c
    7b9e:	48 16       	cp	r4, r24
    7ba0:	59 06       	cpc	r5, r25
    7ba2:	6a 06       	cpc	r6, r26
    7ba4:	7b 06       	cpc	r7, r27
    7ba6:	70 f0       	brcs	.+28     	; 0x7bc4 <__moddi3+0xdb8>
    7ba8:	84 15       	cp	r24, r4
    7baa:	95 05       	cpc	r25, r5
    7bac:	a6 05       	cpc	r26, r6
    7bae:	b7 05       	cpc	r27, r7
    7bb0:	a9 f5       	brne	.+106    	; 0x7c1c <__moddi3+0xe10>
    7bb2:	69 a8       	ldd	r6, Y+49	; 0x31
    7bb4:	7a a8       	ldd	r7, Y+50	; 0x32
    7bb6:	8b a8       	ldd	r8, Y+51	; 0x33
    7bb8:	9c a8       	ldd	r9, Y+52	; 0x34
    7bba:	6e 14       	cp	r6, r14
    7bbc:	7f 04       	cpc	r7, r15
    7bbe:	80 06       	cpc	r8, r16
    7bc0:	91 06       	cpc	r9, r17
    7bc2:	60 f5       	brcc	.+88     	; 0x7c1c <__moddi3+0xe10>
    7bc4:	a8 01       	movw	r20, r16
    7bc6:	97 01       	movw	r18, r14
    7bc8:	2d 96       	adiw	r28, 0x0d	; 13
    7bca:	8c ac       	ldd	r8, Y+60	; 0x3c
    7bcc:	9d ac       	ldd	r9, Y+61	; 0x3d
    7bce:	ae ac       	ldd	r10, Y+62	; 0x3e
    7bd0:	bf ac       	ldd	r11, Y+63	; 0x3f
    7bd2:	2d 97       	sbiw	r28, 0x0d	; 13
    7bd4:	28 19       	sub	r18, r8
    7bd6:	39 09       	sbc	r19, r9
    7bd8:	4a 09       	sbc	r20, r10
    7bda:	5b 09       	sbc	r21, r11
    7bdc:	5c 01       	movw	r10, r24
    7bde:	6d 01       	movw	r12, r26
    7be0:	2d a8       	ldd	r2, Y+53	; 0x35
    7be2:	3e a8       	ldd	r3, Y+54	; 0x36
    7be4:	4f a8       	ldd	r4, Y+55	; 0x37
    7be6:	58 ac       	ldd	r5, Y+56	; 0x38
    7be8:	a2 18       	sub	r10, r2
    7bea:	b3 08       	sbc	r11, r3
    7bec:	c4 08       	sbc	r12, r4
    7bee:	d5 08       	sbc	r13, r5
    7bf0:	81 e0       	ldi	r24, 0x01	; 1
    7bf2:	90 e0       	ldi	r25, 0x00	; 0
    7bf4:	a0 e0       	ldi	r26, 0x00	; 0
    7bf6:	b0 e0       	ldi	r27, 0x00	; 0
    7bf8:	e2 16       	cp	r14, r18
    7bfa:	f3 06       	cpc	r15, r19
    7bfc:	04 07       	cpc	r16, r20
    7bfe:	15 07       	cpc	r17, r21
    7c00:	18 f0       	brcs	.+6      	; 0x7c08 <__moddi3+0xdfc>
    7c02:	80 e0       	ldi	r24, 0x00	; 0
    7c04:	90 e0       	ldi	r25, 0x00	; 0
    7c06:	dc 01       	movw	r26, r24
    7c08:	25 01       	movw	r4, r10
    7c0a:	36 01       	movw	r6, r12
    7c0c:	48 1a       	sub	r4, r24
    7c0e:	59 0a       	sbc	r5, r25
    7c10:	6a 0a       	sbc	r6, r26
    7c12:	7b 0a       	sbc	r7, r27
    7c14:	d3 01       	movw	r26, r6
    7c16:	c2 01       	movw	r24, r4
    7c18:	79 01       	movw	r14, r18
    7c1a:	8a 01       	movw	r16, r20
    7c1c:	69 a8       	ldd	r6, Y+49	; 0x31
    7c1e:	7a a8       	ldd	r7, Y+50	; 0x32
    7c20:	8b a8       	ldd	r8, Y+51	; 0x33
    7c22:	9c a8       	ldd	r9, Y+52	; 0x34
    7c24:	6e 18       	sub	r6, r14
    7c26:	7f 08       	sbc	r7, r15
    7c28:	80 0a       	sbc	r8, r16
    7c2a:	91 0a       	sbc	r9, r17
    7c2c:	94 01       	movw	r18, r8
    7c2e:	83 01       	movw	r16, r6
    7c30:	49 ad       	ldd	r20, Y+57	; 0x39
    7c32:	5a ad       	ldd	r21, Y+58	; 0x3a
    7c34:	6b ad       	ldd	r22, Y+59	; 0x3b
    7c36:	7c ad       	ldd	r23, Y+60	; 0x3c
    7c38:	48 1b       	sub	r20, r24
    7c3a:	59 0b       	sbc	r21, r25
    7c3c:	6a 0b       	sbc	r22, r26
    7c3e:	7b 0b       	sbc	r23, r27
    7c40:	81 e0       	ldi	r24, 0x01	; 1
    7c42:	90 e0       	ldi	r25, 0x00	; 0
    7c44:	a0 e0       	ldi	r26, 0x00	; 0
    7c46:	b0 e0       	ldi	r27, 0x00	; 0
    7c48:	89 a8       	ldd	r8, Y+49	; 0x31
    7c4a:	9a a8       	ldd	r9, Y+50	; 0x32
    7c4c:	ab a8       	ldd	r10, Y+51	; 0x33
    7c4e:	bc a8       	ldd	r11, Y+52	; 0x34
    7c50:	80 16       	cp	r8, r16
    7c52:	91 06       	cpc	r9, r17
    7c54:	a2 06       	cpc	r10, r18
    7c56:	b3 06       	cpc	r11, r19
    7c58:	18 f0       	brcs	.+6      	; 0x7c60 <__moddi3+0xe54>
    7c5a:	80 e0       	ldi	r24, 0x00	; 0
    7c5c:	90 e0       	ldi	r25, 0x00	; 0
    7c5e:	dc 01       	movw	r26, r24
    7c60:	48 1b       	sub	r20, r24
    7c62:	59 0b       	sbc	r21, r25
    7c64:	6a 0b       	sbc	r22, r26
    7c66:	7b 0b       	sbc	r23, r27
    7c68:	5a 01       	movw	r10, r20
    7c6a:	6b 01       	movw	r12, r22
    7c6c:	22 96       	adiw	r28, 0x02	; 2
    7c6e:	0f ac       	ldd	r0, Y+63	; 0x3f
    7c70:	22 97       	sbiw	r28, 0x02	; 2
    7c72:	04 c0       	rjmp	.+8      	; 0x7c7c <__moddi3+0xe70>
    7c74:	aa 0c       	add	r10, r10
    7c76:	bb 1c       	adc	r11, r11
    7c78:	cc 1c       	adc	r12, r12
    7c7a:	dd 1c       	adc	r13, r13
    7c7c:	0a 94       	dec	r0
    7c7e:	d2 f7       	brpl	.-12     	; 0x7c74 <__moddi3+0xe68>
    7c80:	0d ac       	ldd	r0, Y+61	; 0x3d
    7c82:	04 c0       	rjmp	.+8      	; 0x7c8c <__moddi3+0xe80>
    7c84:	36 95       	lsr	r19
    7c86:	27 95       	ror	r18
    7c88:	17 95       	ror	r17
    7c8a:	07 95       	ror	r16
    7c8c:	0a 94       	dec	r0
    7c8e:	d2 f7       	brpl	.-12     	; 0x7c84 <__moddi3+0xe78>
    7c90:	a0 2a       	or	r10, r16
    7c92:	b1 2a       	or	r11, r17
    7c94:	c2 2a       	or	r12, r18
    7c96:	d3 2a       	or	r13, r19
    7c98:	a9 a6       	std	Y+41, r10	; 0x29
    7c9a:	ba a6       	std	Y+42, r11	; 0x2a
    7c9c:	cb a6       	std	Y+43, r12	; 0x2b
    7c9e:	dc a6       	std	Y+44, r13	; 0x2c
    7ca0:	0d ac       	ldd	r0, Y+61	; 0x3d
    7ca2:	04 c0       	rjmp	.+8      	; 0x7cac <__moddi3+0xea0>
    7ca4:	76 95       	lsr	r23
    7ca6:	67 95       	ror	r22
    7ca8:	57 95       	ror	r21
    7caa:	47 95       	ror	r20
    7cac:	0a 94       	dec	r0
    7cae:	d2 f7       	brpl	.-12     	; 0x7ca4 <__moddi3+0xe98>
    7cb0:	4d a7       	std	Y+45, r20	; 0x2d
    7cb2:	5e a7       	std	Y+46, r21	; 0x2e
    7cb4:	6f a7       	std	Y+47, r22	; 0x2f
    7cb6:	78 ab       	std	Y+48, r23	; 0x30
    7cb8:	a9 8a       	std	Y+17, r10	; 0x11
    7cba:	8a a5       	ldd	r24, Y+42	; 0x2a
    7cbc:	8a 8b       	std	Y+18, r24	; 0x12
    7cbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    7cc0:	8b 8b       	std	Y+19, r24	; 0x13
    7cc2:	8c a5       	ldd	r24, Y+44	; 0x2c
    7cc4:	8c 8b       	std	Y+20, r24	; 0x14
    7cc6:	4d 8b       	std	Y+21, r20	; 0x15
    7cc8:	8e a5       	ldd	r24, Y+46	; 0x2e
    7cca:	8e 8b       	std	Y+22, r24	; 0x16
    7ccc:	8f a5       	ldd	r24, Y+47	; 0x2f
    7cce:	8f 8b       	std	Y+23, r24	; 0x17
    7cd0:	88 a9       	ldd	r24, Y+48	; 0x30
    7cd2:	88 8f       	std	Y+24, r24	; 0x18
    7cd4:	65 96       	adiw	r28, 0x15	; 21
    7cd6:	ac ac       	ldd	r10, Y+60	; 0x3c
    7cd8:	bd ac       	ldd	r11, Y+61	; 0x3d
    7cda:	ce ac       	ldd	r12, Y+62	; 0x3e
    7cdc:	df ac       	ldd	r13, Y+63	; 0x3f
    7cde:	65 97       	sbiw	r28, 0x15	; 21
    7ce0:	a1 14       	cp	r10, r1
    7ce2:	b1 04       	cpc	r11, r1
    7ce4:	c1 04       	cpc	r12, r1
    7ce6:	d1 04       	cpc	r13, r1
    7ce8:	09 f4       	brne	.+2      	; 0x7cec <__moddi3+0xee0>
    7cea:	60 c0       	rjmp	.+192    	; 0x7dac <__moddi3+0xfa0>
    7cec:	89 89       	ldd	r24, Y+17	; 0x11
    7cee:	9a 89       	ldd	r25, Y+18	; 0x12
    7cf0:	7b 89       	ldd	r23, Y+19	; 0x13
    7cf2:	6c 89       	ldd	r22, Y+20	; 0x14
    7cf4:	5d 89       	ldd	r21, Y+21	; 0x15
    7cf6:	4e 89       	ldd	r20, Y+22	; 0x16
    7cf8:	3f 89       	ldd	r19, Y+23	; 0x17
    7cfa:	b8 8d       	ldd	r27, Y+24	; 0x18
    7cfc:	81 95       	neg	r24
    7cfe:	e1 e0       	ldi	r30, 0x01	; 1
    7d00:	18 16       	cp	r1, r24
    7d02:	08 f0       	brcs	.+2      	; 0x7d06 <__moddi3+0xefa>
    7d04:	e0 e0       	ldi	r30, 0x00	; 0
    7d06:	91 95       	neg	r25
    7d08:	21 e0       	ldi	r18, 0x01	; 1
    7d0a:	19 16       	cp	r1, r25
    7d0c:	08 f0       	brcs	.+2      	; 0x7d10 <__moddi3+0xf04>
    7d0e:	20 e0       	ldi	r18, 0x00	; 0
    7d10:	f9 2f       	mov	r31, r25
    7d12:	fe 1b       	sub	r31, r30
    7d14:	e1 e0       	ldi	r30, 0x01	; 1
    7d16:	9f 17       	cp	r25, r31
    7d18:	08 f0       	brcs	.+2      	; 0x7d1c <__moddi3+0xf10>
    7d1a:	e0 e0       	ldi	r30, 0x00	; 0
    7d1c:	2e 2b       	or	r18, r30
    7d1e:	71 95       	neg	r23
    7d20:	91 e0       	ldi	r25, 0x01	; 1
    7d22:	17 16       	cp	r1, r23
    7d24:	08 f0       	brcs	.+2      	; 0x7d28 <__moddi3+0xf1c>
    7d26:	90 e0       	ldi	r25, 0x00	; 0
    7d28:	e7 2f       	mov	r30, r23
    7d2a:	e2 1b       	sub	r30, r18
    7d2c:	a1 e0       	ldi	r26, 0x01	; 1
    7d2e:	7e 17       	cp	r23, r30
    7d30:	08 f0       	brcs	.+2      	; 0x7d34 <__moddi3+0xf28>
    7d32:	a0 e0       	ldi	r26, 0x00	; 0
    7d34:	9a 2b       	or	r25, r26
    7d36:	61 95       	neg	r22
    7d38:	21 e0       	ldi	r18, 0x01	; 1
    7d3a:	16 16       	cp	r1, r22
    7d3c:	08 f0       	brcs	.+2      	; 0x7d40 <__moddi3+0xf34>
    7d3e:	20 e0       	ldi	r18, 0x00	; 0
    7d40:	76 2f       	mov	r23, r22
    7d42:	79 1b       	sub	r23, r25
    7d44:	91 e0       	ldi	r25, 0x01	; 1
    7d46:	67 17       	cp	r22, r23
    7d48:	08 f0       	brcs	.+2      	; 0x7d4c <__moddi3+0xf40>
    7d4a:	90 e0       	ldi	r25, 0x00	; 0
    7d4c:	29 2b       	or	r18, r25
    7d4e:	51 95       	neg	r21
    7d50:	91 e0       	ldi	r25, 0x01	; 1
    7d52:	15 16       	cp	r1, r21
    7d54:	08 f0       	brcs	.+2      	; 0x7d58 <__moddi3+0xf4c>
    7d56:	90 e0       	ldi	r25, 0x00	; 0
    7d58:	65 2f       	mov	r22, r21
    7d5a:	62 1b       	sub	r22, r18
    7d5c:	a1 e0       	ldi	r26, 0x01	; 1
    7d5e:	56 17       	cp	r21, r22
    7d60:	08 f0       	brcs	.+2      	; 0x7d64 <__moddi3+0xf58>
    7d62:	a0 e0       	ldi	r26, 0x00	; 0
    7d64:	9a 2b       	or	r25, r26
    7d66:	41 95       	neg	r20
    7d68:	21 e0       	ldi	r18, 0x01	; 1
    7d6a:	14 16       	cp	r1, r20
    7d6c:	08 f0       	brcs	.+2      	; 0x7d70 <__moddi3+0xf64>
    7d6e:	20 e0       	ldi	r18, 0x00	; 0
    7d70:	54 2f       	mov	r21, r20
    7d72:	59 1b       	sub	r21, r25
    7d74:	91 e0       	ldi	r25, 0x01	; 1
    7d76:	45 17       	cp	r20, r21
    7d78:	08 f0       	brcs	.+2      	; 0x7d7c <__moddi3+0xf70>
    7d7a:	90 e0       	ldi	r25, 0x00	; 0
    7d7c:	29 2b       	or	r18, r25
    7d7e:	31 95       	neg	r19
    7d80:	91 e0       	ldi	r25, 0x01	; 1
    7d82:	13 16       	cp	r1, r19
    7d84:	08 f0       	brcs	.+2      	; 0x7d88 <__moddi3+0xf7c>
    7d86:	90 e0       	ldi	r25, 0x00	; 0
    7d88:	43 2f       	mov	r20, r19
    7d8a:	42 1b       	sub	r20, r18
    7d8c:	a1 e0       	ldi	r26, 0x01	; 1
    7d8e:	34 17       	cp	r19, r20
    7d90:	08 f0       	brcs	.+2      	; 0x7d94 <__moddi3+0xf88>
    7d92:	a0 e0       	ldi	r26, 0x00	; 0
    7d94:	9a 2b       	or	r25, r26
    7d96:	2b 2f       	mov	r18, r27
    7d98:	21 95       	neg	r18
    7d9a:	29 1b       	sub	r18, r25
    7d9c:	89 8b       	std	Y+17, r24	; 0x11
    7d9e:	fa 8b       	std	Y+18, r31	; 0x12
    7da0:	eb 8b       	std	Y+19, r30	; 0x13
    7da2:	7c 8b       	std	Y+20, r23	; 0x14
    7da4:	6d 8b       	std	Y+21, r22	; 0x15
    7da6:	5e 8b       	std	Y+22, r21	; 0x16
    7da8:	4f 8b       	std	Y+23, r20	; 0x17
    7daa:	28 8f       	std	Y+24, r18	; 0x18
    7dac:	29 89       	ldd	r18, Y+17	; 0x11
    7dae:	3a 89       	ldd	r19, Y+18	; 0x12
    7db0:	4b 89       	ldd	r20, Y+19	; 0x13
    7db2:	5c 89       	ldd	r21, Y+20	; 0x14
    7db4:	6d 89       	ldd	r22, Y+21	; 0x15
    7db6:	7e 89       	ldd	r23, Y+22	; 0x16
    7db8:	8f 89       	ldd	r24, Y+23	; 0x17
    7dba:	98 8d       	ldd	r25, Y+24	; 0x18
    7dbc:	cc 5a       	subi	r28, 0xAC	; 172
    7dbe:	df 4f       	sbci	r29, 0xFF	; 255
    7dc0:	e2 e1       	ldi	r30, 0x12	; 18
    7dc2:	0c 94 8e 3f 	jmp	0x7f1c	; 0x7f1c <__epilogue_restores__>

00007dc6 <__mulsi3>:
    7dc6:	62 9f       	mul	r22, r18
    7dc8:	d0 01       	movw	r26, r0
    7dca:	73 9f       	mul	r23, r19
    7dcc:	f0 01       	movw	r30, r0
    7dce:	82 9f       	mul	r24, r18
    7dd0:	e0 0d       	add	r30, r0
    7dd2:	f1 1d       	adc	r31, r1
    7dd4:	64 9f       	mul	r22, r20
    7dd6:	e0 0d       	add	r30, r0
    7dd8:	f1 1d       	adc	r31, r1
    7dda:	92 9f       	mul	r25, r18
    7ddc:	f0 0d       	add	r31, r0
    7dde:	83 9f       	mul	r24, r19
    7de0:	f0 0d       	add	r31, r0
    7de2:	74 9f       	mul	r23, r20
    7de4:	f0 0d       	add	r31, r0
    7de6:	65 9f       	mul	r22, r21
    7de8:	f0 0d       	add	r31, r0
    7dea:	99 27       	eor	r25, r25
    7dec:	72 9f       	mul	r23, r18
    7dee:	b0 0d       	add	r27, r0
    7df0:	e1 1d       	adc	r30, r1
    7df2:	f9 1f       	adc	r31, r25
    7df4:	63 9f       	mul	r22, r19
    7df6:	b0 0d       	add	r27, r0
    7df8:	e1 1d       	adc	r30, r1
    7dfa:	f9 1f       	adc	r31, r25
    7dfc:	bd 01       	movw	r22, r26
    7dfe:	cf 01       	movw	r24, r30
    7e00:	11 24       	eor	r1, r1
    7e02:	08 95       	ret

00007e04 <__udivmodqi4>:
    7e04:	99 1b       	sub	r25, r25
    7e06:	79 e0       	ldi	r23, 0x09	; 9
    7e08:	04 c0       	rjmp	.+8      	; 0x7e12 <__udivmodqi4_ep>

00007e0a <__udivmodqi4_loop>:
    7e0a:	99 1f       	adc	r25, r25
    7e0c:	96 17       	cp	r25, r22
    7e0e:	08 f0       	brcs	.+2      	; 0x7e12 <__udivmodqi4_ep>
    7e10:	96 1b       	sub	r25, r22

00007e12 <__udivmodqi4_ep>:
    7e12:	88 1f       	adc	r24, r24
    7e14:	7a 95       	dec	r23
    7e16:	c9 f7       	brne	.-14     	; 0x7e0a <__udivmodqi4_loop>
    7e18:	80 95       	com	r24
    7e1a:	08 95       	ret

00007e1c <__udivmodhi4>:
    7e1c:	aa 1b       	sub	r26, r26
    7e1e:	bb 1b       	sub	r27, r27
    7e20:	51 e1       	ldi	r21, 0x11	; 17
    7e22:	07 c0       	rjmp	.+14     	; 0x7e32 <__udivmodhi4_ep>

00007e24 <__udivmodhi4_loop>:
    7e24:	aa 1f       	adc	r26, r26
    7e26:	bb 1f       	adc	r27, r27
    7e28:	a6 17       	cp	r26, r22
    7e2a:	b7 07       	cpc	r27, r23
    7e2c:	10 f0       	brcs	.+4      	; 0x7e32 <__udivmodhi4_ep>
    7e2e:	a6 1b       	sub	r26, r22
    7e30:	b7 0b       	sbc	r27, r23

00007e32 <__udivmodhi4_ep>:
    7e32:	88 1f       	adc	r24, r24
    7e34:	99 1f       	adc	r25, r25
    7e36:	5a 95       	dec	r21
    7e38:	a9 f7       	brne	.-22     	; 0x7e24 <__udivmodhi4_loop>
    7e3a:	80 95       	com	r24
    7e3c:	90 95       	com	r25
    7e3e:	bc 01       	movw	r22, r24
    7e40:	cd 01       	movw	r24, r26
    7e42:	08 95       	ret

00007e44 <__divmodhi4>:
    7e44:	97 fb       	bst	r25, 7
    7e46:	09 2e       	mov	r0, r25
    7e48:	07 26       	eor	r0, r23
    7e4a:	0a d0       	rcall	.+20     	; 0x7e60 <__divmodhi4_neg1>
    7e4c:	77 fd       	sbrc	r23, 7
    7e4e:	04 d0       	rcall	.+8      	; 0x7e58 <__divmodhi4_neg2>
    7e50:	e5 df       	rcall	.-54     	; 0x7e1c <__udivmodhi4>
    7e52:	06 d0       	rcall	.+12     	; 0x7e60 <__divmodhi4_neg1>
    7e54:	00 20       	and	r0, r0
    7e56:	1a f4       	brpl	.+6      	; 0x7e5e <__divmodhi4_exit>

00007e58 <__divmodhi4_neg2>:
    7e58:	70 95       	com	r23
    7e5a:	61 95       	neg	r22
    7e5c:	7f 4f       	sbci	r23, 0xFF	; 255

00007e5e <__divmodhi4_exit>:
    7e5e:	08 95       	ret

00007e60 <__divmodhi4_neg1>:
    7e60:	f6 f7       	brtc	.-4      	; 0x7e5e <__divmodhi4_exit>
    7e62:	90 95       	com	r25
    7e64:	81 95       	neg	r24
    7e66:	9f 4f       	sbci	r25, 0xFF	; 255
    7e68:	08 95       	ret

00007e6a <__udivmodsi4>:
    7e6a:	a1 e2       	ldi	r26, 0x21	; 33
    7e6c:	1a 2e       	mov	r1, r26
    7e6e:	aa 1b       	sub	r26, r26
    7e70:	bb 1b       	sub	r27, r27
    7e72:	fd 01       	movw	r30, r26
    7e74:	0d c0       	rjmp	.+26     	; 0x7e90 <__udivmodsi4_ep>

00007e76 <__udivmodsi4_loop>:
    7e76:	aa 1f       	adc	r26, r26
    7e78:	bb 1f       	adc	r27, r27
    7e7a:	ee 1f       	adc	r30, r30
    7e7c:	ff 1f       	adc	r31, r31
    7e7e:	a2 17       	cp	r26, r18
    7e80:	b3 07       	cpc	r27, r19
    7e82:	e4 07       	cpc	r30, r20
    7e84:	f5 07       	cpc	r31, r21
    7e86:	20 f0       	brcs	.+8      	; 0x7e90 <__udivmodsi4_ep>
    7e88:	a2 1b       	sub	r26, r18
    7e8a:	b3 0b       	sbc	r27, r19
    7e8c:	e4 0b       	sbc	r30, r20
    7e8e:	f5 0b       	sbc	r31, r21

00007e90 <__udivmodsi4_ep>:
    7e90:	66 1f       	adc	r22, r22
    7e92:	77 1f       	adc	r23, r23
    7e94:	88 1f       	adc	r24, r24
    7e96:	99 1f       	adc	r25, r25
    7e98:	1a 94       	dec	r1
    7e9a:	69 f7       	brne	.-38     	; 0x7e76 <__udivmodsi4_loop>
    7e9c:	60 95       	com	r22
    7e9e:	70 95       	com	r23
    7ea0:	80 95       	com	r24
    7ea2:	90 95       	com	r25
    7ea4:	9b 01       	movw	r18, r22
    7ea6:	ac 01       	movw	r20, r24
    7ea8:	bd 01       	movw	r22, r26
    7eaa:	cf 01       	movw	r24, r30
    7eac:	08 95       	ret

00007eae <__divmodsi4>:
    7eae:	97 fb       	bst	r25, 7
    7eb0:	09 2e       	mov	r0, r25
    7eb2:	05 26       	eor	r0, r21
    7eb4:	0e d0       	rcall	.+28     	; 0x7ed2 <__divmodsi4_neg1>
    7eb6:	57 fd       	sbrc	r21, 7
    7eb8:	04 d0       	rcall	.+8      	; 0x7ec2 <__divmodsi4_neg2>
    7eba:	d7 df       	rcall	.-82     	; 0x7e6a <__udivmodsi4>
    7ebc:	0a d0       	rcall	.+20     	; 0x7ed2 <__divmodsi4_neg1>
    7ebe:	00 1c       	adc	r0, r0
    7ec0:	38 f4       	brcc	.+14     	; 0x7ed0 <__divmodsi4_exit>

00007ec2 <__divmodsi4_neg2>:
    7ec2:	50 95       	com	r21
    7ec4:	40 95       	com	r20
    7ec6:	30 95       	com	r19
    7ec8:	21 95       	neg	r18
    7eca:	3f 4f       	sbci	r19, 0xFF	; 255
    7ecc:	4f 4f       	sbci	r20, 0xFF	; 255
    7ece:	5f 4f       	sbci	r21, 0xFF	; 255

00007ed0 <__divmodsi4_exit>:
    7ed0:	08 95       	ret

00007ed2 <__divmodsi4_neg1>:
    7ed2:	f6 f7       	brtc	.-4      	; 0x7ed0 <__divmodsi4_exit>
    7ed4:	90 95       	com	r25
    7ed6:	80 95       	com	r24
    7ed8:	70 95       	com	r23
    7eda:	61 95       	neg	r22
    7edc:	7f 4f       	sbci	r23, 0xFF	; 255
    7ede:	8f 4f       	sbci	r24, 0xFF	; 255
    7ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    7ee2:	08 95       	ret

00007ee4 <__prologue_saves__>:
    7ee4:	2f 92       	push	r2
    7ee6:	3f 92       	push	r3
    7ee8:	4f 92       	push	r4
    7eea:	5f 92       	push	r5
    7eec:	6f 92       	push	r6
    7eee:	7f 92       	push	r7
    7ef0:	8f 92       	push	r8
    7ef2:	9f 92       	push	r9
    7ef4:	af 92       	push	r10
    7ef6:	bf 92       	push	r11
    7ef8:	cf 92       	push	r12
    7efa:	df 92       	push	r13
    7efc:	ef 92       	push	r14
    7efe:	ff 92       	push	r15
    7f00:	0f 93       	push	r16
    7f02:	1f 93       	push	r17
    7f04:	cf 93       	push	r28
    7f06:	df 93       	push	r29
    7f08:	cd b7       	in	r28, 0x3d	; 61
    7f0a:	de b7       	in	r29, 0x3e	; 62
    7f0c:	ca 1b       	sub	r28, r26
    7f0e:	db 0b       	sbc	r29, r27
    7f10:	0f b6       	in	r0, 0x3f	; 63
    7f12:	f8 94       	cli
    7f14:	de bf       	out	0x3e, r29	; 62
    7f16:	0f be       	out	0x3f, r0	; 63
    7f18:	cd bf       	out	0x3d, r28	; 61
    7f1a:	09 94       	ijmp

00007f1c <__epilogue_restores__>:
    7f1c:	2a 88       	ldd	r2, Y+18	; 0x12
    7f1e:	39 88       	ldd	r3, Y+17	; 0x11
    7f20:	48 88       	ldd	r4, Y+16	; 0x10
    7f22:	5f 84       	ldd	r5, Y+15	; 0x0f
    7f24:	6e 84       	ldd	r6, Y+14	; 0x0e
    7f26:	7d 84       	ldd	r7, Y+13	; 0x0d
    7f28:	8c 84       	ldd	r8, Y+12	; 0x0c
    7f2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    7f2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    7f2e:	b9 84       	ldd	r11, Y+9	; 0x09
    7f30:	c8 84       	ldd	r12, Y+8	; 0x08
    7f32:	df 80       	ldd	r13, Y+7	; 0x07
    7f34:	ee 80       	ldd	r14, Y+6	; 0x06
    7f36:	fd 80       	ldd	r15, Y+5	; 0x05
    7f38:	0c 81       	ldd	r16, Y+4	; 0x04
    7f3a:	1b 81       	ldd	r17, Y+3	; 0x03
    7f3c:	aa 81       	ldd	r26, Y+2	; 0x02
    7f3e:	b9 81       	ldd	r27, Y+1	; 0x01
    7f40:	ce 0f       	add	r28, r30
    7f42:	d1 1d       	adc	r29, r1
    7f44:	0f b6       	in	r0, 0x3f	; 63
    7f46:	f8 94       	cli
    7f48:	de bf       	out	0x3e, r29	; 62
    7f4a:	0f be       	out	0x3f, r0	; 63
    7f4c:	cd bf       	out	0x3d, r28	; 61
    7f4e:	ed 01       	movw	r28, r26
    7f50:	08 95       	ret

00007f52 <atoi>:
    7f52:	fc 01       	movw	r30, r24
    7f54:	88 27       	eor	r24, r24
    7f56:	99 27       	eor	r25, r25
    7f58:	e8 94       	clt
    7f5a:	21 91       	ld	r18, Z+
    7f5c:	20 32       	cpi	r18, 0x20	; 32
    7f5e:	e9 f3       	breq	.-6      	; 0x7f5a <atoi+0x8>
    7f60:	29 30       	cpi	r18, 0x09	; 9
    7f62:	10 f0       	brcs	.+4      	; 0x7f68 <atoi+0x16>
    7f64:	2e 30       	cpi	r18, 0x0E	; 14
    7f66:	c8 f3       	brcs	.-14     	; 0x7f5a <atoi+0x8>
    7f68:	2b 32       	cpi	r18, 0x2B	; 43
    7f6a:	41 f0       	breq	.+16     	; 0x7f7c <atoi+0x2a>
    7f6c:	2d 32       	cpi	r18, 0x2D	; 45
    7f6e:	39 f4       	brne	.+14     	; 0x7f7e <atoi+0x2c>
    7f70:	68 94       	set
    7f72:	04 c0       	rjmp	.+8      	; 0x7f7c <atoi+0x2a>
    7f74:	0e 94 c7 3f 	call	0x7f8e	; 0x7f8e <__mulhi_const_10>
    7f78:	82 0f       	add	r24, r18
    7f7a:	91 1d       	adc	r25, r1
    7f7c:	21 91       	ld	r18, Z+
    7f7e:	20 53       	subi	r18, 0x30	; 48
    7f80:	2a 30       	cpi	r18, 0x0A	; 10
    7f82:	c0 f3       	brcs	.-16     	; 0x7f74 <atoi+0x22>
    7f84:	1e f4       	brtc	.+6      	; 0x7f8c <atoi+0x3a>
    7f86:	90 95       	com	r25
    7f88:	81 95       	neg	r24
    7f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    7f8c:	08 95       	ret

00007f8e <__mulhi_const_10>:
    7f8e:	7a e0       	ldi	r23, 0x0A	; 10
    7f90:	97 9f       	mul	r25, r23
    7f92:	90 2d       	mov	r25, r0
    7f94:	87 9f       	mul	r24, r23
    7f96:	80 2d       	mov	r24, r0
    7f98:	91 0d       	add	r25, r1
    7f9a:	11 24       	eor	r1, r1
    7f9c:	08 95       	ret

00007f9e <__eerd_byte_m324p>:
    7f9e:	f9 99       	sbic	0x1f, 1	; 31
    7fa0:	fe cf       	rjmp	.-4      	; 0x7f9e <__eerd_byte_m324p>
    7fa2:	92 bd       	out	0x22, r25	; 34
    7fa4:	81 bd       	out	0x21, r24	; 33
    7fa6:	f8 9a       	sbi	0x1f, 0	; 31
    7fa8:	99 27       	eor	r25, r25
    7faa:	80 b5       	in	r24, 0x20	; 32
    7fac:	08 95       	ret

00007fae <__eewr_byte_m324p>:
    7fae:	26 2f       	mov	r18, r22

00007fb0 <__eewr_r18_m324p>:
    7fb0:	f9 99       	sbic	0x1f, 1	; 31
    7fb2:	fe cf       	rjmp	.-4      	; 0x7fb0 <__eewr_r18_m324p>
    7fb4:	1f ba       	out	0x1f, r1	; 31
    7fb6:	92 bd       	out	0x22, r25	; 34
    7fb8:	81 bd       	out	0x21, r24	; 33
    7fba:	20 bd       	out	0x20, r18	; 32
    7fbc:	0f b6       	in	r0, 0x3f	; 63
    7fbe:	f8 94       	cli
    7fc0:	fa 9a       	sbi	0x1f, 2	; 31
    7fc2:	f9 9a       	sbi	0x1f, 1	; 31
    7fc4:	0f be       	out	0x3f, r0	; 63
    7fc6:	01 96       	adiw	r24, 0x01	; 1
    7fc8:	08 95       	ret

00007fca <_exit>:
    7fca:	f8 94       	cli

00007fcc <__stop_program>:
    7fcc:	ff cf       	rjmp	.-2      	; 0x7fcc <__stop_program>
