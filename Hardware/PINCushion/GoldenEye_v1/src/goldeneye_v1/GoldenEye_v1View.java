/**
 * Copyright (c) 2008, iSENSE Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials
 * provided with the distribution. Neither the name of the University of
 * Massachusetts Lowell nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */
package goldeneye_v1;

import com.pinpoint.api.PinComm;
import com.pinpoint.api.PinpointConverter;
import com.pinpoint.api.bootloaderInterface;
import com.pinpoint.api.pinpointInterface;
import com.pinpoint.exceptions.IncompatibleConversionException;
import com.pinpoint.exceptions.InvalidHexException;
import com.pinpoint.exceptions.MissingLogFileException;
import com.pinpoint.exceptions.NoConnectionException;
import com.pinpoint.exceptions.NoDataException;
import java.awt.Cursor;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.prefs.BackingStoreException;
import javax.swing.JFileChooser;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * The application's main frame.
 */
public class GoldenEye_v1View extends FrameView {

    private DefaultTableModel tmodel;
    private String[] headers;
    private AboutBox aboutBox;
    private ConfigurationWindow configure;
    private pinpointInterface pinpoint = null;
    ArrayList<String[]> data;

    public GoldenEye_v1View(SingleFrameApplication app) {
        super(app);

        initComponents();

        tmodel.setColumnIdentifiers(PinpointConverter.tableHeaders);
        checkMultipleSessions.setEnabled(false);
        saveDataButton.setEnabled(false);
        saveMenuItem.setEnabled(false);
        this.getFrame().setTitle("PINCushion - Goldeneye (5.1)");
    }

    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = GoldenEye_v1App.getApplication().getMainFrame();
            aboutBox = new AboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        GoldenEye_v1App.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        uploadDataButton = new javax.swing.JButton();
        clearPPTDataButton = new javax.swing.JButton();
        startRecordingButton = new javax.swing.JButton();
        saveDataButton = new javax.swing.JButton();
        dataPanel = new javax.swing.JPanel();
        dataScrollPane = new javax.swing.JScrollPane();
        tmodel = new DefaultTableModel();
        dataTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        updateConversionsMenuItem = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        checkMultipleSessions = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        syncTimeMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        updateBootloaderMenuItem = new javax.swing.JMenuItem();
        configureMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(goldeneye_v1.GoldenEye_v1App.class).getContext().getResourceMap(GoldenEye_v1View.class);
        buttonPanel.setBackground(resourceMap.getColor("buttonPanel.background")); // NOI18N
        buttonPanel.setName("buttonPanel"); // NOI18N

        uploadDataButton.setText(resourceMap.getString("uploadDataButton.text")); // NOI18N
        uploadDataButton.setName("uploadDataButton"); // NOI18N
        uploadDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadDataButtonActionPerformed(evt);
            }
        });

        clearPPTDataButton.setText(resourceMap.getString("clearPPTDataButton.text")); // NOI18N
        clearPPTDataButton.setName("clearPPTDataButton"); // NOI18N
        clearPPTDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPPTDataButtonActionPerformed(evt);
            }
        });

        startRecordingButton.setText(resourceMap.getString("startRecordingButton.text")); // NOI18N
        startRecordingButton.setName("startRecordingButton"); // NOI18N
        startRecordingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startRecordingButtonActionPerformed(evt);
            }
        });

        saveDataButton.setText(resourceMap.getString("saveDataButton.text")); // NOI18N
        saveDataButton.setName("saveDataButton"); // NOI18N
        saveDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                    .addComponent(uploadDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                    .addComponent(startRecordingButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                    .addComponent(clearPPTDataButton, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(uploadDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(saveDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 198, Short.MAX_VALUE)
                .addComponent(clearPPTDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(startRecordingButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        dataPanel.setBackground(resourceMap.getColor("dataPanel.background")); // NOI18N
        dataPanel.setName("dataPanel"); // NOI18N

        dataScrollPane.setName("dataScrollPane"); // NOI18N

        dataTable.setModel(tmodel);
        dataTable.setName("dataTable"); // NOI18N
        dataScrollPane.setViewportView(dataTable);

        javax.swing.GroupLayout dataPanelLayout = new javax.swing.GroupLayout(dataPanel);
        dataPanel.setLayout(dataPanelLayout);
        dataPanelLayout.setHorizontalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
        );
        dataPanelLayout.setVerticalGroup(
            dataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dataScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(dataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText(resourceMap.getString("saveMenuItem.text")); // NOI18N
        saveMenuItem.setName("saveMenuItem"); // NOI18N
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(goldeneye_v1.GoldenEye_v1App.class).getContext().getActionMap(GoldenEye_v1View.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        toolsMenu.setText(resourceMap.getString("toolsMenu.text")); // NOI18N
        toolsMenu.setName("toolsMenu"); // NOI18N

        updateConversionsMenuItem.setText(resourceMap.getString("updateConversionsMenuItem.text")); // NOI18N
        updateConversionsMenuItem.setName("updateConversionsMenuItem"); // NOI18N
        updateConversionsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateConversionsMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(updateConversionsMenuItem);

        jSeparator8.setName("jSeparator8"); // NOI18N
        toolsMenu.add(jSeparator8);

        checkMultipleSessions.setText(resourceMap.getString("checkMultipleSessions.text")); // NOI18N
        checkMultipleSessions.setName("checkMultipleSessions"); // NOI18N
        checkMultipleSessions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkMultipleSessionsActionPerformed(evt);
            }
        });
        toolsMenu.add(checkMultipleSessions);

        jSeparator6.setName("jSeparator6"); // NOI18N
        toolsMenu.add(jSeparator6);

        syncTimeMenuItem.setText(resourceMap.getString("syncTimeMenuItem.text")); // NOI18N
        syncTimeMenuItem.setName("syncTimeMenuItem"); // NOI18N
        syncTimeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncTimeMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(syncTimeMenuItem);

        jSeparator5.setName("jSeparator5"); // NOI18N
        toolsMenu.add(jSeparator5);

        jSeparator4.setName("jSeparator4"); // NOI18N
        toolsMenu.add(jSeparator4);

        jSeparator2.setName("jSeparator2"); // NOI18N
        toolsMenu.add(jSeparator2);

        jSeparator1.setName("jSeparator1"); // NOI18N
        toolsMenu.add(jSeparator1);

        jSeparator3.setName("jSeparator3"); // NOI18N
        toolsMenu.add(jSeparator3);

        jSeparator7.setName("jSeparator7"); // NOI18N
        toolsMenu.add(jSeparator7);

        updateBootloaderMenuItem.setText(resourceMap.getString("updateBootloaderMenuItem.text")); // NOI18N
        updateBootloaderMenuItem.setName("updateBootloaderMenuItem"); // NOI18N
        updateBootloaderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBootloaderMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(updateBootloaderMenuItem);

        configureMenuItem.setText(resourceMap.getString("configureMenuItem.text")); // NOI18N
        configureMenuItem.setName("configureMenuItem"); // NOI18N
        configureMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configureMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(configureMenuItem);

        menuBar.add(toolsMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setText(resourceMap.getString("aboutMenuItem.text")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        jCheckBox1.setText(resourceMap.getString("jCheckBox1.text")); // NOI18N
        jCheckBox1.setName("jCheckBox1"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void configureMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configureMenuItemActionPerformed

        if (pptIsAvailable()) {
            JFrame mainFrame = GoldenEye_v1App.getApplication().getMainFrame();
            try {
                configure = new ConfigurationWindow(mainFrame, pinpoint);
                configure.setLocationRelativeTo(mainFrame);

                GoldenEye_v1App.getApplication().show(configure);
            } catch (BackingStoreException ex) {
                JOptionPane.showMessageDialog(this.getFrame(), "Could not open Java Preferences.", "Conversions error", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this.getFrame(), "PINPoint not found.", "PINPoint error", JOptionPane.ERROR_MESSAGE);
            } catch (MissingLogFileException ex) {
                JOptionPane.showMessageDialog(this.getFrame(), "Conversions file could not be found.\nTry \"Tools/Update Conversions\"", "Conversions error", JOptionPane.ERROR_MESSAGE);
            }
            tmodel.setColumnIdentifiers(PinpointConverter.tableHeaders);

        }
    }//GEN-LAST:event_configureMenuItemActionPerformed

    private void uploadDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadDataButtonActionPerformed

        try {
            if (pptIsAvailable()) {

                //Set the cursor to busy, upload/convert data, then set to default.
                GoldenEye_v1App.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                data = pinpoint.getData();
                GoldenEye_v1App.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

                tmodel.setRowCount(0);
                tmodel.setColumnIdentifiers(PinpointConverter.tableHeaders);
                if (data != null) {
                    for (int i = 0; i < data.size(); i++) {
                        tmodel.addRow(data.get(i));
                    }

                    checkMultipleSessions.setEnabled(true);
                    saveDataButton.setEnabled(true);
                    saveMenuItem.setEnabled(true);
                }

                pinpoint.disconnect();
            }
      
        } catch (BackingStoreException ex) {
            GoldenEye_v1App.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(this.getFrame(), "Could not open Java Preferences.", "Conversions error", JOptionPane.ERROR_MESSAGE);
        } catch (NoDataException ex) {
            GoldenEye_v1App.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(this.getFrame(), "No data was found on the connected PINpoint.");            
        } catch (IncompatibleConversionException ex) {
            GoldenEye_v1App.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(this.getFrame(), "Conversions file mismatch, please go to \"Tools -> Update Conversions\"");          
        }
        pinpoint.disconnect();
    }//GEN-LAST:event_uploadDataButtonActionPerformed

    private void clearPPTDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPPTDataButtonActionPerformed

        tmodel.setRowCount(0);
        checkMultipleSessions.setEnabled(false);
        saveDataButton.setEnabled(false);

    }//GEN-LAST:event_clearPPTDataButtonActionPerformed

    private void startRecordingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startRecordingButtonActionPerformed
        if (pptIsAvailable()) {
            pinpoint.startRecordingData();
            pinpoint.disconnect();
        }
    }//GEN-LAST:event_startRecordingButtonActionPerformed

    private void saveDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDataButtonActionPerformed
       saveMenuItemActionPerformed(evt);
    }//GEN-LAST:event_saveDataButtonActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JFrame mainFrame = GoldenEye_v1App.getApplication().getMainFrame();
        aboutBox = new AboutBox(mainFrame);
        aboutBox.setLocationRelativeTo(mainFrame);

        GoldenEye_v1App.getApplication().show(aboutBox);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void updateConversionsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateConversionsMenuItemActionPerformed
      
        try {

            pinpointInterface ppI = new pinpointInterface(false);
            GoldenEye_v1App.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            ppI.DownloadLatestConversions();
            GoldenEye_v1App.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(this.getFrame(), "Conversions Successfully Updated", "Success", JOptionPane.INFORMATION_MESSAGE);
        
        } catch (NoConnectionException ex) {
            //This will never happen. 
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this.getFrame(), "Could not reach Google Docs for conversions.", "Internet Connection Error", JOptionPane.ERROR_MESSAGE);
        } catch (BackingStoreException ex) {
            JOptionPane.showMessageDialog(this.getFrame(), "Could not store the conversions.", "Preferences Error", JOptionPane.ERROR_MESSAGE);
        }
        GoldenEye_v1App.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_updateConversionsMenuItemActionPerformed

    private void checkMultipleSessionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkMultipleSessionsActionPerformed
        int count = 0;
        ArrayList<ArrayList<String[]>> multiSessions = new ArrayList<ArrayList<String[]>>();
        multiSessions.add(new ArrayList<String[]>());
        multiSessions.get(count).add(data.get(0));
        if (pptIsAvailable()) {

            int sampleRate = pinpoint.getSetting(PinComm.SAMPLE_RATE);

            try {
                DateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss:SSS");
                long currentTime = format.parse(data.get(0)[0]).getTime();
                for (int i = 1; i < data.size(); i++) {
                    long testTime = format.parse(data.get(i)[0]).getTime();
                    if ((testTime - sampleRate) > currentTime) {
                        count++;
                        multiSessions.add(new ArrayList<String[]>());
                        multiSessions.get(count).add(data.get(i));
                    } else {
                        multiSessions.get(count).add(data.get(i));
                    }



                    currentTime = testTime;
                }


            } catch (ParseException ex) {
                System.err.println("Error parsing date while looking for multiple sessions");
            }
            pinpoint.disconnect();
        }


        System.out.println(multiSessions.size() + " sessions found on your pinpoint");

        if (multiSessions.size() > 1) {
            int x = JOptionPane.showConfirmDialog(this.getFrame(), "Multiple Sessions Found would you like to save?", "Multiple Sessions Found", JOptionPane.YES_NO_OPTION);
            if (x == JOptionPane.YES_OPTION) {
                FileSaver saver = new FileSaver(this.getFrame());
                for (ArrayList<String[]> temp : multiSessions) {
                    saver.saveFile(temp);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this.getFrame(), "The data is continuous, only one session was found");
        }
    }//GEN-LAST:event_checkMultipleSessionsActionPerformed

    private void syncTimeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncTimeMenuItemActionPerformed
        if (pptIsAvailable()) {
            boolean worked = pinpoint.setRealTimeClock();
            pinpoint.disconnect();

            if (worked) {
                JOptionPane.showMessageDialog(this.getFrame(), "The PINPoints time has been successfully synced");
            } else {
                JOptionPane.showMessageDialog(this.getFrame(), "The PINPoints time could not be synced.", "Sync Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_syncTimeMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        viewToMemory();
        FileSaver fs = new FileSaver(this.getFrame());

        if (!fs.saveFile(data)) {
            JOptionPane.showMessageDialog(this.getFrame(), "Could not save the file! Please check permissions.", "Error Saving File", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void updateBootloaderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBootloaderMenuItemActionPerformed
        try {
            final JFileChooser jfc = new JFileChooser();
            int yesNo = jfc.showOpenDialog(this.getFrame());
            if (yesNo == JFileChooser.APPROVE_OPTION) {

                String file = jfc.getSelectedFile().toString();

                //Get Line count for time.
                BufferedReader b = new BufferedReader(new FileReader(file));
                int count = 0;
                while (b.readLine() != null) {
                    count++;
                }

                this.getFrame().setEnabled(false);

                startProgressBar spb = new startProgressBar(count, 32, "Updating firmware");
                spb.start();

                this.getFrame().setEnabled(false);

                //BootloaderUpdater bu = new BootloaderUpdater(this.getFrame(), file);
                //bu.start();

                GoldenEye_v1App.getApplication().getMainFrame().setEnabled(true);
            }

        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_updateBootloaderMenuItemActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JMenuItem checkMultipleSessions;
    private javax.swing.JButton clearPPTDataButton;
    private javax.swing.JMenuItem configureMenuItem;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JScrollPane dataScrollPane;
    private javax.swing.JTable dataTable;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton saveDataButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton startRecordingButton;
    private javax.swing.JMenuItem syncTimeMenuItem;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JMenuItem updateBootloaderMenuItem;
    private javax.swing.JMenuItem updateConversionsMenuItem;
    private javax.swing.JButton uploadDataButton;
    // End of variables declaration//GEN-END:variables

    private boolean pptIsAvailable() {
        try {
            pinpoint = new pinpointInterface(true);
        } catch (NoConnectionException ex) {

            JOptionPane.showMessageDialog(GoldenEye_v1App.getApplication().getMainFrame(),
                    "No PIN Points were found.\nPlease make sure it is plugged in and turned on.",
                    "PIN POINT NOT FOUND",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        } catch (Exception ex) {
            return false;
        }

        return true;
    }

    /**
     * The viewToMemory function will transform the version of the data structure
     * stored in memory to match the data that is shown in the dataTable. This is
     * necessary before saving a file and to keep records up to date when deleteing
     * records.
     */
    private void viewToMemory() {
        int i, j;
        ArrayList<String[]> tempList = new ArrayList<String[]>();
        String[] tempArray;
        for (i = 0; i < tmodel.getRowCount(); i++) {
            tempArray = new String[PinpointConverter.tableHeaders.length];
            for (j = 0; j < tmodel.getColumnCount(); j++) {
                tempArray[j] = (String) tmodel.getValueAt(i, j);
            }
            tempList.add(tempArray);
        }
        data = tempList;
    }

    private class BootloaderUpdater extends Thread {

        JFrame parent;
        String file;

        public BootloaderUpdater(JFrame parent, String fileName) {
            this.parent = parent;
            this.file = fileName;
        }

        @Override
        public void run() {
            bootloaderInterface BootPoint = null;
            GoldenEye_v1App.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                if (pptIsAvailable()) {

                    pinpoint.initiateBootloader();

                    pinpoint.resetPinpoint();
                    pinpoint.disconnect();

                    BootPoint = new bootloaderInterface();

                    if (BootPoint.sendP()) {

                        BootPoint.FlashBootloader(file);

                    }
                }
            } catch (InvalidHexException ex){
                GoldenEye_v1App.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                JOptionPane.showMessageDialog(parent, ex.GetErrorType(), "Bootloader Error", JOptionPane.ERROR_MESSAGE);         
            } catch (NoConnectionException ex) {
                GoldenEye_v1App.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                JOptionPane.showMessageDialog(parent, "Could not connect to PINPoint", "No Connection Error", JOptionPane.ERROR_MESSAGE);
            }
            GoldenEye_v1App.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            BootPoint.disconnect();
        }
    }

    public class startProgressBar extends Thread {

        private int count, time;
        private String job;

        public startProgressBar(int Count, int Time, String Job) {
            job = Job;
            count = Count;
            time = Time;

        }

        public void run() {
            JFrame mainFrame = GoldenEye_v1App.getApplication().getMainFrame();
            ProgressBar pb = new ProgressBar(count, time, job);
            pb.setLocationRelativeTo(mainFrame);
            GoldenEye_v1App.getApplication().show(pb);
            pb.Start();
        }
    }
}
