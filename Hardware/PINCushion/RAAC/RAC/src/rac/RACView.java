/*
 * RACView.java
 */
package rac;

import com.pinpoint.api.PinpointConverter;
import com.pinpoint.api.pinpointInterface;
import com.pinpoint.exceptions.IncompatibleConversionException;
import com.pinpoint.exceptions.NoConnectionException;
import com.pinpoint.exceptions.NoDataException;
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.Collections;
import java.util.prefs.BackingStoreException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;

/**
 * The application's main frame.
 */
public class RACView extends FrameView {

    public ArrayList<String[]> data;
    private pinpointInterface pinpoint;
    private DefaultTableModel tmodel;
    private int SensorPort = PinpointConverter.BTA1;
    private boolean SensorsKnown = false;

    public RACView(SingleFrameApplication app) {
        super(app);

        initComponents();

        tmodel = new DefaultTableModel();
        tmodel.setColumnIdentifiers(new String[]{"Time", "Sensor"});
        dataTable.setModel(tmodel);
        this.getFrame().setTitle("River As A Classroom (v1.1)");

    }

    public void updateStats() {

        typeLabel.setText(PinpointConverter.tableHeaders[SensorPort]);

        double min;
        double max;
        double median = 0.0;
        min = max = Double.parseDouble(data.get(0)[SensorPort]);


        double total = 0.0;
        int count = data.size();

        ArrayList<Double> values = new ArrayList<Double>();

        for (String[] x : data) {
            values.add(Double.parseDouble(x[SensorPort]));
        }

        Collections.sort(values);

        for (Double x : values) {
            median = values.get((int) values.size() / 2);
            total += x;
            if (x < min) {
                min = x;
            }
            if (x > max) {
                max = x;
            }
        }
        medianLabel.setText(median + "");
        minLabel.setText(min + "");
        maxLabel.setText(max + "");

        if (!typeLabel.getText().contains("pH")) {
            avgLabel.setText(total / count + "");
        } else {
            avgLabel.setText("N/A");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        ControlPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        uploadData = new javax.swing.JButton();
        selectSensorButton = new javax.swing.JButton();
        DataPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        StatsPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        minLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        maxLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        avgLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        medianLabel = new javax.swing.JLabel();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(rac.RACApp.class).getContext().getResourceMap(RACView.class);
        ControlPanel.setBackground(resourceMap.getColor("ControlPanel.background")); // NOI18N
        ControlPanel.setName("ControlPanel"); // NOI18N

        jLabel1.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        uploadData.setText(resourceMap.getString("uploadData.text")); // NOI18N
        uploadData.setName("uploadData"); // NOI18N
        uploadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadDataActionPerformed(evt);
            }
        });

        selectSensorButton.setText(resourceMap.getString("selectSensorButton.text")); // NOI18N
        selectSensorButton.setName("selectSensorButton"); // NOI18N
        selectSensorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSensorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ControlPanelLayout = new javax.swing.GroupLayout(ControlPanel);
        ControlPanel.setLayout(ControlPanelLayout);
        ControlPanelLayout.setHorizontalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uploadData, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                    .addComponent(selectSensorButton, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                .addContainerGap())
        );
        ControlPanelLayout.setVerticalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(uploadData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 195, Short.MAX_VALUE)
                .addComponent(selectSensorButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        DataPanel.setBackground(resourceMap.getColor("DataPanel.background")); // NOI18N
        DataPanel.setName("DataPanel"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel2.setForeground(resourceMap.getColor("jLabel3.foreground")); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        dataTable.setModel(new DefaultTableModel());
        dataTable.setName("dataTable"); // NOI18N
        jScrollPane1.setViewportView(dataTable);

        javax.swing.GroupLayout DataPanelLayout = new javax.swing.GroupLayout(DataPanel);
        DataPanel.setLayout(DataPanelLayout);
        DataPanelLayout.setHorizontalGroup(
            DataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
        );
        DataPanelLayout.setVerticalGroup(
            DataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DataPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE))
        );

        StatsPanel.setBackground(resourceMap.getColor("jSeparator1.background")); // NOI18N
        StatsPanel.setForeground(resourceMap.getColor("avgLabel.foreground")); // NOI18N
        StatsPanel.setName("StatsPanel"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setForeground(resourceMap.getColor("jLabel3.foreground")); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        typeLabel.setForeground(resourceMap.getColor("avgLabel.foreground")); // NOI18N
        typeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        typeLabel.setText(resourceMap.getString("typeLabel.text")); // NOI18N
        typeLabel.setName("typeLabel"); // NOI18N

        jSeparator1.setBackground(resourceMap.getColor("jSeparator1.background")); // NOI18N
        jSeparator1.setForeground(resourceMap.getColor("jSeparator1.foreground")); // NOI18N
        jSeparator1.setName("jSeparator1"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel4.setForeground(resourceMap.getColor("avgLabel.foreground")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        minLabel.setFont(resourceMap.getFont("maxLabel.font")); // NOI18N
        minLabel.setForeground(resourceMap.getColor("avgLabel.foreground")); // NOI18N
        minLabel.setText(resourceMap.getString("minLabel.text")); // NOI18N
        minLabel.setName("minLabel"); // NOI18N

        jLabel5.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel5.setForeground(resourceMap.getColor("avgLabel.foreground")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        maxLabel.setFont(resourceMap.getFont("maxLabel.font")); // NOI18N
        maxLabel.setForeground(resourceMap.getColor("avgLabel.foreground")); // NOI18N
        maxLabel.setText(resourceMap.getString("maxLabel.text")); // NOI18N
        maxLabel.setName("maxLabel"); // NOI18N

        jLabel6.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel6.setForeground(resourceMap.getColor("avgLabel.foreground")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        avgLabel.setFont(resourceMap.getFont("maxLabel.font")); // NOI18N
        avgLabel.setForeground(resourceMap.getColor("avgLabel.foreground")); // NOI18N
        avgLabel.setText(resourceMap.getString("avgLabel.text")); // NOI18N
        avgLabel.setName("avgLabel"); // NOI18N

        jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel7.setForeground(resourceMap.getColor("jLabel7.foreground")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        medianLabel.setFont(resourceMap.getFont("maxLabel.font")); // NOI18N
        medianLabel.setText(resourceMap.getString("medianLabel.text")); // NOI18N
        medianLabel.setName("medianLabel"); // NOI18N

        javax.swing.GroupLayout StatsPanelLayout = new javax.swing.GroupLayout(StatsPanel);
        StatsPanel.setLayout(StatsPanelLayout);
        StatsPanelLayout.setHorizontalGroup(
            StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                    .addComponent(typeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                    .addGroup(StatsPanelLayout.createSequentialGroup()
                        .addGroup(StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, StatsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(12, 12, 12)
                                .addComponent(maxLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, StatsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(minLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(medianLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(avgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))))
                .addContainerGap())
        );
        StatsPanelLayout.setVerticalGroup(
            StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(typeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(avgLabel)
                    .addComponent(minLabel))
                .addGap(18, 18, 18)
                .addGroup(StatsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(medianLabel)
                    .addComponent(maxLabel)
                    .addComponent(jLabel5))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(ControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(StatsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StatsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setComponent(mainPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void uploadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadDataActionPerformed
        if (pptIsAvailable()) {
            try {
                tmodel.setRowCount(0);
                RACApp.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                data = pinpoint.getData();
                updateStats();
                
                for (String[] x : data) {
                    tmodel.addRow(new String[]{x[0], x[SensorPort]});
                }
                tmodel.setColumnIdentifiers(new String[]{"Time", PinpointConverter.tableHeaders[SensorPort]});
                RACApp.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                SensorsKnown = true;
            } catch (NoDataException ex) {
                RACApp.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                JOptionPane.showMessageDialog(this.getFrame(), "No data was found on the pinpoint.", "No Data", JOptionPane.ERROR_MESSAGE);
            } catch (IncompatibleConversionException ex) {
                RACApp.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                JOptionPane.showMessageDialog(this.getFrame(), "Incompatible Conversions.", "Conversions Error", JOptionPane.ERROR_MESSAGE);
            } catch (BackingStoreException ex) {
                RACApp.getApplication().getMainFrame().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                JOptionPane.showMessageDialog(this.getFrame(), "Conversions not found.", "Conversions Error", JOptionPane.ERROR_MESSAGE);
            }
            pinpoint.disconnect();
        }
    }//GEN-LAST:event_uploadDataActionPerformed

    private void selectSensorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSensorButtonActionPerformed
        Object[] choices = {
            "BTA 1",
            "BTA 2",
            "Mini 1",
            "Mini 2"
        };

        if (SensorsKnown) {
            choices[0] = (String) choices[0] + " : " + PinpointConverter.tableHeaders[PinpointConverter.BTA1];
            choices[1] = (String) choices[1] + " : " + PinpointConverter.tableHeaders[PinpointConverter.BTA2];
            choices[2] = (String) choices[2] + " : " + PinpointConverter.tableHeaders[PinpointConverter.MINI1];
            choices[3] = (String) choices[3] + " : " + PinpointConverter.tableHeaders[PinpointConverter.MINI2];
        }

        String selection = (String) JOptionPane.showInputDialog(
                this.getFrame(),
                "Choose a sensor",
                "Sensor Chooser",
                JOptionPane.PLAIN_MESSAGE,
                null,
                choices,
                (String) choices[0]);

       
        if(selection == null){
            
        }else if(selection.contains("BTA 1")) {
            SensorPort = PinpointConverter.BTA1;
        } else if (selection.contains("BTA 2")) {
            SensorPort = PinpointConverter.BTA2;
        } else if (selection.contains("Mini 2")) {
            SensorPort = PinpointConverter.MINI1;
        } else if (selection.contains("Mini 2")) {
            SensorPort = PinpointConverter.MINI2;
        }
    }//GEN-LAST:event_selectSensorButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ControlPanel;
    private javax.swing.JPanel DataPanel;
    private javax.swing.JPanel StatsPanel;
    private javax.swing.JLabel avgLabel;
    private javax.swing.JTable dataTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel maxLabel;
    private javax.swing.JLabel medianLabel;
    private javax.swing.JLabel minLabel;
    private javax.swing.JButton selectSensorButton;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton uploadData;
    // End of variables declaration//GEN-END:variables

    private boolean pptIsAvailable() {
        try {
            pinpoint = new pinpointInterface(true);
        } catch (NoConnectionException ex) {
            JOptionPane.showMessageDialog(RACApp.getApplication().getMainFrame(),
                    "No PIN Points were found.\nPlease make sure it is plugged in and turned on.",
                    "PIN POINT NOT FOUND",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        } catch (Exception ex) {
            return false;
        }
        return true;
    }
}
